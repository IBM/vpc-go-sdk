/**
 * (C) Copyright IBM Corp. 2020.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package vpcclassicv1_test

import (
	"bytes"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"os"
	"time"

	"github.com/IBM/go-sdk-core/v4/core"
	"github.com/IBM/vpc-go-sdk/vpcclassicv1"
	"github.com/go-openapi/strfmt"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)

var _ = Describe(`VpcClassicV1`, func() {
	var testServer *httptest.Server
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			Expect(testService).ToNot(BeNil())
			Expect(testServiceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				URL:     "{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				URL:     "https://vpcclassicv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_URL":       "https://vpcclassicv1/api",
				"VPC_CLASSIC_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					URL:     "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					Version: core.StringPtr(version),
				})
				err := testService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_URL":       "https://vpcclassicv1/api",
				"VPC_CLASSIC_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
				URL:     "{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`ListFloatingIps(listFloatingIpsOptions *ListFloatingIpsOptions) - Operation response error`, func() {
		version := "testString"
		listFloatingIpsPath := "/floating_ips"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listFloatingIpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListFloatingIps with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListFloatingIpsOptions model
				listFloatingIpsOptionsModel := new(vpcclassicv1.ListFloatingIpsOptions)
				listFloatingIpsOptionsModel.Start = core.StringPtr("testString")
				listFloatingIpsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listFloatingIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListFloatingIps(listFloatingIpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListFloatingIps(listFloatingIpsOptions *ListFloatingIpsOptions)`, func() {
		version := "testString"
		listFloatingIpsPath := "/floating_ips"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listFloatingIpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips?limit=20"}, "floating_ips": [{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "status": "available", "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}}`)
				}))
			})
			It(`Invoke ListFloatingIps successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListFloatingIps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListFloatingIpsOptions model
				listFloatingIpsOptionsModel := new(vpcclassicv1.ListFloatingIpsOptions)
				listFloatingIpsOptionsModel.Start = core.StringPtr("testString")
				listFloatingIpsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listFloatingIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListFloatingIps(listFloatingIpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListFloatingIps with error: Operation request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListFloatingIpsOptions model
				listFloatingIpsOptionsModel := new(vpcclassicv1.ListFloatingIpsOptions)
				listFloatingIpsOptionsModel.Start = core.StringPtr("testString")
				listFloatingIpsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listFloatingIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListFloatingIps(listFloatingIpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateFloatingIP(createFloatingIPOptions *CreateFloatingIPOptions) - Operation response error`, func() {
		version := "testString"
		createFloatingIPPath := "/floating_ips"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createFloatingIPPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateFloatingIP with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcclassicv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the FloatingIPPrototypeFloatingIPByZone model
				floatingIPPrototypeModel := new(vpcclassicv1.FloatingIPPrototypeFloatingIPByZone)
				floatingIPPrototypeModel.Name = core.StringPtr("my-floating-ip")
				floatingIPPrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateFloatingIPOptions model
				createFloatingIPOptionsModel := new(vpcclassicv1.CreateFloatingIPOptions)
				createFloatingIPOptionsModel.FloatingIPPrototype = floatingIPPrototypeModel
				createFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateFloatingIP(createFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateFloatingIP(createFloatingIPOptions *CreateFloatingIPOptions)`, func() {
		version := "testString"
		createFloatingIPPath := "/floating_ips"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createFloatingIPPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "status": "available", "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreateFloatingIP successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateFloatingIP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcclassicv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the FloatingIPPrototypeFloatingIPByZone model
				floatingIPPrototypeModel := new(vpcclassicv1.FloatingIPPrototypeFloatingIPByZone)
				floatingIPPrototypeModel.Name = core.StringPtr("my-floating-ip")
				floatingIPPrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateFloatingIPOptions model
				createFloatingIPOptionsModel := new(vpcclassicv1.CreateFloatingIPOptions)
				createFloatingIPOptionsModel.FloatingIPPrototype = floatingIPPrototypeModel
				createFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateFloatingIP(createFloatingIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateFloatingIP with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcclassicv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the FloatingIPPrototypeFloatingIPByZone model
				floatingIPPrototypeModel := new(vpcclassicv1.FloatingIPPrototypeFloatingIPByZone)
				floatingIPPrototypeModel.Name = core.StringPtr("my-floating-ip")
				floatingIPPrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateFloatingIPOptions model
				createFloatingIPOptionsModel := new(vpcclassicv1.CreateFloatingIPOptions)
				createFloatingIPOptionsModel.FloatingIPPrototype = floatingIPPrototypeModel
				createFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateFloatingIP(createFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateFloatingIPOptions model with no property values
				createFloatingIPOptionsModelNew := new(vpcclassicv1.CreateFloatingIPOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateFloatingIP(createFloatingIPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteFloatingIP(deleteFloatingIPOptions *DeleteFloatingIPOptions)`, func() {
		version := "testString"
		deleteFloatingIPPath := "/floating_ips/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteFloatingIPPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteFloatingIP successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteFloatingIP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteFloatingIPOptions model
				deleteFloatingIPOptionsModel := new(vpcclassicv1.DeleteFloatingIPOptions)
				deleteFloatingIPOptionsModel.ID = core.StringPtr("testString")
				deleteFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteFloatingIP(deleteFloatingIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteFloatingIP with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteFloatingIPOptions model
				deleteFloatingIPOptionsModel := new(vpcclassicv1.DeleteFloatingIPOptions)
				deleteFloatingIPOptionsModel.ID = core.StringPtr("testString")
				deleteFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteFloatingIP(deleteFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteFloatingIPOptions model with no property values
				deleteFloatingIPOptionsModelNew := new(vpcclassicv1.DeleteFloatingIPOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteFloatingIP(deleteFloatingIPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetFloatingIP(getFloatingIPOptions *GetFloatingIPOptions) - Operation response error`, func() {
		version := "testString"
		getFloatingIPPath := "/floating_ips/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getFloatingIPPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetFloatingIP with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetFloatingIPOptions model
				getFloatingIPOptionsModel := new(vpcclassicv1.GetFloatingIPOptions)
				getFloatingIPOptionsModel.ID = core.StringPtr("testString")
				getFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetFloatingIP(getFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetFloatingIP(getFloatingIPOptions *GetFloatingIPOptions)`, func() {
		version := "testString"
		getFloatingIPPath := "/floating_ips/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getFloatingIPPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "status": "available", "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetFloatingIP successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetFloatingIP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetFloatingIPOptions model
				getFloatingIPOptionsModel := new(vpcclassicv1.GetFloatingIPOptions)
				getFloatingIPOptionsModel.ID = core.StringPtr("testString")
				getFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetFloatingIP(getFloatingIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetFloatingIP with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetFloatingIPOptions model
				getFloatingIPOptionsModel := new(vpcclassicv1.GetFloatingIPOptions)
				getFloatingIPOptionsModel.ID = core.StringPtr("testString")
				getFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetFloatingIP(getFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetFloatingIPOptions model with no property values
				getFloatingIPOptionsModelNew := new(vpcclassicv1.GetFloatingIPOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetFloatingIP(getFloatingIPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateFloatingIP(updateFloatingIPOptions *UpdateFloatingIPOptions) - Operation response error`, func() {
		version := "testString"
		updateFloatingIPPath := "/floating_ips/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateFloatingIPPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateFloatingIP with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID model
				floatingIPPatchTargetNetworkInterfaceIdentityModel := new(vpcclassicv1.FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID)
				floatingIPPatchTargetNetworkInterfaceIdentityModel.ID = core.StringPtr("10c02d81-0ecb-4dc5-897d-28392913b81e")

				// Construct an instance of the UpdateFloatingIPOptions model
				updateFloatingIPOptionsModel := new(vpcclassicv1.UpdateFloatingIPOptions)
				updateFloatingIPOptionsModel.ID = core.StringPtr("testString")
				updateFloatingIPOptionsModel.Name = core.StringPtr("my-floating-ip")
				updateFloatingIPOptionsModel.Target = floatingIPPatchTargetNetworkInterfaceIdentityModel
				updateFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateFloatingIP(updateFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateFloatingIP(updateFloatingIPOptions *UpdateFloatingIPOptions)`, func() {
		version := "testString"
		updateFloatingIPPath := "/floating_ips/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateFloatingIPPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "status": "available", "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateFloatingIP successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateFloatingIP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID model
				floatingIPPatchTargetNetworkInterfaceIdentityModel := new(vpcclassicv1.FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID)
				floatingIPPatchTargetNetworkInterfaceIdentityModel.ID = core.StringPtr("10c02d81-0ecb-4dc5-897d-28392913b81e")

				// Construct an instance of the UpdateFloatingIPOptions model
				updateFloatingIPOptionsModel := new(vpcclassicv1.UpdateFloatingIPOptions)
				updateFloatingIPOptionsModel.ID = core.StringPtr("testString")
				updateFloatingIPOptionsModel.Name = core.StringPtr("my-floating-ip")
				updateFloatingIPOptionsModel.Target = floatingIPPatchTargetNetworkInterfaceIdentityModel
				updateFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateFloatingIP(updateFloatingIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateFloatingIP with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID model
				floatingIPPatchTargetNetworkInterfaceIdentityModel := new(vpcclassicv1.FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID)
				floatingIPPatchTargetNetworkInterfaceIdentityModel.ID = core.StringPtr("10c02d81-0ecb-4dc5-897d-28392913b81e")

				// Construct an instance of the UpdateFloatingIPOptions model
				updateFloatingIPOptionsModel := new(vpcclassicv1.UpdateFloatingIPOptions)
				updateFloatingIPOptionsModel.ID = core.StringPtr("testString")
				updateFloatingIPOptionsModel.Name = core.StringPtr("my-floating-ip")
				updateFloatingIPOptionsModel.Target = floatingIPPatchTargetNetworkInterfaceIdentityModel
				updateFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateFloatingIP(updateFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateFloatingIPOptions model with no property values
				updateFloatingIPOptionsModelNew := new(vpcclassicv1.UpdateFloatingIPOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateFloatingIP(updateFloatingIPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			Expect(testService).ToNot(BeNil())
			Expect(testServiceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				URL:     "{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				URL:     "https://vpcclassicv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_URL":       "https://vpcclassicv1/api",
				"VPC_CLASSIC_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					URL:     "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					Version: core.StringPtr(version),
				})
				err := testService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_URL":       "https://vpcclassicv1/api",
				"VPC_CLASSIC_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
				URL:     "{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`ListRegions(listRegionsOptions *ListRegionsOptions) - Operation response error`, func() {
		version := "testString"
		listRegionsPath := "/regions"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listRegionsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListRegions with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListRegionsOptions model
				listRegionsOptionsModel := new(vpcclassicv1.ListRegionsOptions)
				listRegionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListRegions(listRegionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListRegions(listRegionsOptions *ListRegionsOptions)`, func() {
		version := "testString"
		listRegionsPath := "/regions"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listRegionsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"regions": [{"endpoint": "Endpoint", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south", "name": "us-south", "status": "available"}]}`)
				}))
			})
			It(`Invoke ListRegions successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListRegions(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListRegionsOptions model
				listRegionsOptionsModel := new(vpcclassicv1.ListRegionsOptions)
				listRegionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListRegions(listRegionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListRegions with error: Operation request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListRegionsOptions model
				listRegionsOptionsModel := new(vpcclassicv1.ListRegionsOptions)
				listRegionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListRegions(listRegionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetRegion(getRegionOptions *GetRegionOptions) - Operation response error`, func() {
		version := "testString"
		getRegionPath := "/regions/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getRegionPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetRegion with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetRegionOptions model
				getRegionOptionsModel := new(vpcclassicv1.GetRegionOptions)
				getRegionOptionsModel.Name = core.StringPtr("testString")
				getRegionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetRegion(getRegionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetRegion(getRegionOptions *GetRegionOptions)`, func() {
		version := "testString"
		getRegionPath := "/regions/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getRegionPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"endpoint": "Endpoint", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south", "name": "us-south", "status": "available"}`)
				}))
			})
			It(`Invoke GetRegion successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetRegion(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetRegionOptions model
				getRegionOptionsModel := new(vpcclassicv1.GetRegionOptions)
				getRegionOptionsModel.Name = core.StringPtr("testString")
				getRegionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetRegion(getRegionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetRegion with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetRegionOptions model
				getRegionOptionsModel := new(vpcclassicv1.GetRegionOptions)
				getRegionOptionsModel.Name = core.StringPtr("testString")
				getRegionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetRegion(getRegionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetRegionOptions model with no property values
				getRegionOptionsModelNew := new(vpcclassicv1.GetRegionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetRegion(getRegionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListRegionZones(listRegionZonesOptions *ListRegionZonesOptions) - Operation response error`, func() {
		version := "testString"
		listRegionZonesPath := "/regions/testString/zones"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listRegionZonesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListRegionZones with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListRegionZonesOptions model
				listRegionZonesOptionsModel := new(vpcclassicv1.ListRegionZonesOptions)
				listRegionZonesOptionsModel.RegionName = core.StringPtr("testString")
				listRegionZonesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListRegionZones(listRegionZonesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListRegionZones(listRegionZonesOptions *ListRegionZonesOptions)`, func() {
		version := "testString"
		listRegionZonesPath := "/regions/testString/zones"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listRegionZonesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"zones": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1", "region": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south", "name": "us-south"}, "status": "available"}]}`)
				}))
			})
			It(`Invoke ListRegionZones successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListRegionZones(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListRegionZonesOptions model
				listRegionZonesOptionsModel := new(vpcclassicv1.ListRegionZonesOptions)
				listRegionZonesOptionsModel.RegionName = core.StringPtr("testString")
				listRegionZonesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListRegionZones(listRegionZonesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListRegionZones with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListRegionZonesOptions model
				listRegionZonesOptionsModel := new(vpcclassicv1.ListRegionZonesOptions)
				listRegionZonesOptionsModel.RegionName = core.StringPtr("testString")
				listRegionZonesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListRegionZones(listRegionZonesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListRegionZonesOptions model with no property values
				listRegionZonesOptionsModelNew := new(vpcclassicv1.ListRegionZonesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListRegionZones(listRegionZonesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetRegionZone(getRegionZoneOptions *GetRegionZoneOptions) - Operation response error`, func() {
		version := "testString"
		getRegionZonePath := "/regions/testString/zones/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getRegionZonePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetRegionZone with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetRegionZoneOptions model
				getRegionZoneOptionsModel := new(vpcclassicv1.GetRegionZoneOptions)
				getRegionZoneOptionsModel.RegionName = core.StringPtr("testString")
				getRegionZoneOptionsModel.ZoneName = core.StringPtr("testString")
				getRegionZoneOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetRegionZone(getRegionZoneOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetRegionZone(getRegionZoneOptions *GetRegionZoneOptions)`, func() {
		version := "testString"
		getRegionZonePath := "/regions/testString/zones/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getRegionZonePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1", "region": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south", "name": "us-south"}, "status": "available"}`)
				}))
			})
			It(`Invoke GetRegionZone successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetRegionZone(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetRegionZoneOptions model
				getRegionZoneOptionsModel := new(vpcclassicv1.GetRegionZoneOptions)
				getRegionZoneOptionsModel.RegionName = core.StringPtr("testString")
				getRegionZoneOptionsModel.ZoneName = core.StringPtr("testString")
				getRegionZoneOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetRegionZone(getRegionZoneOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetRegionZone with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetRegionZoneOptions model
				getRegionZoneOptionsModel := new(vpcclassicv1.GetRegionZoneOptions)
				getRegionZoneOptionsModel.RegionName = core.StringPtr("testString")
				getRegionZoneOptionsModel.ZoneName = core.StringPtr("testString")
				getRegionZoneOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetRegionZone(getRegionZoneOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetRegionZoneOptions model with no property values
				getRegionZoneOptionsModelNew := new(vpcclassicv1.GetRegionZoneOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetRegionZone(getRegionZoneOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			Expect(testService).ToNot(BeNil())
			Expect(testServiceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				URL:     "{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				URL:     "https://vpcclassicv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_URL":       "https://vpcclassicv1/api",
				"VPC_CLASSIC_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					URL:     "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					Version: core.StringPtr(version),
				})
				err := testService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_URL":       "https://vpcclassicv1/api",
				"VPC_CLASSIC_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
				URL:     "{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`ListImages(listImagesOptions *ListImagesOptions) - Operation response error`, func() {
		version := "testString"
		listImagesPath := "/images"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listImagesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["visibility"]).To(Equal([]string{"private"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListImages with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListImagesOptions model
				listImagesOptionsModel := new(vpcclassicv1.ListImagesOptions)
				listImagesOptionsModel.Start = core.StringPtr("testString")
				listImagesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listImagesOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listImagesOptionsModel.Name = core.StringPtr("testString")
				listImagesOptionsModel.Visibility = core.StringPtr("private")
				listImagesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListImages(listImagesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListImages(listImagesOptions *ListImagesOptions)`, func() {
		version := "testString"
		listImagesPath := "/images"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listImagesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["visibility"]).To(Equal([]string{"private"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/images?limit=20"}, "images": [{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "file": {"size": 1}, "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "minimum_provisioned_size": 22, "name": "my-image", "operating_system": {"architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "status": "available", "visibility": "private"}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/images?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}}`)
				}))
			})
			It(`Invoke ListImages successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListImages(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListImagesOptions model
				listImagesOptionsModel := new(vpcclassicv1.ListImagesOptions)
				listImagesOptionsModel.Start = core.StringPtr("testString")
				listImagesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listImagesOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listImagesOptionsModel.Name = core.StringPtr("testString")
				listImagesOptionsModel.Visibility = core.StringPtr("private")
				listImagesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListImages(listImagesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListImages with error: Operation request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListImagesOptions model
				listImagesOptionsModel := new(vpcclassicv1.ListImagesOptions)
				listImagesOptionsModel.Start = core.StringPtr("testString")
				listImagesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listImagesOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listImagesOptionsModel.Name = core.StringPtr("testString")
				listImagesOptionsModel.Visibility = core.StringPtr("private")
				listImagesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListImages(listImagesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateImage(createImageOptions *CreateImageOptions) - Operation response error`, func() {
		version := "testString"
		createImagePath := "/images"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createImagePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateImage with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ImageFilePrototype model
				imageFilePrototypeModel := new(vpcclassicv1.ImageFilePrototype)
				imageFilePrototypeModel.Href = core.StringPtr("cos://us-south/custom-image-vpc-bucket/customImage-0.vhd")

				// Construct an instance of the OperatingSystemIdentityByName model
				operatingSystemIdentityModel := new(vpcclassicv1.OperatingSystemIdentityByName)
				operatingSystemIdentityModel.Name = core.StringPtr("ubuntu-16-amd64")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the ImagePrototypeImageByFile model
				imagePrototypeModel := new(vpcclassicv1.ImagePrototypeImageByFile)
				imagePrototypeModel.Name = core.StringPtr("my-image")
				imagePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				imagePrototypeModel.File = imageFilePrototypeModel
				imagePrototypeModel.OperatingSystem = operatingSystemIdentityModel

				// Construct an instance of the CreateImageOptions model
				createImageOptionsModel := new(vpcclassicv1.CreateImageOptions)
				createImageOptionsModel.ImagePrototype = imagePrototypeModel
				createImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateImage(createImageOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateImage(createImageOptions *CreateImageOptions)`, func() {
		version := "testString"
		createImagePath := "/images"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createImagePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "file": {"size": 1}, "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "minimum_provisioned_size": 22, "name": "my-image", "operating_system": {"architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "status": "available", "visibility": "private"}`)
				}))
			})
			It(`Invoke CreateImage successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateImage(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ImageFilePrototype model
				imageFilePrototypeModel := new(vpcclassicv1.ImageFilePrototype)
				imageFilePrototypeModel.Href = core.StringPtr("cos://us-south/custom-image-vpc-bucket/customImage-0.vhd")

				// Construct an instance of the OperatingSystemIdentityByName model
				operatingSystemIdentityModel := new(vpcclassicv1.OperatingSystemIdentityByName)
				operatingSystemIdentityModel.Name = core.StringPtr("ubuntu-16-amd64")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the ImagePrototypeImageByFile model
				imagePrototypeModel := new(vpcclassicv1.ImagePrototypeImageByFile)
				imagePrototypeModel.Name = core.StringPtr("my-image")
				imagePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				imagePrototypeModel.File = imageFilePrototypeModel
				imagePrototypeModel.OperatingSystem = operatingSystemIdentityModel

				// Construct an instance of the CreateImageOptions model
				createImageOptionsModel := new(vpcclassicv1.CreateImageOptions)
				createImageOptionsModel.ImagePrototype = imagePrototypeModel
				createImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateImage(createImageOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateImage with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ImageFilePrototype model
				imageFilePrototypeModel := new(vpcclassicv1.ImageFilePrototype)
				imageFilePrototypeModel.Href = core.StringPtr("cos://us-south/custom-image-vpc-bucket/customImage-0.vhd")

				// Construct an instance of the OperatingSystemIdentityByName model
				operatingSystemIdentityModel := new(vpcclassicv1.OperatingSystemIdentityByName)
				operatingSystemIdentityModel.Name = core.StringPtr("ubuntu-16-amd64")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the ImagePrototypeImageByFile model
				imagePrototypeModel := new(vpcclassicv1.ImagePrototypeImageByFile)
				imagePrototypeModel.Name = core.StringPtr("my-image")
				imagePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				imagePrototypeModel.File = imageFilePrototypeModel
				imagePrototypeModel.OperatingSystem = operatingSystemIdentityModel

				// Construct an instance of the CreateImageOptions model
				createImageOptionsModel := new(vpcclassicv1.CreateImageOptions)
				createImageOptionsModel.ImagePrototype = imagePrototypeModel
				createImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateImage(createImageOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateImageOptions model with no property values
				createImageOptionsModelNew := new(vpcclassicv1.CreateImageOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateImage(createImageOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteImage(deleteImageOptions *DeleteImageOptions)`, func() {
		version := "testString"
		deleteImagePath := "/images/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteImagePath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(202)
				}))
			})
			It(`Invoke DeleteImage successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteImage(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteImageOptions model
				deleteImageOptionsModel := new(vpcclassicv1.DeleteImageOptions)
				deleteImageOptionsModel.ID = core.StringPtr("testString")
				deleteImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteImage(deleteImageOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteImage with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteImageOptions model
				deleteImageOptionsModel := new(vpcclassicv1.DeleteImageOptions)
				deleteImageOptionsModel.ID = core.StringPtr("testString")
				deleteImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteImage(deleteImageOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteImageOptions model with no property values
				deleteImageOptionsModelNew := new(vpcclassicv1.DeleteImageOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteImage(deleteImageOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetImage(getImageOptions *GetImageOptions) - Operation response error`, func() {
		version := "testString"
		getImagePath := "/images/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getImagePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetImage with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetImageOptions model
				getImageOptionsModel := new(vpcclassicv1.GetImageOptions)
				getImageOptionsModel.ID = core.StringPtr("testString")
				getImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetImage(getImageOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetImage(getImageOptions *GetImageOptions)`, func() {
		version := "testString"
		getImagePath := "/images/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getImagePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "file": {"size": 1}, "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "minimum_provisioned_size": 22, "name": "my-image", "operating_system": {"architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "status": "available", "visibility": "private"}`)
				}))
			})
			It(`Invoke GetImage successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetImage(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetImageOptions model
				getImageOptionsModel := new(vpcclassicv1.GetImageOptions)
				getImageOptionsModel.ID = core.StringPtr("testString")
				getImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetImage(getImageOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetImage with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetImageOptions model
				getImageOptionsModel := new(vpcclassicv1.GetImageOptions)
				getImageOptionsModel.ID = core.StringPtr("testString")
				getImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetImage(getImageOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetImageOptions model with no property values
				getImageOptionsModelNew := new(vpcclassicv1.GetImageOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetImage(getImageOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateImage(updateImageOptions *UpdateImageOptions) - Operation response error`, func() {
		version := "testString"
		updateImagePath := "/images/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateImagePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateImage with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateImageOptions model
				updateImageOptionsModel := new(vpcclassicv1.UpdateImageOptions)
				updateImageOptionsModel.ID = core.StringPtr("testString")
				updateImageOptionsModel.Name = core.StringPtr("my-image")
				updateImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateImage(updateImageOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateImage(updateImageOptions *UpdateImageOptions)`, func() {
		version := "testString"
		updateImagePath := "/images/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateImagePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "file": {"size": 1}, "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "minimum_provisioned_size": 22, "name": "my-image", "operating_system": {"architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "status": "available", "visibility": "private"}`)
				}))
			})
			It(`Invoke UpdateImage successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateImage(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateImageOptions model
				updateImageOptionsModel := new(vpcclassicv1.UpdateImageOptions)
				updateImageOptionsModel.ID = core.StringPtr("testString")
				updateImageOptionsModel.Name = core.StringPtr("my-image")
				updateImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateImage(updateImageOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateImage with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateImageOptions model
				updateImageOptionsModel := new(vpcclassicv1.UpdateImageOptions)
				updateImageOptionsModel.ID = core.StringPtr("testString")
				updateImageOptionsModel.Name = core.StringPtr("my-image")
				updateImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateImage(updateImageOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateImageOptions model with no property values
				updateImageOptionsModelNew := new(vpcclassicv1.UpdateImageOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateImage(updateImageOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListOperatingSystems(listOperatingSystemsOptions *ListOperatingSystemsOptions) - Operation response error`, func() {
		version := "testString"
		listOperatingSystemsPath := "/operating_systems"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listOperatingSystemsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListOperatingSystems with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListOperatingSystemsOptions model
				listOperatingSystemsOptionsModel := new(vpcclassicv1.ListOperatingSystemsOptions)
				listOperatingSystemsOptionsModel.Start = core.StringPtr("testString")
				listOperatingSystemsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listOperatingSystemsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListOperatingSystems(listOperatingSystemsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListOperatingSystems(listOperatingSystemsOptions *ListOperatingSystemsOptions)`, func() {
		version := "testString"
		listOperatingSystemsPath := "/operating_systems"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listOperatingSystemsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "operating_systems": [{"architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}]}`)
				}))
			})
			It(`Invoke ListOperatingSystems successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListOperatingSystems(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListOperatingSystemsOptions model
				listOperatingSystemsOptionsModel := new(vpcclassicv1.ListOperatingSystemsOptions)
				listOperatingSystemsOptionsModel.Start = core.StringPtr("testString")
				listOperatingSystemsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listOperatingSystemsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListOperatingSystems(listOperatingSystemsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListOperatingSystems with error: Operation request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListOperatingSystemsOptions model
				listOperatingSystemsOptionsModel := new(vpcclassicv1.ListOperatingSystemsOptions)
				listOperatingSystemsOptionsModel.Start = core.StringPtr("testString")
				listOperatingSystemsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listOperatingSystemsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListOperatingSystems(listOperatingSystemsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetOperatingSystem(getOperatingSystemOptions *GetOperatingSystemOptions) - Operation response error`, func() {
		version := "testString"
		getOperatingSystemPath := "/operating_systems/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getOperatingSystemPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetOperatingSystem with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetOperatingSystemOptions model
				getOperatingSystemOptionsModel := new(vpcclassicv1.GetOperatingSystemOptions)
				getOperatingSystemOptionsModel.Name = core.StringPtr("testString")
				getOperatingSystemOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetOperatingSystem(getOperatingSystemOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetOperatingSystem(getOperatingSystemOptions *GetOperatingSystemOptions)`, func() {
		version := "testString"
		getOperatingSystemPath := "/operating_systems/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getOperatingSystemPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"architecture": "amd64", "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}`)
				}))
			})
			It(`Invoke GetOperatingSystem successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetOperatingSystem(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetOperatingSystemOptions model
				getOperatingSystemOptionsModel := new(vpcclassicv1.GetOperatingSystemOptions)
				getOperatingSystemOptionsModel.Name = core.StringPtr("testString")
				getOperatingSystemOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetOperatingSystem(getOperatingSystemOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetOperatingSystem with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetOperatingSystemOptions model
				getOperatingSystemOptionsModel := new(vpcclassicv1.GetOperatingSystemOptions)
				getOperatingSystemOptionsModel.Name = core.StringPtr("testString")
				getOperatingSystemOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetOperatingSystem(getOperatingSystemOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetOperatingSystemOptions model with no property values
				getOperatingSystemOptionsModelNew := new(vpcclassicv1.GetOperatingSystemOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetOperatingSystem(getOperatingSystemOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			Expect(testService).ToNot(BeNil())
			Expect(testServiceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				URL:     "{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				URL:     "https://vpcclassicv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_URL":       "https://vpcclassicv1/api",
				"VPC_CLASSIC_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					URL:     "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					Version: core.StringPtr(version),
				})
				err := testService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_URL":       "https://vpcclassicv1/api",
				"VPC_CLASSIC_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
				URL:     "{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`ListInstanceProfiles(listInstanceProfilesOptions *ListInstanceProfilesOptions) - Operation response error`, func() {
		version := "testString"
		listInstanceProfilesPath := "/instance/profiles"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listInstanceProfilesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListInstanceProfiles with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListInstanceProfilesOptions model
				listInstanceProfilesOptionsModel := new(vpcclassicv1.ListInstanceProfilesOptions)
				listInstanceProfilesOptionsModel.Start = core.StringPtr("testString")
				listInstanceProfilesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstanceProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListInstanceProfiles(listInstanceProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListInstanceProfiles(listInstanceProfilesOptions *ListInstanceProfilesOptions)`, func() {
		version := "testString"
		listInstanceProfilesPath := "/instance/profiles"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listInstanceProfilesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "profiles": [{"bandwidth": {"type": "fixed", "value": 20000}, "crn": "crn:v1:bluemix:public:is:us-south-1:::instance-profile:bc1-4x16", "family": "balanced", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16", "port_speed": {"type": "fixed", "value": 1000}}], "total_count": 132}`)
				}))
			})
			It(`Invoke ListInstanceProfiles successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListInstanceProfiles(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListInstanceProfilesOptions model
				listInstanceProfilesOptionsModel := new(vpcclassicv1.ListInstanceProfilesOptions)
				listInstanceProfilesOptionsModel.Start = core.StringPtr("testString")
				listInstanceProfilesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstanceProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListInstanceProfiles(listInstanceProfilesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListInstanceProfiles with error: Operation request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListInstanceProfilesOptions model
				listInstanceProfilesOptionsModel := new(vpcclassicv1.ListInstanceProfilesOptions)
				listInstanceProfilesOptionsModel.Start = core.StringPtr("testString")
				listInstanceProfilesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstanceProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListInstanceProfiles(listInstanceProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceProfile(getInstanceProfileOptions *GetInstanceProfileOptions) - Operation response error`, func() {
		version := "testString"
		getInstanceProfilePath := "/instance/profiles/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getInstanceProfilePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInstanceProfile with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetInstanceProfileOptions model
				getInstanceProfileOptionsModel := new(vpcclassicv1.GetInstanceProfileOptions)
				getInstanceProfileOptionsModel.Name = core.StringPtr("testString")
				getInstanceProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetInstanceProfile(getInstanceProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetInstanceProfile(getInstanceProfileOptions *GetInstanceProfileOptions)`, func() {
		version := "testString"
		getInstanceProfilePath := "/instance/profiles/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getInstanceProfilePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"bandwidth": {"type": "fixed", "value": 20000}, "crn": "crn:v1:bluemix:public:is:us-south-1:::instance-profile:bc1-4x16", "family": "balanced", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16", "port_speed": {"type": "fixed", "value": 1000}}`)
				}))
			})
			It(`Invoke GetInstanceProfile successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetInstanceProfile(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInstanceProfileOptions model
				getInstanceProfileOptionsModel := new(vpcclassicv1.GetInstanceProfileOptions)
				getInstanceProfileOptionsModel.Name = core.StringPtr("testString")
				getInstanceProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetInstanceProfile(getInstanceProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetInstanceProfile with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetInstanceProfileOptions model
				getInstanceProfileOptionsModel := new(vpcclassicv1.GetInstanceProfileOptions)
				getInstanceProfileOptionsModel.Name = core.StringPtr("testString")
				getInstanceProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetInstanceProfile(getInstanceProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInstanceProfileOptions model with no property values
				getInstanceProfileOptionsModelNew := new(vpcclassicv1.GetInstanceProfileOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetInstanceProfile(getInstanceProfileOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstances(listInstancesOptions *ListInstancesOptions) - Operation response error`, func() {
		version := "testString"
		listInstancesPath := "/instances"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listInstancesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["network_interfaces.subnet.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["network_interfaces.subnet.crn"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["network_interfaces.subnet.name"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListInstances with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListInstancesOptions model
				listInstancesOptionsModel := new(vpcclassicv1.ListInstancesOptions)
				listInstancesOptionsModel.Start = core.StringPtr("testString")
				listInstancesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstancesOptionsModel.NetworkInterfacesSubnetID = core.StringPtr("testString")
				listInstancesOptionsModel.NetworkInterfacesSubnetCRN = core.StringPtr("testString")
				listInstancesOptionsModel.NetworkInterfacesSubnetName = core.StringPtr("testString")
				listInstancesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListInstances(listInstancesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListInstances(listInstancesOptions *ListInstancesOptions)`, func() {
		version := "testString"
		listInstancesPath := "/instances"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listInstancesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["network_interfaces.subnet.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["network_interfaces.subnet.crn"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["network_interfaces.subnet.name"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances?limit=20"}, "instances": [{"bandwidth": 1000, "boot_volume_attachment": {"device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "image": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "name": "my-instance", "network_interfaces": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "primary_network_interface": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"crn": "crn:v1:bluemix:public:is:us-south-1:::instance-profile:bc1-4x16", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "status": "failed", "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListInstances successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListInstances(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListInstancesOptions model
				listInstancesOptionsModel := new(vpcclassicv1.ListInstancesOptions)
				listInstancesOptionsModel.Start = core.StringPtr("testString")
				listInstancesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstancesOptionsModel.NetworkInterfacesSubnetID = core.StringPtr("testString")
				listInstancesOptionsModel.NetworkInterfacesSubnetCRN = core.StringPtr("testString")
				listInstancesOptionsModel.NetworkInterfacesSubnetName = core.StringPtr("testString")
				listInstancesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListInstances(listInstancesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListInstances with error: Operation request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListInstancesOptions model
				listInstancesOptionsModel := new(vpcclassicv1.ListInstancesOptions)
				listInstancesOptionsModel.Start = core.StringPtr("testString")
				listInstancesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstancesOptionsModel.NetworkInterfacesSubnetID = core.StringPtr("testString")
				listInstancesOptionsModel.NetworkInterfacesSubnetCRN = core.StringPtr("testString")
				listInstancesOptionsModel.NetworkInterfacesSubnetName = core.StringPtr("testString")
				listInstancesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListInstances(listInstancesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInstance(createInstanceOptions *CreateInstanceOptions) - Operation response error`, func() {
		version := "testString"
		createInstancePath := "/instances"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createInstancePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateInstance with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcclassicv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcclassicv1.VolumeProfileIdentityByName)
				volumeProfileIdentityModel.Name = core.StringPtr("general-purpose")

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcclassicv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcclassicv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContextVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity model
				volumeAttachmentPrototypeInstanceContextVolumeModel := new(vpcclassicv1.VolumeAttachmentPrototypeInstanceContextVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity)
				volumeAttachmentPrototypeInstanceContextVolumeModel.EncryptionKey = encryptionKeyIdentityModel
				volumeAttachmentPrototypeInstanceContextVolumeModel.Iops = core.Int64Ptr(int64(10000))
				volumeAttachmentPrototypeInstanceContextVolumeModel.Name = core.StringPtr("my-volume")
				volumeAttachmentPrototypeInstanceContextVolumeModel.Profile = volumeProfileIdentityModel
				volumeAttachmentPrototypeInstanceContextVolumeModel.Capacity = core.Int64Ptr(int64(100))

				// Construct an instance of the VolumePrototypeInstanceByImageContext model
				volumePrototypeInstanceByImageContextModel := new(vpcclassicv1.VolumePrototypeInstanceByImageContext)
				volumePrototypeInstanceByImageContextModel.Capacity = core.Int64Ptr(int64(100))
				volumePrototypeInstanceByImageContextModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeInstanceByImageContextModel.Iops = core.Int64Ptr(int64(10000))
				volumePrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume")
				volumePrototypeInstanceByImageContextModel.Profile = volumeProfileIdentityModel

				// Construct an instance of the ImageIdentityByID model
				imageIdentityModel := new(vpcclassicv1.ImageIdentityByID)
				imageIdentityModel.ID = core.StringPtr("72b27b5c-f4b0-48bb-b954-5becc7c1dcb8")

				// Construct an instance of the InstanceProfileIdentityByName model
				instanceProfileIdentityModel := new(vpcclassicv1.InstanceProfileIdentityByName)
				instanceProfileIdentityModel.Name = core.StringPtr("bc1-4x16")

				// Construct an instance of the KeyIdentityByID model
				keyIdentityModel := new(vpcclassicv1.KeyIdentityByID)
				keyIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")

				// Construct an instance of the NetworkInterfacePrototype model
				networkInterfacePrototypeModel := new(vpcclassicv1.NetworkInterfacePrototype)
				networkInterfacePrototypeModel.Name = core.StringPtr("my-network-interface")
				networkInterfacePrototypeModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				networkInterfacePrototypeModel.SecurityGroups = []vpcclassicv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				networkInterfacePrototypeModel.Subnet = subnetIdentityModel

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcclassicv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the VolumeAttachmentPrototypeInstanceByImageContext model
				volumeAttachmentPrototypeInstanceByImageContextModel := new(vpcclassicv1.VolumeAttachmentPrototypeInstanceByImageContext)
				volumeAttachmentPrototypeInstanceByImageContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceByImageContextModel.Volume = volumePrototypeInstanceByImageContextModel

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContext model
				volumeAttachmentPrototypeInstanceContextModel := new(vpcclassicv1.VolumeAttachmentPrototypeInstanceContext)
				volumeAttachmentPrototypeInstanceContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceContextModel.Volume = volumeAttachmentPrototypeInstanceContextVolumeModel

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcclassicv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the InstancePrototypeInstanceByImage model
				instancePrototypeModel := new(vpcclassicv1.InstancePrototypeInstanceByImage)
				instancePrototypeModel.Keys = []vpcclassicv1.KeyIdentityIntf{keyIdentityModel}
				instancePrototypeModel.Name = core.StringPtr("my-instance")
				instancePrototypeModel.NetworkInterfaces = []vpcclassicv1.NetworkInterfacePrototype{*networkInterfacePrototypeModel}
				instancePrototypeModel.Profile = instanceProfileIdentityModel
				instancePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				instancePrototypeModel.UserData = core.StringPtr("testString")
				instancePrototypeModel.VolumeAttachments = []vpcclassicv1.VolumeAttachmentPrototypeInstanceContext{*volumeAttachmentPrototypeInstanceContextModel}
				instancePrototypeModel.VPC = vpcIdentityModel
				instancePrototypeModel.BootVolumeAttachment = volumeAttachmentPrototypeInstanceByImageContextModel
				instancePrototypeModel.Image = imageIdentityModel
				instancePrototypeModel.PrimaryNetworkInterface = networkInterfacePrototypeModel
				instancePrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateInstanceOptions model
				createInstanceOptionsModel := new(vpcclassicv1.CreateInstanceOptions)
				createInstanceOptionsModel.InstancePrototype = instancePrototypeModel
				createInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateInstance(createInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateInstance(createInstanceOptions *CreateInstanceOptions)`, func() {
		version := "testString"
		createInstancePath := "/instances"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createInstancePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"bandwidth": 1000, "boot_volume_attachment": {"device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "image": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "name": "my-instance", "network_interfaces": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "primary_network_interface": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"crn": "crn:v1:bluemix:public:is:us-south-1:::instance-profile:bc1-4x16", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "status": "failed", "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreateInstance successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateInstance(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcclassicv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcclassicv1.VolumeProfileIdentityByName)
				volumeProfileIdentityModel.Name = core.StringPtr("general-purpose")

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcclassicv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcclassicv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContextVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity model
				volumeAttachmentPrototypeInstanceContextVolumeModel := new(vpcclassicv1.VolumeAttachmentPrototypeInstanceContextVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity)
				volumeAttachmentPrototypeInstanceContextVolumeModel.EncryptionKey = encryptionKeyIdentityModel
				volumeAttachmentPrototypeInstanceContextVolumeModel.Iops = core.Int64Ptr(int64(10000))
				volumeAttachmentPrototypeInstanceContextVolumeModel.Name = core.StringPtr("my-volume")
				volumeAttachmentPrototypeInstanceContextVolumeModel.Profile = volumeProfileIdentityModel
				volumeAttachmentPrototypeInstanceContextVolumeModel.Capacity = core.Int64Ptr(int64(100))

				// Construct an instance of the VolumePrototypeInstanceByImageContext model
				volumePrototypeInstanceByImageContextModel := new(vpcclassicv1.VolumePrototypeInstanceByImageContext)
				volumePrototypeInstanceByImageContextModel.Capacity = core.Int64Ptr(int64(100))
				volumePrototypeInstanceByImageContextModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeInstanceByImageContextModel.Iops = core.Int64Ptr(int64(10000))
				volumePrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume")
				volumePrototypeInstanceByImageContextModel.Profile = volumeProfileIdentityModel

				// Construct an instance of the ImageIdentityByID model
				imageIdentityModel := new(vpcclassicv1.ImageIdentityByID)
				imageIdentityModel.ID = core.StringPtr("72b27b5c-f4b0-48bb-b954-5becc7c1dcb8")

				// Construct an instance of the InstanceProfileIdentityByName model
				instanceProfileIdentityModel := new(vpcclassicv1.InstanceProfileIdentityByName)
				instanceProfileIdentityModel.Name = core.StringPtr("bc1-4x16")

				// Construct an instance of the KeyIdentityByID model
				keyIdentityModel := new(vpcclassicv1.KeyIdentityByID)
				keyIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")

				// Construct an instance of the NetworkInterfacePrototype model
				networkInterfacePrototypeModel := new(vpcclassicv1.NetworkInterfacePrototype)
				networkInterfacePrototypeModel.Name = core.StringPtr("my-network-interface")
				networkInterfacePrototypeModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				networkInterfacePrototypeModel.SecurityGroups = []vpcclassicv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				networkInterfacePrototypeModel.Subnet = subnetIdentityModel

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcclassicv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the VolumeAttachmentPrototypeInstanceByImageContext model
				volumeAttachmentPrototypeInstanceByImageContextModel := new(vpcclassicv1.VolumeAttachmentPrototypeInstanceByImageContext)
				volumeAttachmentPrototypeInstanceByImageContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceByImageContextModel.Volume = volumePrototypeInstanceByImageContextModel

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContext model
				volumeAttachmentPrototypeInstanceContextModel := new(vpcclassicv1.VolumeAttachmentPrototypeInstanceContext)
				volumeAttachmentPrototypeInstanceContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceContextModel.Volume = volumeAttachmentPrototypeInstanceContextVolumeModel

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcclassicv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the InstancePrototypeInstanceByImage model
				instancePrototypeModel := new(vpcclassicv1.InstancePrototypeInstanceByImage)
				instancePrototypeModel.Keys = []vpcclassicv1.KeyIdentityIntf{keyIdentityModel}
				instancePrototypeModel.Name = core.StringPtr("my-instance")
				instancePrototypeModel.NetworkInterfaces = []vpcclassicv1.NetworkInterfacePrototype{*networkInterfacePrototypeModel}
				instancePrototypeModel.Profile = instanceProfileIdentityModel
				instancePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				instancePrototypeModel.UserData = core.StringPtr("testString")
				instancePrototypeModel.VolumeAttachments = []vpcclassicv1.VolumeAttachmentPrototypeInstanceContext{*volumeAttachmentPrototypeInstanceContextModel}
				instancePrototypeModel.VPC = vpcIdentityModel
				instancePrototypeModel.BootVolumeAttachment = volumeAttachmentPrototypeInstanceByImageContextModel
				instancePrototypeModel.Image = imageIdentityModel
				instancePrototypeModel.PrimaryNetworkInterface = networkInterfacePrototypeModel
				instancePrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateInstanceOptions model
				createInstanceOptionsModel := new(vpcclassicv1.CreateInstanceOptions)
				createInstanceOptionsModel.InstancePrototype = instancePrototypeModel
				createInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateInstance(createInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateInstance with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcclassicv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcclassicv1.VolumeProfileIdentityByName)
				volumeProfileIdentityModel.Name = core.StringPtr("general-purpose")

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcclassicv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcclassicv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContextVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity model
				volumeAttachmentPrototypeInstanceContextVolumeModel := new(vpcclassicv1.VolumeAttachmentPrototypeInstanceContextVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity)
				volumeAttachmentPrototypeInstanceContextVolumeModel.EncryptionKey = encryptionKeyIdentityModel
				volumeAttachmentPrototypeInstanceContextVolumeModel.Iops = core.Int64Ptr(int64(10000))
				volumeAttachmentPrototypeInstanceContextVolumeModel.Name = core.StringPtr("my-volume")
				volumeAttachmentPrototypeInstanceContextVolumeModel.Profile = volumeProfileIdentityModel
				volumeAttachmentPrototypeInstanceContextVolumeModel.Capacity = core.Int64Ptr(int64(100))

				// Construct an instance of the VolumePrototypeInstanceByImageContext model
				volumePrototypeInstanceByImageContextModel := new(vpcclassicv1.VolumePrototypeInstanceByImageContext)
				volumePrototypeInstanceByImageContextModel.Capacity = core.Int64Ptr(int64(100))
				volumePrototypeInstanceByImageContextModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeInstanceByImageContextModel.Iops = core.Int64Ptr(int64(10000))
				volumePrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume")
				volumePrototypeInstanceByImageContextModel.Profile = volumeProfileIdentityModel

				// Construct an instance of the ImageIdentityByID model
				imageIdentityModel := new(vpcclassicv1.ImageIdentityByID)
				imageIdentityModel.ID = core.StringPtr("72b27b5c-f4b0-48bb-b954-5becc7c1dcb8")

				// Construct an instance of the InstanceProfileIdentityByName model
				instanceProfileIdentityModel := new(vpcclassicv1.InstanceProfileIdentityByName)
				instanceProfileIdentityModel.Name = core.StringPtr("bc1-4x16")

				// Construct an instance of the KeyIdentityByID model
				keyIdentityModel := new(vpcclassicv1.KeyIdentityByID)
				keyIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")

				// Construct an instance of the NetworkInterfacePrototype model
				networkInterfacePrototypeModel := new(vpcclassicv1.NetworkInterfacePrototype)
				networkInterfacePrototypeModel.Name = core.StringPtr("my-network-interface")
				networkInterfacePrototypeModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				networkInterfacePrototypeModel.SecurityGroups = []vpcclassicv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				networkInterfacePrototypeModel.Subnet = subnetIdentityModel

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcclassicv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the VolumeAttachmentPrototypeInstanceByImageContext model
				volumeAttachmentPrototypeInstanceByImageContextModel := new(vpcclassicv1.VolumeAttachmentPrototypeInstanceByImageContext)
				volumeAttachmentPrototypeInstanceByImageContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceByImageContextModel.Volume = volumePrototypeInstanceByImageContextModel

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContext model
				volumeAttachmentPrototypeInstanceContextModel := new(vpcclassicv1.VolumeAttachmentPrototypeInstanceContext)
				volumeAttachmentPrototypeInstanceContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceContextModel.Volume = volumeAttachmentPrototypeInstanceContextVolumeModel

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcclassicv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the InstancePrototypeInstanceByImage model
				instancePrototypeModel := new(vpcclassicv1.InstancePrototypeInstanceByImage)
				instancePrototypeModel.Keys = []vpcclassicv1.KeyIdentityIntf{keyIdentityModel}
				instancePrototypeModel.Name = core.StringPtr("my-instance")
				instancePrototypeModel.NetworkInterfaces = []vpcclassicv1.NetworkInterfacePrototype{*networkInterfacePrototypeModel}
				instancePrototypeModel.Profile = instanceProfileIdentityModel
				instancePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				instancePrototypeModel.UserData = core.StringPtr("testString")
				instancePrototypeModel.VolumeAttachments = []vpcclassicv1.VolumeAttachmentPrototypeInstanceContext{*volumeAttachmentPrototypeInstanceContextModel}
				instancePrototypeModel.VPC = vpcIdentityModel
				instancePrototypeModel.BootVolumeAttachment = volumeAttachmentPrototypeInstanceByImageContextModel
				instancePrototypeModel.Image = imageIdentityModel
				instancePrototypeModel.PrimaryNetworkInterface = networkInterfacePrototypeModel
				instancePrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateInstanceOptions model
				createInstanceOptionsModel := new(vpcclassicv1.CreateInstanceOptions)
				createInstanceOptionsModel.InstancePrototype = instancePrototypeModel
				createInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateInstance(createInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateInstanceOptions model with no property values
				createInstanceOptionsModelNew := new(vpcclassicv1.CreateInstanceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateInstance(createInstanceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteInstance(deleteInstanceOptions *DeleteInstanceOptions)`, func() {
		version := "testString"
		deleteInstancePath := "/instances/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteInstancePath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteInstance successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteInstance(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteInstanceOptions model
				deleteInstanceOptionsModel := new(vpcclassicv1.DeleteInstanceOptions)
				deleteInstanceOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteInstance(deleteInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteInstance with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteInstanceOptions model
				deleteInstanceOptionsModel := new(vpcclassicv1.DeleteInstanceOptions)
				deleteInstanceOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteInstance(deleteInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteInstanceOptions model with no property values
				deleteInstanceOptionsModelNew := new(vpcclassicv1.DeleteInstanceOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteInstance(deleteInstanceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstance(getInstanceOptions *GetInstanceOptions) - Operation response error`, func() {
		version := "testString"
		getInstancePath := "/instances/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getInstancePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInstance with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetInstanceOptions model
				getInstanceOptionsModel := new(vpcclassicv1.GetInstanceOptions)
				getInstanceOptionsModel.ID = core.StringPtr("testString")
				getInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetInstance(getInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetInstance(getInstanceOptions *GetInstanceOptions)`, func() {
		version := "testString"
		getInstancePath := "/instances/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getInstancePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"bandwidth": 1000, "boot_volume_attachment": {"device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "image": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "name": "my-instance", "network_interfaces": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "primary_network_interface": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"crn": "crn:v1:bluemix:public:is:us-south-1:::instance-profile:bc1-4x16", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "status": "failed", "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetInstance successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetInstance(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInstanceOptions model
				getInstanceOptionsModel := new(vpcclassicv1.GetInstanceOptions)
				getInstanceOptionsModel.ID = core.StringPtr("testString")
				getInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetInstance(getInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetInstance with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetInstanceOptions model
				getInstanceOptionsModel := new(vpcclassicv1.GetInstanceOptions)
				getInstanceOptionsModel.ID = core.StringPtr("testString")
				getInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetInstance(getInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInstanceOptions model with no property values
				getInstanceOptionsModelNew := new(vpcclassicv1.GetInstanceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetInstance(getInstanceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateInstance(updateInstanceOptions *UpdateInstanceOptions) - Operation response error`, func() {
		version := "testString"
		updateInstancePath := "/instances/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateInstancePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateInstance with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateInstanceOptions model
				updateInstanceOptionsModel := new(vpcclassicv1.UpdateInstanceOptions)
				updateInstanceOptionsModel.ID = core.StringPtr("testString")
				updateInstanceOptionsModel.Name = core.StringPtr("my-instance")
				updateInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateInstance(updateInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateInstance(updateInstanceOptions *UpdateInstanceOptions)`, func() {
		version := "testString"
		updateInstancePath := "/instances/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateInstancePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"bandwidth": 1000, "boot_volume_attachment": {"device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "image": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "name": "my-instance", "network_interfaces": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "primary_network_interface": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"crn": "crn:v1:bluemix:public:is:us-south-1:::instance-profile:bc1-4x16", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "status": "failed", "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateInstance successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateInstance(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateInstanceOptions model
				updateInstanceOptionsModel := new(vpcclassicv1.UpdateInstanceOptions)
				updateInstanceOptionsModel.ID = core.StringPtr("testString")
				updateInstanceOptionsModel.Name = core.StringPtr("my-instance")
				updateInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateInstance(updateInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateInstance with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateInstanceOptions model
				updateInstanceOptionsModel := new(vpcclassicv1.UpdateInstanceOptions)
				updateInstanceOptionsModel.ID = core.StringPtr("testString")
				updateInstanceOptionsModel.Name = core.StringPtr("my-instance")
				updateInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateInstance(updateInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateInstanceOptions model with no property values
				updateInstanceOptionsModelNew := new(vpcclassicv1.UpdateInstanceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateInstance(updateInstanceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceInitialization(getInstanceInitializationOptions *GetInstanceInitializationOptions) - Operation response error`, func() {
		version := "testString"
		getInstanceInitializationPath := "/instances/testString/initialization"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getInstanceInitializationPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInstanceInitialization with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetInstanceInitializationOptions model
				getInstanceInitializationOptionsModel := new(vpcclassicv1.GetInstanceInitializationOptions)
				getInstanceInitializationOptionsModel.ID = core.StringPtr("testString")
				getInstanceInitializationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetInstanceInitialization(getInstanceInitializationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetInstanceInitialization(getInstanceInitializationOptions *GetInstanceInitializationOptions)`, func() {
		version := "testString"
		getInstanceInitializationPath := "/instances/testString/initialization"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getInstanceInitializationPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"keys": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "name": "my-key"}], "password": {"encrypted_password": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "encryption_key": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "name": "my-key"}}}`)
				}))
			})
			It(`Invoke GetInstanceInitialization successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetInstanceInitialization(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInstanceInitializationOptions model
				getInstanceInitializationOptionsModel := new(vpcclassicv1.GetInstanceInitializationOptions)
				getInstanceInitializationOptionsModel.ID = core.StringPtr("testString")
				getInstanceInitializationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetInstanceInitialization(getInstanceInitializationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetInstanceInitialization with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetInstanceInitializationOptions model
				getInstanceInitializationOptionsModel := new(vpcclassicv1.GetInstanceInitializationOptions)
				getInstanceInitializationOptionsModel.ID = core.StringPtr("testString")
				getInstanceInitializationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetInstanceInitialization(getInstanceInitializationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInstanceInitializationOptions model with no property values
				getInstanceInitializationOptionsModelNew := new(vpcclassicv1.GetInstanceInitializationOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetInstanceInitialization(getInstanceInitializationOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInstanceAction(createInstanceActionOptions *CreateInstanceActionOptions) - Operation response error`, func() {
		version := "testString"
		createInstanceActionPath := "/instances/testString/actions"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createInstanceActionPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateInstanceAction with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the CreateInstanceActionOptions model
				createInstanceActionOptionsModel := new(vpcclassicv1.CreateInstanceActionOptions)
				createInstanceActionOptionsModel.InstanceID = core.StringPtr("testString")
				createInstanceActionOptionsModel.Type = core.StringPtr("reboot")
				createInstanceActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateInstanceAction(createInstanceActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateInstanceAction(createInstanceActionOptions *CreateInstanceActionOptions)`, func() {
		version := "testString"
		createInstanceActionPath := "/instances/testString/actions"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createInstanceActionPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"completed_at": "2019-01-01T12:00:00", "created_at": "2019-01-01T12:00:00", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/actions/109a1b6e-1242-4de1-be44-38705e9474ed", "id": "109a1b6e-1242-4de1-be44-38705e9474ed", "started_at": "2019-01-01T12:00:00", "status": "completed", "type": "reboot"}`)
				}))
			})
			It(`Invoke CreateInstanceAction successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateInstanceAction(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateInstanceActionOptions model
				createInstanceActionOptionsModel := new(vpcclassicv1.CreateInstanceActionOptions)
				createInstanceActionOptionsModel.InstanceID = core.StringPtr("testString")
				createInstanceActionOptionsModel.Type = core.StringPtr("reboot")
				createInstanceActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateInstanceAction(createInstanceActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateInstanceAction with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the CreateInstanceActionOptions model
				createInstanceActionOptionsModel := new(vpcclassicv1.CreateInstanceActionOptions)
				createInstanceActionOptionsModel.InstanceID = core.StringPtr("testString")
				createInstanceActionOptionsModel.Type = core.StringPtr("reboot")
				createInstanceActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateInstanceAction(createInstanceActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateInstanceActionOptions model with no property values
				createInstanceActionOptionsModelNew := new(vpcclassicv1.CreateInstanceActionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateInstanceAction(createInstanceActionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceNetworkInterfaces(listInstanceNetworkInterfacesOptions *ListInstanceNetworkInterfacesOptions) - Operation response error`, func() {
		version := "testString"
		listInstanceNetworkInterfacesPath := "/instances/testString/network_interfaces"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listInstanceNetworkInterfacesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListInstanceNetworkInterfaces with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListInstanceNetworkInterfacesOptions model
				listInstanceNetworkInterfacesOptionsModel := new(vpcclassicv1.ListInstanceNetworkInterfacesOptions)
				listInstanceNetworkInterfacesOptionsModel.InstanceID = core.StringPtr("testString")
				listInstanceNetworkInterfacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListInstanceNetworkInterfaces(listInstanceNetworkInterfacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListInstanceNetworkInterfaces(listInstanceNetworkInterfacesOptions *ListInstanceNetworkInterfacesOptions)`, func() {
		version := "testString"
		listInstanceNetworkInterfacesPath := "/instances/testString/network_interfaces"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listInstanceNetworkInterfacesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"network_interfaces": [{"created_at": "2019-01-01T12:00:00", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}]}`)
				}))
			})
			It(`Invoke ListInstanceNetworkInterfaces successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListInstanceNetworkInterfaces(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListInstanceNetworkInterfacesOptions model
				listInstanceNetworkInterfacesOptionsModel := new(vpcclassicv1.ListInstanceNetworkInterfacesOptions)
				listInstanceNetworkInterfacesOptionsModel.InstanceID = core.StringPtr("testString")
				listInstanceNetworkInterfacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListInstanceNetworkInterfaces(listInstanceNetworkInterfacesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListInstanceNetworkInterfaces with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListInstanceNetworkInterfacesOptions model
				listInstanceNetworkInterfacesOptionsModel := new(vpcclassicv1.ListInstanceNetworkInterfacesOptions)
				listInstanceNetworkInterfacesOptionsModel.InstanceID = core.StringPtr("testString")
				listInstanceNetworkInterfacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListInstanceNetworkInterfaces(listInstanceNetworkInterfacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListInstanceNetworkInterfacesOptions model with no property values
				listInstanceNetworkInterfacesOptionsModelNew := new(vpcclassicv1.ListInstanceNetworkInterfacesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListInstanceNetworkInterfaces(listInstanceNetworkInterfacesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceNetworkInterface(getInstanceNetworkInterfaceOptions *GetInstanceNetworkInterfaceOptions) - Operation response error`, func() {
		version := "testString"
		getInstanceNetworkInterfacePath := "/instances/testString/network_interfaces/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getInstanceNetworkInterfacePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInstanceNetworkInterface with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetInstanceNetworkInterfaceOptions model
				getInstanceNetworkInterfaceOptionsModel := new(vpcclassicv1.GetInstanceNetworkInterfaceOptions)
				getInstanceNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				getInstanceNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				getInstanceNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetInstanceNetworkInterface(getInstanceNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetInstanceNetworkInterface(getInstanceNetworkInterfaceOptions *GetInstanceNetworkInterfaceOptions)`, func() {
		version := "testString"
		getInstanceNetworkInterfacePath := "/instances/testString/network_interfaces/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getInstanceNetworkInterfacePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}`)
				}))
			})
			It(`Invoke GetInstanceNetworkInterface successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetInstanceNetworkInterface(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInstanceNetworkInterfaceOptions model
				getInstanceNetworkInterfaceOptionsModel := new(vpcclassicv1.GetInstanceNetworkInterfaceOptions)
				getInstanceNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				getInstanceNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				getInstanceNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetInstanceNetworkInterface(getInstanceNetworkInterfaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetInstanceNetworkInterface with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetInstanceNetworkInterfaceOptions model
				getInstanceNetworkInterfaceOptionsModel := new(vpcclassicv1.GetInstanceNetworkInterfaceOptions)
				getInstanceNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				getInstanceNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				getInstanceNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetInstanceNetworkInterface(getInstanceNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInstanceNetworkInterfaceOptions model with no property values
				getInstanceNetworkInterfaceOptionsModelNew := new(vpcclassicv1.GetInstanceNetworkInterfaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetInstanceNetworkInterface(getInstanceNetworkInterfaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceNetworkInterfaceFloatingIps(listInstanceNetworkInterfaceFloatingIpsOptions *ListInstanceNetworkInterfaceFloatingIpsOptions) - Operation response error`, func() {
		version := "testString"
		listInstanceNetworkInterfaceFloatingIpsPath := "/instances/testString/network_interfaces/testString/floating_ips"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listInstanceNetworkInterfaceFloatingIpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListInstanceNetworkInterfaceFloatingIps with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListInstanceNetworkInterfaceFloatingIpsOptions model
				listInstanceNetworkInterfaceFloatingIpsOptionsModel := new(vpcclassicv1.ListInstanceNetworkInterfaceFloatingIpsOptions)
				listInstanceNetworkInterfaceFloatingIpsOptionsModel.InstanceID = core.StringPtr("testString")
				listInstanceNetworkInterfaceFloatingIpsOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				listInstanceNetworkInterfaceFloatingIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListInstanceNetworkInterfaceFloatingIps(listInstanceNetworkInterfaceFloatingIpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListInstanceNetworkInterfaceFloatingIps(listInstanceNetworkInterfaceFloatingIpsOptions *ListInstanceNetworkInterfaceFloatingIpsOptions)`, func() {
		version := "testString"
		listInstanceNetworkInterfaceFloatingIpsPath := "/instances/testString/network_interfaces/testString/floating_ips"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listInstanceNetworkInterfaceFloatingIpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"floating_ips": [{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "status": "available", "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}]}`)
				}))
			})
			It(`Invoke ListInstanceNetworkInterfaceFloatingIps successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListInstanceNetworkInterfaceFloatingIps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListInstanceNetworkInterfaceFloatingIpsOptions model
				listInstanceNetworkInterfaceFloatingIpsOptionsModel := new(vpcclassicv1.ListInstanceNetworkInterfaceFloatingIpsOptions)
				listInstanceNetworkInterfaceFloatingIpsOptionsModel.InstanceID = core.StringPtr("testString")
				listInstanceNetworkInterfaceFloatingIpsOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				listInstanceNetworkInterfaceFloatingIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListInstanceNetworkInterfaceFloatingIps(listInstanceNetworkInterfaceFloatingIpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListInstanceNetworkInterfaceFloatingIps with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListInstanceNetworkInterfaceFloatingIpsOptions model
				listInstanceNetworkInterfaceFloatingIpsOptionsModel := new(vpcclassicv1.ListInstanceNetworkInterfaceFloatingIpsOptions)
				listInstanceNetworkInterfaceFloatingIpsOptionsModel.InstanceID = core.StringPtr("testString")
				listInstanceNetworkInterfaceFloatingIpsOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				listInstanceNetworkInterfaceFloatingIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListInstanceNetworkInterfaceFloatingIps(listInstanceNetworkInterfaceFloatingIpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListInstanceNetworkInterfaceFloatingIpsOptions model with no property values
				listInstanceNetworkInterfaceFloatingIpsOptionsModelNew := new(vpcclassicv1.ListInstanceNetworkInterfaceFloatingIpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListInstanceNetworkInterfaceFloatingIps(listInstanceNetworkInterfaceFloatingIpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`RemoveInstanceNetworkInterfaceFloatingIP(removeInstanceNetworkInterfaceFloatingIPOptions *RemoveInstanceNetworkInterfaceFloatingIPOptions)`, func() {
		version := "testString"
		removeInstanceNetworkInterfaceFloatingIPPath := "/instances/testString/network_interfaces/testString/floating_ips/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(removeInstanceNetworkInterfaceFloatingIPPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke RemoveInstanceNetworkInterfaceFloatingIP successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.RemoveInstanceNetworkInterfaceFloatingIP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the RemoveInstanceNetworkInterfaceFloatingIPOptions model
				removeInstanceNetworkInterfaceFloatingIPOptionsModel := new(vpcclassicv1.RemoveInstanceNetworkInterfaceFloatingIPOptions)
				removeInstanceNetworkInterfaceFloatingIPOptionsModel.InstanceID = core.StringPtr("testString")
				removeInstanceNetworkInterfaceFloatingIPOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				removeInstanceNetworkInterfaceFloatingIPOptionsModel.ID = core.StringPtr("testString")
				removeInstanceNetworkInterfaceFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.RemoveInstanceNetworkInterfaceFloatingIP(removeInstanceNetworkInterfaceFloatingIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke RemoveInstanceNetworkInterfaceFloatingIP with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the RemoveInstanceNetworkInterfaceFloatingIPOptions model
				removeInstanceNetworkInterfaceFloatingIPOptionsModel := new(vpcclassicv1.RemoveInstanceNetworkInterfaceFloatingIPOptions)
				removeInstanceNetworkInterfaceFloatingIPOptionsModel.InstanceID = core.StringPtr("testString")
				removeInstanceNetworkInterfaceFloatingIPOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				removeInstanceNetworkInterfaceFloatingIPOptionsModel.ID = core.StringPtr("testString")
				removeInstanceNetworkInterfaceFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.RemoveInstanceNetworkInterfaceFloatingIP(removeInstanceNetworkInterfaceFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the RemoveInstanceNetworkInterfaceFloatingIPOptions model with no property values
				removeInstanceNetworkInterfaceFloatingIPOptionsModelNew := new(vpcclassicv1.RemoveInstanceNetworkInterfaceFloatingIPOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.RemoveInstanceNetworkInterfaceFloatingIP(removeInstanceNetworkInterfaceFloatingIPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceNetworkInterfaceFloatingIP(getInstanceNetworkInterfaceFloatingIPOptions *GetInstanceNetworkInterfaceFloatingIPOptions) - Operation response error`, func() {
		version := "testString"
		getInstanceNetworkInterfaceFloatingIPPath := "/instances/testString/network_interfaces/testString/floating_ips/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getInstanceNetworkInterfaceFloatingIPPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInstanceNetworkInterfaceFloatingIP with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetInstanceNetworkInterfaceFloatingIPOptions model
				getInstanceNetworkInterfaceFloatingIPOptionsModel := new(vpcclassicv1.GetInstanceNetworkInterfaceFloatingIPOptions)
				getInstanceNetworkInterfaceFloatingIPOptionsModel.InstanceID = core.StringPtr("testString")
				getInstanceNetworkInterfaceFloatingIPOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				getInstanceNetworkInterfaceFloatingIPOptionsModel.ID = core.StringPtr("testString")
				getInstanceNetworkInterfaceFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetInstanceNetworkInterfaceFloatingIP(getInstanceNetworkInterfaceFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetInstanceNetworkInterfaceFloatingIP(getInstanceNetworkInterfaceFloatingIPOptions *GetInstanceNetworkInterfaceFloatingIPOptions)`, func() {
		version := "testString"
		getInstanceNetworkInterfaceFloatingIPPath := "/instances/testString/network_interfaces/testString/floating_ips/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getInstanceNetworkInterfaceFloatingIPPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "status": "available", "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetInstanceNetworkInterfaceFloatingIP successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetInstanceNetworkInterfaceFloatingIP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInstanceNetworkInterfaceFloatingIPOptions model
				getInstanceNetworkInterfaceFloatingIPOptionsModel := new(vpcclassicv1.GetInstanceNetworkInterfaceFloatingIPOptions)
				getInstanceNetworkInterfaceFloatingIPOptionsModel.InstanceID = core.StringPtr("testString")
				getInstanceNetworkInterfaceFloatingIPOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				getInstanceNetworkInterfaceFloatingIPOptionsModel.ID = core.StringPtr("testString")
				getInstanceNetworkInterfaceFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetInstanceNetworkInterfaceFloatingIP(getInstanceNetworkInterfaceFloatingIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetInstanceNetworkInterfaceFloatingIP with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetInstanceNetworkInterfaceFloatingIPOptions model
				getInstanceNetworkInterfaceFloatingIPOptionsModel := new(vpcclassicv1.GetInstanceNetworkInterfaceFloatingIPOptions)
				getInstanceNetworkInterfaceFloatingIPOptionsModel.InstanceID = core.StringPtr("testString")
				getInstanceNetworkInterfaceFloatingIPOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				getInstanceNetworkInterfaceFloatingIPOptionsModel.ID = core.StringPtr("testString")
				getInstanceNetworkInterfaceFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetInstanceNetworkInterfaceFloatingIP(getInstanceNetworkInterfaceFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInstanceNetworkInterfaceFloatingIPOptions model with no property values
				getInstanceNetworkInterfaceFloatingIPOptionsModelNew := new(vpcclassicv1.GetInstanceNetworkInterfaceFloatingIPOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetInstanceNetworkInterfaceFloatingIP(getInstanceNetworkInterfaceFloatingIPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`AddInstanceNetworkInterfaceFloatingIP(addInstanceNetworkInterfaceFloatingIPOptions *AddInstanceNetworkInterfaceFloatingIPOptions) - Operation response error`, func() {
		version := "testString"
		addInstanceNetworkInterfaceFloatingIPPath := "/instances/testString/network_interfaces/testString/floating_ips/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(addInstanceNetworkInterfaceFloatingIPPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke AddInstanceNetworkInterfaceFloatingIP with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the AddInstanceNetworkInterfaceFloatingIPOptions model
				addInstanceNetworkInterfaceFloatingIPOptionsModel := new(vpcclassicv1.AddInstanceNetworkInterfaceFloatingIPOptions)
				addInstanceNetworkInterfaceFloatingIPOptionsModel.InstanceID = core.StringPtr("testString")
				addInstanceNetworkInterfaceFloatingIPOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				addInstanceNetworkInterfaceFloatingIPOptionsModel.ID = core.StringPtr("testString")
				addInstanceNetworkInterfaceFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.AddInstanceNetworkInterfaceFloatingIP(addInstanceNetworkInterfaceFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`AddInstanceNetworkInterfaceFloatingIP(addInstanceNetworkInterfaceFloatingIPOptions *AddInstanceNetworkInterfaceFloatingIPOptions)`, func() {
		version := "testString"
		addInstanceNetworkInterfaceFloatingIPPath := "/instances/testString/network_interfaces/testString/floating_ips/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(addInstanceNetworkInterfaceFloatingIPPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "status": "available", "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke AddInstanceNetworkInterfaceFloatingIP successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.AddInstanceNetworkInterfaceFloatingIP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the AddInstanceNetworkInterfaceFloatingIPOptions model
				addInstanceNetworkInterfaceFloatingIPOptionsModel := new(vpcclassicv1.AddInstanceNetworkInterfaceFloatingIPOptions)
				addInstanceNetworkInterfaceFloatingIPOptionsModel.InstanceID = core.StringPtr("testString")
				addInstanceNetworkInterfaceFloatingIPOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				addInstanceNetworkInterfaceFloatingIPOptionsModel.ID = core.StringPtr("testString")
				addInstanceNetworkInterfaceFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.AddInstanceNetworkInterfaceFloatingIP(addInstanceNetworkInterfaceFloatingIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke AddInstanceNetworkInterfaceFloatingIP with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the AddInstanceNetworkInterfaceFloatingIPOptions model
				addInstanceNetworkInterfaceFloatingIPOptionsModel := new(vpcclassicv1.AddInstanceNetworkInterfaceFloatingIPOptions)
				addInstanceNetworkInterfaceFloatingIPOptionsModel.InstanceID = core.StringPtr("testString")
				addInstanceNetworkInterfaceFloatingIPOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				addInstanceNetworkInterfaceFloatingIPOptionsModel.ID = core.StringPtr("testString")
				addInstanceNetworkInterfaceFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.AddInstanceNetworkInterfaceFloatingIP(addInstanceNetworkInterfaceFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the AddInstanceNetworkInterfaceFloatingIPOptions model with no property values
				addInstanceNetworkInterfaceFloatingIPOptionsModelNew := new(vpcclassicv1.AddInstanceNetworkInterfaceFloatingIPOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.AddInstanceNetworkInterfaceFloatingIP(addInstanceNetworkInterfaceFloatingIPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceVolumeAttachments(listInstanceVolumeAttachmentsOptions *ListInstanceVolumeAttachmentsOptions) - Operation response error`, func() {
		version := "testString"
		listInstanceVolumeAttachmentsPath := "/instances/testString/volume_attachments"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listInstanceVolumeAttachmentsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListInstanceVolumeAttachments with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListInstanceVolumeAttachmentsOptions model
				listInstanceVolumeAttachmentsOptionsModel := new(vpcclassicv1.ListInstanceVolumeAttachmentsOptions)
				listInstanceVolumeAttachmentsOptionsModel.InstanceID = core.StringPtr("testString")
				listInstanceVolumeAttachmentsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListInstanceVolumeAttachments(listInstanceVolumeAttachmentsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListInstanceVolumeAttachments(listInstanceVolumeAttachmentsOptions *ListInstanceVolumeAttachmentsOptions)`, func() {
		version := "testString"
		listInstanceVolumeAttachmentsPath := "/instances/testString/volume_attachments"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listInstanceVolumeAttachmentsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"volume_attachments": [{"created_at": "2019-01-01T12:00:00", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "status": "attached", "type": "boot", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}]}`)
				}))
			})
			It(`Invoke ListInstanceVolumeAttachments successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListInstanceVolumeAttachments(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListInstanceVolumeAttachmentsOptions model
				listInstanceVolumeAttachmentsOptionsModel := new(vpcclassicv1.ListInstanceVolumeAttachmentsOptions)
				listInstanceVolumeAttachmentsOptionsModel.InstanceID = core.StringPtr("testString")
				listInstanceVolumeAttachmentsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListInstanceVolumeAttachments(listInstanceVolumeAttachmentsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListInstanceVolumeAttachments with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListInstanceVolumeAttachmentsOptions model
				listInstanceVolumeAttachmentsOptionsModel := new(vpcclassicv1.ListInstanceVolumeAttachmentsOptions)
				listInstanceVolumeAttachmentsOptionsModel.InstanceID = core.StringPtr("testString")
				listInstanceVolumeAttachmentsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListInstanceVolumeAttachments(listInstanceVolumeAttachmentsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListInstanceVolumeAttachmentsOptions model with no property values
				listInstanceVolumeAttachmentsOptionsModelNew := new(vpcclassicv1.ListInstanceVolumeAttachmentsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListInstanceVolumeAttachments(listInstanceVolumeAttachmentsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInstanceVolumeAttachment(createInstanceVolumeAttachmentOptions *CreateInstanceVolumeAttachmentOptions) - Operation response error`, func() {
		version := "testString"
		createInstanceVolumeAttachmentPath := "/instances/testString/volume_attachments"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createInstanceVolumeAttachmentPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateInstanceVolumeAttachment with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the VolumeIdentityByID model
				volumeIdentityModel := new(vpcclassicv1.VolumeIdentityByID)
				volumeIdentityModel.ID = core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")

				// Construct an instance of the CreateInstanceVolumeAttachmentOptions model
				createInstanceVolumeAttachmentOptionsModel := new(vpcclassicv1.CreateInstanceVolumeAttachmentOptions)
				createInstanceVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				createInstanceVolumeAttachmentOptionsModel.Volume = volumeIdentityModel
				createInstanceVolumeAttachmentOptionsModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				createInstanceVolumeAttachmentOptionsModel.Name = core.StringPtr("my-volume-attachment")
				createInstanceVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateInstanceVolumeAttachment(createInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateInstanceVolumeAttachment(createInstanceVolumeAttachmentOptions *CreateInstanceVolumeAttachmentOptions)`, func() {
		version := "testString"
		createInstanceVolumeAttachmentPath := "/instances/testString/volume_attachments"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createInstanceVolumeAttachmentPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "status": "attached", "type": "boot", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}`)
				}))
			})
			It(`Invoke CreateInstanceVolumeAttachment successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateInstanceVolumeAttachment(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VolumeIdentityByID model
				volumeIdentityModel := new(vpcclassicv1.VolumeIdentityByID)
				volumeIdentityModel.ID = core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")

				// Construct an instance of the CreateInstanceVolumeAttachmentOptions model
				createInstanceVolumeAttachmentOptionsModel := new(vpcclassicv1.CreateInstanceVolumeAttachmentOptions)
				createInstanceVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				createInstanceVolumeAttachmentOptionsModel.Volume = volumeIdentityModel
				createInstanceVolumeAttachmentOptionsModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				createInstanceVolumeAttachmentOptionsModel.Name = core.StringPtr("my-volume-attachment")
				createInstanceVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateInstanceVolumeAttachment(createInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateInstanceVolumeAttachment with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the VolumeIdentityByID model
				volumeIdentityModel := new(vpcclassicv1.VolumeIdentityByID)
				volumeIdentityModel.ID = core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")

				// Construct an instance of the CreateInstanceVolumeAttachmentOptions model
				createInstanceVolumeAttachmentOptionsModel := new(vpcclassicv1.CreateInstanceVolumeAttachmentOptions)
				createInstanceVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				createInstanceVolumeAttachmentOptionsModel.Volume = volumeIdentityModel
				createInstanceVolumeAttachmentOptionsModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				createInstanceVolumeAttachmentOptionsModel.Name = core.StringPtr("my-volume-attachment")
				createInstanceVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateInstanceVolumeAttachment(createInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateInstanceVolumeAttachmentOptions model with no property values
				createInstanceVolumeAttachmentOptionsModelNew := new(vpcclassicv1.CreateInstanceVolumeAttachmentOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateInstanceVolumeAttachment(createInstanceVolumeAttachmentOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteInstanceVolumeAttachment(deleteInstanceVolumeAttachmentOptions *DeleteInstanceVolumeAttachmentOptions)`, func() {
		version := "testString"
		deleteInstanceVolumeAttachmentPath := "/instances/testString/volume_attachments/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteInstanceVolumeAttachmentPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteInstanceVolumeAttachment successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteInstanceVolumeAttachment(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteInstanceVolumeAttachmentOptions model
				deleteInstanceVolumeAttachmentOptionsModel := new(vpcclassicv1.DeleteInstanceVolumeAttachmentOptions)
				deleteInstanceVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				deleteInstanceVolumeAttachmentOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteInstanceVolumeAttachment(deleteInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteInstanceVolumeAttachment with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteInstanceVolumeAttachmentOptions model
				deleteInstanceVolumeAttachmentOptionsModel := new(vpcclassicv1.DeleteInstanceVolumeAttachmentOptions)
				deleteInstanceVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				deleteInstanceVolumeAttachmentOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteInstanceVolumeAttachment(deleteInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteInstanceVolumeAttachmentOptions model with no property values
				deleteInstanceVolumeAttachmentOptionsModelNew := new(vpcclassicv1.DeleteInstanceVolumeAttachmentOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteInstanceVolumeAttachment(deleteInstanceVolumeAttachmentOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceVolumeAttachment(getInstanceVolumeAttachmentOptions *GetInstanceVolumeAttachmentOptions) - Operation response error`, func() {
		version := "testString"
		getInstanceVolumeAttachmentPath := "/instances/testString/volume_attachments/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getInstanceVolumeAttachmentPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInstanceVolumeAttachment with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetInstanceVolumeAttachmentOptions model
				getInstanceVolumeAttachmentOptionsModel := new(vpcclassicv1.GetInstanceVolumeAttachmentOptions)
				getInstanceVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				getInstanceVolumeAttachmentOptionsModel.ID = core.StringPtr("testString")
				getInstanceVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetInstanceVolumeAttachment(getInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetInstanceVolumeAttachment(getInstanceVolumeAttachmentOptions *GetInstanceVolumeAttachmentOptions)`, func() {
		version := "testString"
		getInstanceVolumeAttachmentPath := "/instances/testString/volume_attachments/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getInstanceVolumeAttachmentPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "status": "attached", "type": "boot", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}`)
				}))
			})
			It(`Invoke GetInstanceVolumeAttachment successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetInstanceVolumeAttachment(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInstanceVolumeAttachmentOptions model
				getInstanceVolumeAttachmentOptionsModel := new(vpcclassicv1.GetInstanceVolumeAttachmentOptions)
				getInstanceVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				getInstanceVolumeAttachmentOptionsModel.ID = core.StringPtr("testString")
				getInstanceVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetInstanceVolumeAttachment(getInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetInstanceVolumeAttachment with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetInstanceVolumeAttachmentOptions model
				getInstanceVolumeAttachmentOptionsModel := new(vpcclassicv1.GetInstanceVolumeAttachmentOptions)
				getInstanceVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				getInstanceVolumeAttachmentOptionsModel.ID = core.StringPtr("testString")
				getInstanceVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetInstanceVolumeAttachment(getInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInstanceVolumeAttachmentOptions model with no property values
				getInstanceVolumeAttachmentOptionsModelNew := new(vpcclassicv1.GetInstanceVolumeAttachmentOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetInstanceVolumeAttachment(getInstanceVolumeAttachmentOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateInstanceVolumeAttachment(updateInstanceVolumeAttachmentOptions *UpdateInstanceVolumeAttachmentOptions) - Operation response error`, func() {
		version := "testString"
		updateInstanceVolumeAttachmentPath := "/instances/testString/volume_attachments/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateInstanceVolumeAttachmentPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateInstanceVolumeAttachment with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateInstanceVolumeAttachmentOptions model
				updateInstanceVolumeAttachmentOptionsModel := new(vpcclassicv1.UpdateInstanceVolumeAttachmentOptions)
				updateInstanceVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				updateInstanceVolumeAttachmentOptionsModel.ID = core.StringPtr("testString")
				updateInstanceVolumeAttachmentOptionsModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				updateInstanceVolumeAttachmentOptionsModel.Name = core.StringPtr("my-volume-attachment")
				updateInstanceVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateInstanceVolumeAttachment(updateInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateInstanceVolumeAttachment(updateInstanceVolumeAttachmentOptions *UpdateInstanceVolumeAttachmentOptions)`, func() {
		version := "testString"
		updateInstanceVolumeAttachmentPath := "/instances/testString/volume_attachments/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateInstanceVolumeAttachmentPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "status": "attached", "type": "boot", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}`)
				}))
			})
			It(`Invoke UpdateInstanceVolumeAttachment successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateInstanceVolumeAttachment(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateInstanceVolumeAttachmentOptions model
				updateInstanceVolumeAttachmentOptionsModel := new(vpcclassicv1.UpdateInstanceVolumeAttachmentOptions)
				updateInstanceVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				updateInstanceVolumeAttachmentOptionsModel.ID = core.StringPtr("testString")
				updateInstanceVolumeAttachmentOptionsModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				updateInstanceVolumeAttachmentOptionsModel.Name = core.StringPtr("my-volume-attachment")
				updateInstanceVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateInstanceVolumeAttachment(updateInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateInstanceVolumeAttachment with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateInstanceVolumeAttachmentOptions model
				updateInstanceVolumeAttachmentOptionsModel := new(vpcclassicv1.UpdateInstanceVolumeAttachmentOptions)
				updateInstanceVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				updateInstanceVolumeAttachmentOptionsModel.ID = core.StringPtr("testString")
				updateInstanceVolumeAttachmentOptionsModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				updateInstanceVolumeAttachmentOptionsModel.Name = core.StringPtr("my-volume-attachment")
				updateInstanceVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateInstanceVolumeAttachment(updateInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateInstanceVolumeAttachmentOptions model with no property values
				updateInstanceVolumeAttachmentOptionsModelNew := new(vpcclassicv1.UpdateInstanceVolumeAttachmentOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateInstanceVolumeAttachment(updateInstanceVolumeAttachmentOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			Expect(testService).ToNot(BeNil())
			Expect(testServiceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				URL:     "{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				URL:     "https://vpcclassicv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_URL":       "https://vpcclassicv1/api",
				"VPC_CLASSIC_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					URL:     "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					Version: core.StringPtr(version),
				})
				err := testService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_URL":       "https://vpcclassicv1/api",
				"VPC_CLASSIC_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
				URL:     "{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`ListLoadBalancers(listLoadBalancersOptions *ListLoadBalancersOptions) - Operation response error`, func() {
		version := "testString"
		listLoadBalancersPath := "/load_balancers"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listLoadBalancersPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListLoadBalancers with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancersOptions model
				listLoadBalancersOptionsModel := new(vpcclassicv1.ListLoadBalancersOptions)
				listLoadBalancersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListLoadBalancers(listLoadBalancersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListLoadBalancers(listLoadBalancersOptions *ListLoadBalancersOptions)`, func() {
		version := "testString"
		listLoadBalancersPath := "/load_balancers"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listLoadBalancersPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"load_balancers": [{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "hostname": "myloadbalancer-123456-us-south-1.lb.bluemix.net", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "is_public": true, "listeners": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer", "operating_status": "offline", "pools": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}]}`)
				}))
			})
			It(`Invoke ListLoadBalancers successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListLoadBalancers(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListLoadBalancersOptions model
				listLoadBalancersOptionsModel := new(vpcclassicv1.ListLoadBalancersOptions)
				listLoadBalancersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListLoadBalancers(listLoadBalancersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListLoadBalancers with error: Operation request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancersOptions model
				listLoadBalancersOptionsModel := new(vpcclassicv1.ListLoadBalancersOptions)
				listLoadBalancersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListLoadBalancers(listLoadBalancersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateLoadBalancer(createLoadBalancerOptions *CreateLoadBalancerOptions) - Operation response error`, func() {
		version := "testString"
		createLoadBalancerPath := "/load_balancers"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createLoadBalancerPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateLoadBalancer with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeIP model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberTargetPrototypeIP)
				loadBalancerPoolMemberTargetPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the LoadBalancerPoolHealthMonitorPrototype model
				loadBalancerPoolHealthMonitorPrototypeModel := new(vpcclassicv1.LoadBalancerPoolHealthMonitorPrototype)
				loadBalancerPoolHealthMonitorPrototypeModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPrototypeModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Type = core.StringPtr("http")
				loadBalancerPoolHealthMonitorPrototypeModel.URLPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolIdentityByName model
				loadBalancerPoolIdentityByNameModel := new(vpcclassicv1.LoadBalancerPoolIdentityByName)
				loadBalancerPoolIdentityByNameModel.Name = core.StringPtr("my-load-balancer-pool")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))

				// Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
				loadBalancerPoolSessionPersistencePrototypeModel := new(vpcclassicv1.LoadBalancerPoolSessionPersistencePrototype)
				loadBalancerPoolSessionPersistencePrototypeModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the LoadBalancerListenerPrototypeLoadBalancerContext model
				loadBalancerListenerPrototypeLoadBalancerContextModel := new(vpcclassicv1.LoadBalancerListenerPrototypeLoadBalancerContext)
				loadBalancerListenerPrototypeLoadBalancerContextModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				loadBalancerListenerPrototypeLoadBalancerContextModel.DefaultPool = loadBalancerPoolIdentityByNameModel
				loadBalancerListenerPrototypeLoadBalancerContextModel.Port = core.Int64Ptr(int64(443))
				loadBalancerListenerPrototypeLoadBalancerContextModel.Protocol = core.StringPtr("http")

				// Construct an instance of the LoadBalancerPoolPrototype model
				loadBalancerPoolPrototypeModel := new(vpcclassicv1.LoadBalancerPoolPrototype)
				loadBalancerPoolPrototypeModel.Algorithm = core.StringPtr("least_connections")
				loadBalancerPoolPrototypeModel.HealthMonitor = loadBalancerPoolHealthMonitorPrototypeModel
				loadBalancerPoolPrototypeModel.Members = []vpcclassicv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				loadBalancerPoolPrototypeModel.Name = core.StringPtr("my-load-balancer-pool")
				loadBalancerPoolPrototypeModel.Protocol = core.StringPtr("http")
				loadBalancerPoolPrototypeModel.SessionPersistence = loadBalancerPoolSessionPersistencePrototypeModel

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcclassicv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the CreateLoadBalancerOptions model
				createLoadBalancerOptionsModel := new(vpcclassicv1.CreateLoadBalancerOptions)
				createLoadBalancerOptionsModel.IsPublic = core.BoolPtr(true)
				createLoadBalancerOptionsModel.Subnets = []vpcclassicv1.SubnetIdentityIntf{subnetIdentityModel}
				createLoadBalancerOptionsModel.Listeners = []vpcclassicv1.LoadBalancerListenerPrototypeLoadBalancerContext{*loadBalancerListenerPrototypeLoadBalancerContextModel}
				createLoadBalancerOptionsModel.Name = core.StringPtr("my-load-balancer")
				createLoadBalancerOptionsModel.Pools = []vpcclassicv1.LoadBalancerPoolPrototype{*loadBalancerPoolPrototypeModel}
				createLoadBalancerOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateLoadBalancer(createLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateLoadBalancer(createLoadBalancerOptions *CreateLoadBalancerOptions)`, func() {
		version := "testString"
		createLoadBalancerPath := "/load_balancers"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createLoadBalancerPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "hostname": "myloadbalancer-123456-us-south-1.lb.bluemix.net", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "is_public": true, "listeners": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer", "operating_status": "offline", "pools": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke CreateLoadBalancer successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateLoadBalancer(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeIP model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberTargetPrototypeIP)
				loadBalancerPoolMemberTargetPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the LoadBalancerPoolHealthMonitorPrototype model
				loadBalancerPoolHealthMonitorPrototypeModel := new(vpcclassicv1.LoadBalancerPoolHealthMonitorPrototype)
				loadBalancerPoolHealthMonitorPrototypeModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPrototypeModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Type = core.StringPtr("http")
				loadBalancerPoolHealthMonitorPrototypeModel.URLPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolIdentityByName model
				loadBalancerPoolIdentityByNameModel := new(vpcclassicv1.LoadBalancerPoolIdentityByName)
				loadBalancerPoolIdentityByNameModel.Name = core.StringPtr("my-load-balancer-pool")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))

				// Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
				loadBalancerPoolSessionPersistencePrototypeModel := new(vpcclassicv1.LoadBalancerPoolSessionPersistencePrototype)
				loadBalancerPoolSessionPersistencePrototypeModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the LoadBalancerListenerPrototypeLoadBalancerContext model
				loadBalancerListenerPrototypeLoadBalancerContextModel := new(vpcclassicv1.LoadBalancerListenerPrototypeLoadBalancerContext)
				loadBalancerListenerPrototypeLoadBalancerContextModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				loadBalancerListenerPrototypeLoadBalancerContextModel.DefaultPool = loadBalancerPoolIdentityByNameModel
				loadBalancerListenerPrototypeLoadBalancerContextModel.Port = core.Int64Ptr(int64(443))
				loadBalancerListenerPrototypeLoadBalancerContextModel.Protocol = core.StringPtr("http")

				// Construct an instance of the LoadBalancerPoolPrototype model
				loadBalancerPoolPrototypeModel := new(vpcclassicv1.LoadBalancerPoolPrototype)
				loadBalancerPoolPrototypeModel.Algorithm = core.StringPtr("least_connections")
				loadBalancerPoolPrototypeModel.HealthMonitor = loadBalancerPoolHealthMonitorPrototypeModel
				loadBalancerPoolPrototypeModel.Members = []vpcclassicv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				loadBalancerPoolPrototypeModel.Name = core.StringPtr("my-load-balancer-pool")
				loadBalancerPoolPrototypeModel.Protocol = core.StringPtr("http")
				loadBalancerPoolPrototypeModel.SessionPersistence = loadBalancerPoolSessionPersistencePrototypeModel

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcclassicv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the CreateLoadBalancerOptions model
				createLoadBalancerOptionsModel := new(vpcclassicv1.CreateLoadBalancerOptions)
				createLoadBalancerOptionsModel.IsPublic = core.BoolPtr(true)
				createLoadBalancerOptionsModel.Subnets = []vpcclassicv1.SubnetIdentityIntf{subnetIdentityModel}
				createLoadBalancerOptionsModel.Listeners = []vpcclassicv1.LoadBalancerListenerPrototypeLoadBalancerContext{*loadBalancerListenerPrototypeLoadBalancerContextModel}
				createLoadBalancerOptionsModel.Name = core.StringPtr("my-load-balancer")
				createLoadBalancerOptionsModel.Pools = []vpcclassicv1.LoadBalancerPoolPrototype{*loadBalancerPoolPrototypeModel}
				createLoadBalancerOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateLoadBalancer(createLoadBalancerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateLoadBalancer with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeIP model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberTargetPrototypeIP)
				loadBalancerPoolMemberTargetPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the LoadBalancerPoolHealthMonitorPrototype model
				loadBalancerPoolHealthMonitorPrototypeModel := new(vpcclassicv1.LoadBalancerPoolHealthMonitorPrototype)
				loadBalancerPoolHealthMonitorPrototypeModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPrototypeModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Type = core.StringPtr("http")
				loadBalancerPoolHealthMonitorPrototypeModel.URLPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolIdentityByName model
				loadBalancerPoolIdentityByNameModel := new(vpcclassicv1.LoadBalancerPoolIdentityByName)
				loadBalancerPoolIdentityByNameModel.Name = core.StringPtr("my-load-balancer-pool")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))

				// Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
				loadBalancerPoolSessionPersistencePrototypeModel := new(vpcclassicv1.LoadBalancerPoolSessionPersistencePrototype)
				loadBalancerPoolSessionPersistencePrototypeModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the LoadBalancerListenerPrototypeLoadBalancerContext model
				loadBalancerListenerPrototypeLoadBalancerContextModel := new(vpcclassicv1.LoadBalancerListenerPrototypeLoadBalancerContext)
				loadBalancerListenerPrototypeLoadBalancerContextModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				loadBalancerListenerPrototypeLoadBalancerContextModel.DefaultPool = loadBalancerPoolIdentityByNameModel
				loadBalancerListenerPrototypeLoadBalancerContextModel.Port = core.Int64Ptr(int64(443))
				loadBalancerListenerPrototypeLoadBalancerContextModel.Protocol = core.StringPtr("http")

				// Construct an instance of the LoadBalancerPoolPrototype model
				loadBalancerPoolPrototypeModel := new(vpcclassicv1.LoadBalancerPoolPrototype)
				loadBalancerPoolPrototypeModel.Algorithm = core.StringPtr("least_connections")
				loadBalancerPoolPrototypeModel.HealthMonitor = loadBalancerPoolHealthMonitorPrototypeModel
				loadBalancerPoolPrototypeModel.Members = []vpcclassicv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				loadBalancerPoolPrototypeModel.Name = core.StringPtr("my-load-balancer-pool")
				loadBalancerPoolPrototypeModel.Protocol = core.StringPtr("http")
				loadBalancerPoolPrototypeModel.SessionPersistence = loadBalancerPoolSessionPersistencePrototypeModel

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcclassicv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the CreateLoadBalancerOptions model
				createLoadBalancerOptionsModel := new(vpcclassicv1.CreateLoadBalancerOptions)
				createLoadBalancerOptionsModel.IsPublic = core.BoolPtr(true)
				createLoadBalancerOptionsModel.Subnets = []vpcclassicv1.SubnetIdentityIntf{subnetIdentityModel}
				createLoadBalancerOptionsModel.Listeners = []vpcclassicv1.LoadBalancerListenerPrototypeLoadBalancerContext{*loadBalancerListenerPrototypeLoadBalancerContextModel}
				createLoadBalancerOptionsModel.Name = core.StringPtr("my-load-balancer")
				createLoadBalancerOptionsModel.Pools = []vpcclassicv1.LoadBalancerPoolPrototype{*loadBalancerPoolPrototypeModel}
				createLoadBalancerOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateLoadBalancer(createLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateLoadBalancerOptions model with no property values
				createLoadBalancerOptionsModelNew := new(vpcclassicv1.CreateLoadBalancerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateLoadBalancer(createLoadBalancerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteLoadBalancer(deleteLoadBalancerOptions *DeleteLoadBalancerOptions)`, func() {
		version := "testString"
		deleteLoadBalancerPath := "/load_balancers/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteLoadBalancerPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteLoadBalancer successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteLoadBalancer(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteLoadBalancerOptions model
				deleteLoadBalancerOptionsModel := new(vpcclassicv1.DeleteLoadBalancerOptions)
				deleteLoadBalancerOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteLoadBalancer(deleteLoadBalancerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteLoadBalancer with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteLoadBalancerOptions model
				deleteLoadBalancerOptionsModel := new(vpcclassicv1.DeleteLoadBalancerOptions)
				deleteLoadBalancerOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteLoadBalancer(deleteLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteLoadBalancerOptions model with no property values
				deleteLoadBalancerOptionsModelNew := new(vpcclassicv1.DeleteLoadBalancerOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteLoadBalancer(deleteLoadBalancerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancer(getLoadBalancerOptions *GetLoadBalancerOptions) - Operation response error`, func() {
		version := "testString"
		getLoadBalancerPath := "/load_balancers/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getLoadBalancerPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetLoadBalancer with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerOptions model
				getLoadBalancerOptionsModel := new(vpcclassicv1.GetLoadBalancerOptions)
				getLoadBalancerOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetLoadBalancer(getLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetLoadBalancer(getLoadBalancerOptions *GetLoadBalancerOptions)`, func() {
		version := "testString"
		getLoadBalancerPath := "/load_balancers/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getLoadBalancerPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "hostname": "myloadbalancer-123456-us-south-1.lb.bluemix.net", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "is_public": true, "listeners": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer", "operating_status": "offline", "pools": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke GetLoadBalancer successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetLoadBalancer(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetLoadBalancerOptions model
				getLoadBalancerOptionsModel := new(vpcclassicv1.GetLoadBalancerOptions)
				getLoadBalancerOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetLoadBalancer(getLoadBalancerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetLoadBalancer with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerOptions model
				getLoadBalancerOptionsModel := new(vpcclassicv1.GetLoadBalancerOptions)
				getLoadBalancerOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetLoadBalancer(getLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetLoadBalancerOptions model with no property values
				getLoadBalancerOptionsModelNew := new(vpcclassicv1.GetLoadBalancerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetLoadBalancer(getLoadBalancerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateLoadBalancer(updateLoadBalancerOptions *UpdateLoadBalancerOptions) - Operation response error`, func() {
		version := "testString"
		updateLoadBalancerPath := "/load_balancers/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateLoadBalancerPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateLoadBalancer with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateLoadBalancerOptions model
				updateLoadBalancerOptionsModel := new(vpcclassicv1.UpdateLoadBalancerOptions)
				updateLoadBalancerOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerOptionsModel.Name = core.StringPtr("my-load-balancer")
				updateLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateLoadBalancer(updateLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateLoadBalancer(updateLoadBalancerOptions *UpdateLoadBalancerOptions)`, func() {
		version := "testString"
		updateLoadBalancerPath := "/load_balancers/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateLoadBalancerPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "hostname": "myloadbalancer-123456-us-south-1.lb.bluemix.net", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "is_public": true, "listeners": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer", "operating_status": "offline", "pools": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke UpdateLoadBalancer successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateLoadBalancer(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerOptions model
				updateLoadBalancerOptionsModel := new(vpcclassicv1.UpdateLoadBalancerOptions)
				updateLoadBalancerOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerOptionsModel.Name = core.StringPtr("my-load-balancer")
				updateLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateLoadBalancer(updateLoadBalancerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateLoadBalancer with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateLoadBalancerOptions model
				updateLoadBalancerOptionsModel := new(vpcclassicv1.UpdateLoadBalancerOptions)
				updateLoadBalancerOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerOptionsModel.Name = core.StringPtr("my-load-balancer")
				updateLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateLoadBalancer(updateLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateLoadBalancerOptions model with no property values
				updateLoadBalancerOptionsModelNew := new(vpcclassicv1.UpdateLoadBalancerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateLoadBalancer(updateLoadBalancerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancerStatistics(getLoadBalancerStatisticsOptions *GetLoadBalancerStatisticsOptions) - Operation response error`, func() {
		version := "testString"
		getLoadBalancerStatisticsPath := "/load_balancers/testString/statistics"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getLoadBalancerStatisticsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetLoadBalancerStatistics with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerStatisticsOptions model
				getLoadBalancerStatisticsOptionsModel := new(vpcclassicv1.GetLoadBalancerStatisticsOptions)
				getLoadBalancerStatisticsOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerStatisticsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetLoadBalancerStatistics(getLoadBalancerStatisticsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetLoadBalancerStatistics(getLoadBalancerStatisticsOptions *GetLoadBalancerStatisticsOptions)`, func() {
		version := "testString"
		getLoadBalancerStatisticsPath := "/load_balancers/testString/statistics"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getLoadBalancerStatisticsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"active_connections": 797, "connection_rate": 91.121, "data_processed_this_month": 10093173145, "throughput": 167.278}`)
				}))
			})
			It(`Invoke GetLoadBalancerStatistics successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetLoadBalancerStatistics(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetLoadBalancerStatisticsOptions model
				getLoadBalancerStatisticsOptionsModel := new(vpcclassicv1.GetLoadBalancerStatisticsOptions)
				getLoadBalancerStatisticsOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerStatisticsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetLoadBalancerStatistics(getLoadBalancerStatisticsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetLoadBalancerStatistics with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerStatisticsOptions model
				getLoadBalancerStatisticsOptionsModel := new(vpcclassicv1.GetLoadBalancerStatisticsOptions)
				getLoadBalancerStatisticsOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerStatisticsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetLoadBalancerStatistics(getLoadBalancerStatisticsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetLoadBalancerStatisticsOptions model with no property values
				getLoadBalancerStatisticsOptionsModelNew := new(vpcclassicv1.GetLoadBalancerStatisticsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetLoadBalancerStatistics(getLoadBalancerStatisticsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLoadBalancerListeners(listLoadBalancerListenersOptions *ListLoadBalancerListenersOptions) - Operation response error`, func() {
		version := "testString"
		listLoadBalancerListenersPath := "/load_balancers/testString/listeners"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listLoadBalancerListenersPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListLoadBalancerListeners with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerListenersOptions model
				listLoadBalancerListenersOptionsModel := new(vpcclassicv1.ListLoadBalancerListenersOptions)
				listLoadBalancerListenersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListLoadBalancerListeners(listLoadBalancerListenersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListLoadBalancerListeners(listLoadBalancerListenersOptions *ListLoadBalancerListenersOptions)`, func() {
		version := "testString"
		listLoadBalancerListenersPath := "/load_balancers/testString/listeners"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listLoadBalancerListenersPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"listeners": [{"certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "connection_limit": 2000, "created_at": "2019-01-01T12:00:00", "default_pool": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "policies": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "port": 443, "protocol": "http", "provisioning_status": "active"}]}`)
				}))
			})
			It(`Invoke ListLoadBalancerListeners successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListLoadBalancerListeners(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListLoadBalancerListenersOptions model
				listLoadBalancerListenersOptionsModel := new(vpcclassicv1.ListLoadBalancerListenersOptions)
				listLoadBalancerListenersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListLoadBalancerListeners(listLoadBalancerListenersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListLoadBalancerListeners with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerListenersOptions model
				listLoadBalancerListenersOptionsModel := new(vpcclassicv1.ListLoadBalancerListenersOptions)
				listLoadBalancerListenersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListLoadBalancerListeners(listLoadBalancerListenersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListLoadBalancerListenersOptions model with no property values
				listLoadBalancerListenersOptionsModelNew := new(vpcclassicv1.ListLoadBalancerListenersOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListLoadBalancerListeners(listLoadBalancerListenersOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateLoadBalancerListener(createLoadBalancerListenerOptions *CreateLoadBalancerListenerOptions) - Operation response error`, func() {
		version := "testString"
		createLoadBalancerListenerPath := "/load_balancers/testString/listeners"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createLoadBalancerListenerPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateLoadBalancerListener with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyPrototypeTargetModel := new(vpcclassicv1.LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyPrototypeTargetModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
				loadBalancerListenerPolicyRulePrototypeModel := new(vpcclassicv1.LoadBalancerListenerPolicyRulePrototype)
				loadBalancerListenerPolicyRulePrototypeModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePrototypeModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePrototypeModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePrototypeModel.Value = core.StringPtr("testString")

				// Construct an instance of the CertificateInstanceIdentityByCRN model
				certificateInstanceIdentityModel := new(vpcclassicv1.CertificateInstanceIdentityByCRN)
				certificateInstanceIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")

				// Construct an instance of the LoadBalancerListenerPolicyPrototype model
				loadBalancerListenerPolicyPrototypeModel := new(vpcclassicv1.LoadBalancerListenerPolicyPrototype)
				loadBalancerListenerPolicyPrototypeModel.Action = core.StringPtr("forward")
				loadBalancerListenerPolicyPrototypeModel.Name = core.StringPtr("my-policy")
				loadBalancerListenerPolicyPrototypeModel.Priority = core.Int64Ptr(int64(5))
				loadBalancerListenerPolicyPrototypeModel.Rules = []vpcclassicv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}
				loadBalancerListenerPolicyPrototypeModel.Target = loadBalancerListenerPolicyPrototypeTargetModel

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcclassicv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the CreateLoadBalancerListenerOptions model
				createLoadBalancerListenerOptionsModel := new(vpcclassicv1.CreateLoadBalancerListenerOptions)
				createLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerOptionsModel.Port = core.Int64Ptr(int64(443))
				createLoadBalancerListenerOptionsModel.Protocol = core.StringPtr("http")
				createLoadBalancerListenerOptionsModel.CertificateInstance = certificateInstanceIdentityModel
				createLoadBalancerListenerOptionsModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				createLoadBalancerListenerOptionsModel.DefaultPool = loadBalancerPoolIdentityModel
				createLoadBalancerListenerOptionsModel.Policies = []vpcclassicv1.LoadBalancerListenerPolicyPrototype{*loadBalancerListenerPolicyPrototypeModel}
				createLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateLoadBalancerListener(createLoadBalancerListenerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateLoadBalancerListener(createLoadBalancerListenerOptions *CreateLoadBalancerListenerOptions)`, func() {
		version := "testString"
		createLoadBalancerListenerPath := "/load_balancers/testString/listeners"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createLoadBalancerListenerPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "connection_limit": 2000, "created_at": "2019-01-01T12:00:00", "default_pool": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "policies": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "port": 443, "protocol": "http", "provisioning_status": "active"}`)
				}))
			})
			It(`Invoke CreateLoadBalancerListener successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateLoadBalancerListener(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyPrototypeTargetModel := new(vpcclassicv1.LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyPrototypeTargetModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
				loadBalancerListenerPolicyRulePrototypeModel := new(vpcclassicv1.LoadBalancerListenerPolicyRulePrototype)
				loadBalancerListenerPolicyRulePrototypeModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePrototypeModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePrototypeModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePrototypeModel.Value = core.StringPtr("testString")

				// Construct an instance of the CertificateInstanceIdentityByCRN model
				certificateInstanceIdentityModel := new(vpcclassicv1.CertificateInstanceIdentityByCRN)
				certificateInstanceIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")

				// Construct an instance of the LoadBalancerListenerPolicyPrototype model
				loadBalancerListenerPolicyPrototypeModel := new(vpcclassicv1.LoadBalancerListenerPolicyPrototype)
				loadBalancerListenerPolicyPrototypeModel.Action = core.StringPtr("forward")
				loadBalancerListenerPolicyPrototypeModel.Name = core.StringPtr("my-policy")
				loadBalancerListenerPolicyPrototypeModel.Priority = core.Int64Ptr(int64(5))
				loadBalancerListenerPolicyPrototypeModel.Rules = []vpcclassicv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}
				loadBalancerListenerPolicyPrototypeModel.Target = loadBalancerListenerPolicyPrototypeTargetModel

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcclassicv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the CreateLoadBalancerListenerOptions model
				createLoadBalancerListenerOptionsModel := new(vpcclassicv1.CreateLoadBalancerListenerOptions)
				createLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerOptionsModel.Port = core.Int64Ptr(int64(443))
				createLoadBalancerListenerOptionsModel.Protocol = core.StringPtr("http")
				createLoadBalancerListenerOptionsModel.CertificateInstance = certificateInstanceIdentityModel
				createLoadBalancerListenerOptionsModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				createLoadBalancerListenerOptionsModel.DefaultPool = loadBalancerPoolIdentityModel
				createLoadBalancerListenerOptionsModel.Policies = []vpcclassicv1.LoadBalancerListenerPolicyPrototype{*loadBalancerListenerPolicyPrototypeModel}
				createLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateLoadBalancerListener(createLoadBalancerListenerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateLoadBalancerListener with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyPrototypeTargetModel := new(vpcclassicv1.LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyPrototypeTargetModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
				loadBalancerListenerPolicyRulePrototypeModel := new(vpcclassicv1.LoadBalancerListenerPolicyRulePrototype)
				loadBalancerListenerPolicyRulePrototypeModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePrototypeModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePrototypeModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePrototypeModel.Value = core.StringPtr("testString")

				// Construct an instance of the CertificateInstanceIdentityByCRN model
				certificateInstanceIdentityModel := new(vpcclassicv1.CertificateInstanceIdentityByCRN)
				certificateInstanceIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")

				// Construct an instance of the LoadBalancerListenerPolicyPrototype model
				loadBalancerListenerPolicyPrototypeModel := new(vpcclassicv1.LoadBalancerListenerPolicyPrototype)
				loadBalancerListenerPolicyPrototypeModel.Action = core.StringPtr("forward")
				loadBalancerListenerPolicyPrototypeModel.Name = core.StringPtr("my-policy")
				loadBalancerListenerPolicyPrototypeModel.Priority = core.Int64Ptr(int64(5))
				loadBalancerListenerPolicyPrototypeModel.Rules = []vpcclassicv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}
				loadBalancerListenerPolicyPrototypeModel.Target = loadBalancerListenerPolicyPrototypeTargetModel

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcclassicv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the CreateLoadBalancerListenerOptions model
				createLoadBalancerListenerOptionsModel := new(vpcclassicv1.CreateLoadBalancerListenerOptions)
				createLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerOptionsModel.Port = core.Int64Ptr(int64(443))
				createLoadBalancerListenerOptionsModel.Protocol = core.StringPtr("http")
				createLoadBalancerListenerOptionsModel.CertificateInstance = certificateInstanceIdentityModel
				createLoadBalancerListenerOptionsModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				createLoadBalancerListenerOptionsModel.DefaultPool = loadBalancerPoolIdentityModel
				createLoadBalancerListenerOptionsModel.Policies = []vpcclassicv1.LoadBalancerListenerPolicyPrototype{*loadBalancerListenerPolicyPrototypeModel}
				createLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateLoadBalancerListener(createLoadBalancerListenerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateLoadBalancerListenerOptions model with no property values
				createLoadBalancerListenerOptionsModelNew := new(vpcclassicv1.CreateLoadBalancerListenerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateLoadBalancerListener(createLoadBalancerListenerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteLoadBalancerListener(deleteLoadBalancerListenerOptions *DeleteLoadBalancerListenerOptions)`, func() {
		version := "testString"
		deleteLoadBalancerListenerPath := "/load_balancers/testString/listeners/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteLoadBalancerListenerPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteLoadBalancerListener successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteLoadBalancerListener(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteLoadBalancerListenerOptions model
				deleteLoadBalancerListenerOptionsModel := new(vpcclassicv1.DeleteLoadBalancerListenerOptions)
				deleteLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				deleteLoadBalancerListenerOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteLoadBalancerListener(deleteLoadBalancerListenerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteLoadBalancerListener with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteLoadBalancerListenerOptions model
				deleteLoadBalancerListenerOptionsModel := new(vpcclassicv1.DeleteLoadBalancerListenerOptions)
				deleteLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				deleteLoadBalancerListenerOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteLoadBalancerListener(deleteLoadBalancerListenerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteLoadBalancerListenerOptions model with no property values
				deleteLoadBalancerListenerOptionsModelNew := new(vpcclassicv1.DeleteLoadBalancerListenerOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteLoadBalancerListener(deleteLoadBalancerListenerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancerListener(getLoadBalancerListenerOptions *GetLoadBalancerListenerOptions) - Operation response error`, func() {
		version := "testString"
		getLoadBalancerListenerPath := "/load_balancers/testString/listeners/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getLoadBalancerListenerPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetLoadBalancerListener with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerListenerOptions model
				getLoadBalancerListenerOptionsModel := new(vpcclassicv1.GetLoadBalancerListenerOptions)
				getLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetLoadBalancerListener(getLoadBalancerListenerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetLoadBalancerListener(getLoadBalancerListenerOptions *GetLoadBalancerListenerOptions)`, func() {
		version := "testString"
		getLoadBalancerListenerPath := "/load_balancers/testString/listeners/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getLoadBalancerListenerPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "connection_limit": 2000, "created_at": "2019-01-01T12:00:00", "default_pool": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "policies": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "port": 443, "protocol": "http", "provisioning_status": "active"}`)
				}))
			})
			It(`Invoke GetLoadBalancerListener successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetLoadBalancerListener(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetLoadBalancerListenerOptions model
				getLoadBalancerListenerOptionsModel := new(vpcclassicv1.GetLoadBalancerListenerOptions)
				getLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetLoadBalancerListener(getLoadBalancerListenerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetLoadBalancerListener with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerListenerOptions model
				getLoadBalancerListenerOptionsModel := new(vpcclassicv1.GetLoadBalancerListenerOptions)
				getLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetLoadBalancerListener(getLoadBalancerListenerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetLoadBalancerListenerOptions model with no property values
				getLoadBalancerListenerOptionsModelNew := new(vpcclassicv1.GetLoadBalancerListenerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetLoadBalancerListener(getLoadBalancerListenerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateLoadBalancerListener(updateLoadBalancerListenerOptions *UpdateLoadBalancerListenerOptions) - Operation response error`, func() {
		version := "testString"
		updateLoadBalancerListenerPath := "/load_balancers/testString/listeners/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateLoadBalancerListenerPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateLoadBalancerListener with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the CertificateInstanceIdentityByCRN model
				certificateInstanceIdentityModel := new(vpcclassicv1.CertificateInstanceIdentityByCRN)
				certificateInstanceIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcclassicv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the UpdateLoadBalancerListenerOptions model
				updateLoadBalancerListenerOptionsModel := new(vpcclassicv1.UpdateLoadBalancerListenerOptions)
				updateLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerOptionsModel.CertificateInstance = certificateInstanceIdentityModel
				updateLoadBalancerListenerOptionsModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				updateLoadBalancerListenerOptionsModel.DefaultPool = loadBalancerPoolIdentityModel
				updateLoadBalancerListenerOptionsModel.Port = core.Int64Ptr(int64(443))
				updateLoadBalancerListenerOptionsModel.Protocol = core.StringPtr("http")
				updateLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateLoadBalancerListener(updateLoadBalancerListenerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateLoadBalancerListener(updateLoadBalancerListenerOptions *UpdateLoadBalancerListenerOptions)`, func() {
		version := "testString"
		updateLoadBalancerListenerPath := "/load_balancers/testString/listeners/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateLoadBalancerListenerPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "connection_limit": 2000, "created_at": "2019-01-01T12:00:00", "default_pool": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "policies": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "port": 443, "protocol": "http", "provisioning_status": "active"}`)
				}))
			})
			It(`Invoke UpdateLoadBalancerListener successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateLoadBalancerListener(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CertificateInstanceIdentityByCRN model
				certificateInstanceIdentityModel := new(vpcclassicv1.CertificateInstanceIdentityByCRN)
				certificateInstanceIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcclassicv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the UpdateLoadBalancerListenerOptions model
				updateLoadBalancerListenerOptionsModel := new(vpcclassicv1.UpdateLoadBalancerListenerOptions)
				updateLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerOptionsModel.CertificateInstance = certificateInstanceIdentityModel
				updateLoadBalancerListenerOptionsModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				updateLoadBalancerListenerOptionsModel.DefaultPool = loadBalancerPoolIdentityModel
				updateLoadBalancerListenerOptionsModel.Port = core.Int64Ptr(int64(443))
				updateLoadBalancerListenerOptionsModel.Protocol = core.StringPtr("http")
				updateLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateLoadBalancerListener(updateLoadBalancerListenerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateLoadBalancerListener with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the CertificateInstanceIdentityByCRN model
				certificateInstanceIdentityModel := new(vpcclassicv1.CertificateInstanceIdentityByCRN)
				certificateInstanceIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcclassicv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the UpdateLoadBalancerListenerOptions model
				updateLoadBalancerListenerOptionsModel := new(vpcclassicv1.UpdateLoadBalancerListenerOptions)
				updateLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerOptionsModel.CertificateInstance = certificateInstanceIdentityModel
				updateLoadBalancerListenerOptionsModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				updateLoadBalancerListenerOptionsModel.DefaultPool = loadBalancerPoolIdentityModel
				updateLoadBalancerListenerOptionsModel.Port = core.Int64Ptr(int64(443))
				updateLoadBalancerListenerOptionsModel.Protocol = core.StringPtr("http")
				updateLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateLoadBalancerListener(updateLoadBalancerListenerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateLoadBalancerListenerOptions model with no property values
				updateLoadBalancerListenerOptionsModelNew := new(vpcclassicv1.UpdateLoadBalancerListenerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateLoadBalancerListener(updateLoadBalancerListenerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLoadBalancerListenerPolicies(listLoadBalancerListenerPoliciesOptions *ListLoadBalancerListenerPoliciesOptions) - Operation response error`, func() {
		version := "testString"
		listLoadBalancerListenerPoliciesPath := "/load_balancers/testString/listeners/testString/policies"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listLoadBalancerListenerPoliciesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListLoadBalancerListenerPolicies with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerListenerPoliciesOptions model
				listLoadBalancerListenerPoliciesOptionsModel := new(vpcclassicv1.ListLoadBalancerListenerPoliciesOptions)
				listLoadBalancerListenerPoliciesOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenerPoliciesOptionsModel.ListenerID = core.StringPtr("testString")
				listLoadBalancerListenerPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListLoadBalancerListenerPolicies(listLoadBalancerListenerPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListLoadBalancerListenerPolicies(listLoadBalancerListenerPoliciesOptions *ListLoadBalancerListenerPoliciesOptions)`, func() {
		version := "testString"
		listLoadBalancerListenerPoliciesPath := "/load_balancers/testString/listeners/testString/policies"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listLoadBalancerListenerPoliciesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"policies": [{"action": "forward", "created_at": "2019-01-01T12:00:00", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-policy", "priority": 5, "provisioning_status": "active", "rules": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}]}`)
				}))
			})
			It(`Invoke ListLoadBalancerListenerPolicies successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListLoadBalancerListenerPolicies(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListLoadBalancerListenerPoliciesOptions model
				listLoadBalancerListenerPoliciesOptionsModel := new(vpcclassicv1.ListLoadBalancerListenerPoliciesOptions)
				listLoadBalancerListenerPoliciesOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenerPoliciesOptionsModel.ListenerID = core.StringPtr("testString")
				listLoadBalancerListenerPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListLoadBalancerListenerPolicies(listLoadBalancerListenerPoliciesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListLoadBalancerListenerPolicies with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerListenerPoliciesOptions model
				listLoadBalancerListenerPoliciesOptionsModel := new(vpcclassicv1.ListLoadBalancerListenerPoliciesOptions)
				listLoadBalancerListenerPoliciesOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenerPoliciesOptionsModel.ListenerID = core.StringPtr("testString")
				listLoadBalancerListenerPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListLoadBalancerListenerPolicies(listLoadBalancerListenerPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListLoadBalancerListenerPoliciesOptions model with no property values
				listLoadBalancerListenerPoliciesOptionsModelNew := new(vpcclassicv1.ListLoadBalancerListenerPoliciesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListLoadBalancerListenerPolicies(listLoadBalancerListenerPoliciesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateLoadBalancerListenerPolicy(createLoadBalancerListenerPolicyOptions *CreateLoadBalancerListenerPolicyOptions) - Operation response error`, func() {
		version := "testString"
		createLoadBalancerListenerPolicyPath := "/load_balancers/testString/listeners/testString/policies"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createLoadBalancerListenerPolicyPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateLoadBalancerListenerPolicy with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyPrototypeTargetModel := new(vpcclassicv1.LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyPrototypeTargetModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
				loadBalancerListenerPolicyRulePrototypeModel := new(vpcclassicv1.LoadBalancerListenerPolicyRulePrototype)
				loadBalancerListenerPolicyRulePrototypeModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePrototypeModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePrototypeModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePrototypeModel.Value = core.StringPtr("testString")

				// Construct an instance of the CreateLoadBalancerListenerPolicyOptions model
				createLoadBalancerListenerPolicyOptionsModel := new(vpcclassicv1.CreateLoadBalancerListenerPolicyOptions)
				createLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyOptionsModel.Action = core.StringPtr("forward")
				createLoadBalancerListenerPolicyOptionsModel.Priority = core.Int64Ptr(int64(5))
				createLoadBalancerListenerPolicyOptionsModel.Name = core.StringPtr("my-policy")
				createLoadBalancerListenerPolicyOptionsModel.Rules = []vpcclassicv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}
				createLoadBalancerListenerPolicyOptionsModel.Target = loadBalancerListenerPolicyPrototypeTargetModel
				createLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateLoadBalancerListenerPolicy(createLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateLoadBalancerListenerPolicy(createLoadBalancerListenerPolicyOptions *CreateLoadBalancerListenerPolicyOptions)`, func() {
		version := "testString"
		createLoadBalancerListenerPolicyPath := "/load_balancers/testString/listeners/testString/policies"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createLoadBalancerListenerPolicyPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"action": "forward", "created_at": "2019-01-01T12:00:00", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-policy", "priority": 5, "provisioning_status": "active", "rules": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}`)
				}))
			})
			It(`Invoke CreateLoadBalancerListenerPolicy successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateLoadBalancerListenerPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyPrototypeTargetModel := new(vpcclassicv1.LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyPrototypeTargetModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
				loadBalancerListenerPolicyRulePrototypeModel := new(vpcclassicv1.LoadBalancerListenerPolicyRulePrototype)
				loadBalancerListenerPolicyRulePrototypeModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePrototypeModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePrototypeModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePrototypeModel.Value = core.StringPtr("testString")

				// Construct an instance of the CreateLoadBalancerListenerPolicyOptions model
				createLoadBalancerListenerPolicyOptionsModel := new(vpcclassicv1.CreateLoadBalancerListenerPolicyOptions)
				createLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyOptionsModel.Action = core.StringPtr("forward")
				createLoadBalancerListenerPolicyOptionsModel.Priority = core.Int64Ptr(int64(5))
				createLoadBalancerListenerPolicyOptionsModel.Name = core.StringPtr("my-policy")
				createLoadBalancerListenerPolicyOptionsModel.Rules = []vpcclassicv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}
				createLoadBalancerListenerPolicyOptionsModel.Target = loadBalancerListenerPolicyPrototypeTargetModel
				createLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateLoadBalancerListenerPolicy(createLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateLoadBalancerListenerPolicy with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyPrototypeTargetModel := new(vpcclassicv1.LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyPrototypeTargetModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
				loadBalancerListenerPolicyRulePrototypeModel := new(vpcclassicv1.LoadBalancerListenerPolicyRulePrototype)
				loadBalancerListenerPolicyRulePrototypeModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePrototypeModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePrototypeModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePrototypeModel.Value = core.StringPtr("testString")

				// Construct an instance of the CreateLoadBalancerListenerPolicyOptions model
				createLoadBalancerListenerPolicyOptionsModel := new(vpcclassicv1.CreateLoadBalancerListenerPolicyOptions)
				createLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyOptionsModel.Action = core.StringPtr("forward")
				createLoadBalancerListenerPolicyOptionsModel.Priority = core.Int64Ptr(int64(5))
				createLoadBalancerListenerPolicyOptionsModel.Name = core.StringPtr("my-policy")
				createLoadBalancerListenerPolicyOptionsModel.Rules = []vpcclassicv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}
				createLoadBalancerListenerPolicyOptionsModel.Target = loadBalancerListenerPolicyPrototypeTargetModel
				createLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateLoadBalancerListenerPolicy(createLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateLoadBalancerListenerPolicyOptions model with no property values
				createLoadBalancerListenerPolicyOptionsModelNew := new(vpcclassicv1.CreateLoadBalancerListenerPolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateLoadBalancerListenerPolicy(createLoadBalancerListenerPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteLoadBalancerListenerPolicy(deleteLoadBalancerListenerPolicyOptions *DeleteLoadBalancerListenerPolicyOptions)`, func() {
		version := "testString"
		deleteLoadBalancerListenerPolicyPath := "/load_balancers/testString/listeners/testString/policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteLoadBalancerListenerPolicyPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteLoadBalancerListenerPolicy successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteLoadBalancerListenerPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteLoadBalancerListenerPolicyOptions model
				deleteLoadBalancerListenerPolicyOptionsModel := new(vpcclassicv1.DeleteLoadBalancerListenerPolicyOptions)
				deleteLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteLoadBalancerListenerPolicy(deleteLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteLoadBalancerListenerPolicy with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteLoadBalancerListenerPolicyOptions model
				deleteLoadBalancerListenerPolicyOptionsModel := new(vpcclassicv1.DeleteLoadBalancerListenerPolicyOptions)
				deleteLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteLoadBalancerListenerPolicy(deleteLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteLoadBalancerListenerPolicyOptions model with no property values
				deleteLoadBalancerListenerPolicyOptionsModelNew := new(vpcclassicv1.DeleteLoadBalancerListenerPolicyOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteLoadBalancerListenerPolicy(deleteLoadBalancerListenerPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancerListenerPolicy(getLoadBalancerListenerPolicyOptions *GetLoadBalancerListenerPolicyOptions) - Operation response error`, func() {
		version := "testString"
		getLoadBalancerListenerPolicyPath := "/load_balancers/testString/listeners/testString/policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getLoadBalancerListenerPolicyPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetLoadBalancerListenerPolicy with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerListenerPolicyOptions model
				getLoadBalancerListenerPolicyOptionsModel := new(vpcclassicv1.GetLoadBalancerListenerPolicyOptions)
				getLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetLoadBalancerListenerPolicy(getLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetLoadBalancerListenerPolicy(getLoadBalancerListenerPolicyOptions *GetLoadBalancerListenerPolicyOptions)`, func() {
		version := "testString"
		getLoadBalancerListenerPolicyPath := "/load_balancers/testString/listeners/testString/policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getLoadBalancerListenerPolicyPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"action": "forward", "created_at": "2019-01-01T12:00:00", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-policy", "priority": 5, "provisioning_status": "active", "rules": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}`)
				}))
			})
			It(`Invoke GetLoadBalancerListenerPolicy successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetLoadBalancerListenerPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetLoadBalancerListenerPolicyOptions model
				getLoadBalancerListenerPolicyOptionsModel := new(vpcclassicv1.GetLoadBalancerListenerPolicyOptions)
				getLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetLoadBalancerListenerPolicy(getLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetLoadBalancerListenerPolicy with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerListenerPolicyOptions model
				getLoadBalancerListenerPolicyOptionsModel := new(vpcclassicv1.GetLoadBalancerListenerPolicyOptions)
				getLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetLoadBalancerListenerPolicy(getLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetLoadBalancerListenerPolicyOptions model with no property values
				getLoadBalancerListenerPolicyOptionsModelNew := new(vpcclassicv1.GetLoadBalancerListenerPolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetLoadBalancerListenerPolicy(getLoadBalancerListenerPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateLoadBalancerListenerPolicy(updateLoadBalancerListenerPolicyOptions *UpdateLoadBalancerListenerPolicyOptions) - Operation response error`, func() {
		version := "testString"
		updateLoadBalancerListenerPolicyPath := "/load_balancers/testString/listeners/testString/policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateLoadBalancerListenerPolicyPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateLoadBalancerListenerPolicy with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyPatchTargetModel := new(vpcclassicv1.LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyPatchTargetModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the UpdateLoadBalancerListenerPolicyOptions model
				updateLoadBalancerListenerPolicyOptionsModel := new(vpcclassicv1.UpdateLoadBalancerListenerPolicyOptions)
				updateLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.Name = core.StringPtr("my-policy")
				updateLoadBalancerListenerPolicyOptionsModel.Priority = core.Int64Ptr(int64(5))
				updateLoadBalancerListenerPolicyOptionsModel.Target = loadBalancerListenerPolicyPatchTargetModel
				updateLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateLoadBalancerListenerPolicy(updateLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateLoadBalancerListenerPolicy(updateLoadBalancerListenerPolicyOptions *UpdateLoadBalancerListenerPolicyOptions)`, func() {
		version := "testString"
		updateLoadBalancerListenerPolicyPath := "/load_balancers/testString/listeners/testString/policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateLoadBalancerListenerPolicyPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"action": "forward", "created_at": "2019-01-01T12:00:00", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-policy", "priority": 5, "provisioning_status": "active", "rules": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "target": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}`)
				}))
			})
			It(`Invoke UpdateLoadBalancerListenerPolicy successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateLoadBalancerListenerPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyPatchTargetModel := new(vpcclassicv1.LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyPatchTargetModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the UpdateLoadBalancerListenerPolicyOptions model
				updateLoadBalancerListenerPolicyOptionsModel := new(vpcclassicv1.UpdateLoadBalancerListenerPolicyOptions)
				updateLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.Name = core.StringPtr("my-policy")
				updateLoadBalancerListenerPolicyOptionsModel.Priority = core.Int64Ptr(int64(5))
				updateLoadBalancerListenerPolicyOptionsModel.Target = loadBalancerListenerPolicyPatchTargetModel
				updateLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateLoadBalancerListenerPolicy(updateLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateLoadBalancerListenerPolicy with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyPatchTargetModel := new(vpcclassicv1.LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyPatchTargetModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the UpdateLoadBalancerListenerPolicyOptions model
				updateLoadBalancerListenerPolicyOptionsModel := new(vpcclassicv1.UpdateLoadBalancerListenerPolicyOptions)
				updateLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.Name = core.StringPtr("my-policy")
				updateLoadBalancerListenerPolicyOptionsModel.Priority = core.Int64Ptr(int64(5))
				updateLoadBalancerListenerPolicyOptionsModel.Target = loadBalancerListenerPolicyPatchTargetModel
				updateLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateLoadBalancerListenerPolicy(updateLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateLoadBalancerListenerPolicyOptions model with no property values
				updateLoadBalancerListenerPolicyOptionsModelNew := new(vpcclassicv1.UpdateLoadBalancerListenerPolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateLoadBalancerListenerPolicy(updateLoadBalancerListenerPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLoadBalancerListenerPolicyRules(listLoadBalancerListenerPolicyRulesOptions *ListLoadBalancerListenerPolicyRulesOptions) - Operation response error`, func() {
		version := "testString"
		listLoadBalancerListenerPolicyRulesPath := "/load_balancers/testString/listeners/testString/policies/testString/rules"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listLoadBalancerListenerPolicyRulesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListLoadBalancerListenerPolicyRules with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerListenerPolicyRulesOptions model
				listLoadBalancerListenerPolicyRulesOptionsModel := new(vpcclassicv1.ListLoadBalancerListenerPolicyRulesOptions)
				listLoadBalancerListenerPolicyRulesOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.ListenerID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.PolicyID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListLoadBalancerListenerPolicyRules(listLoadBalancerListenerPolicyRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListLoadBalancerListenerPolicyRules(listLoadBalancerListenerPolicyRulesOptions *ListLoadBalancerListenerPolicyRulesOptions)`, func() {
		version := "testString"
		listLoadBalancerListenerPolicyRulesPath := "/load_balancers/testString/listeners/testString/policies/testString/rules"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listLoadBalancerListenerPolicyRulesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"rules": [{"condition": "contains", "created_at": "2019-01-01T12:00:00", "field": "MY-APP-HEADER", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "provisioning_status": "active", "type": "header", "value": "Value"}]}`)
				}))
			})
			It(`Invoke ListLoadBalancerListenerPolicyRules successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListLoadBalancerListenerPolicyRules(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListLoadBalancerListenerPolicyRulesOptions model
				listLoadBalancerListenerPolicyRulesOptionsModel := new(vpcclassicv1.ListLoadBalancerListenerPolicyRulesOptions)
				listLoadBalancerListenerPolicyRulesOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.ListenerID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.PolicyID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListLoadBalancerListenerPolicyRules(listLoadBalancerListenerPolicyRulesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListLoadBalancerListenerPolicyRules with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerListenerPolicyRulesOptions model
				listLoadBalancerListenerPolicyRulesOptionsModel := new(vpcclassicv1.ListLoadBalancerListenerPolicyRulesOptions)
				listLoadBalancerListenerPolicyRulesOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.ListenerID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.PolicyID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListLoadBalancerListenerPolicyRules(listLoadBalancerListenerPolicyRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListLoadBalancerListenerPolicyRulesOptions model with no property values
				listLoadBalancerListenerPolicyRulesOptionsModelNew := new(vpcclassicv1.ListLoadBalancerListenerPolicyRulesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListLoadBalancerListenerPolicyRules(listLoadBalancerListenerPolicyRulesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateLoadBalancerListenerPolicyRule(createLoadBalancerListenerPolicyRuleOptions *CreateLoadBalancerListenerPolicyRuleOptions) - Operation response error`, func() {
		version := "testString"
		createLoadBalancerListenerPolicyRulePath := "/load_balancers/testString/listeners/testString/policies/testString/rules"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createLoadBalancerListenerPolicyRulePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateLoadBalancerListenerPolicyRule with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the CreateLoadBalancerListenerPolicyRuleOptions model
				createLoadBalancerListenerPolicyRuleOptionsModel := new(vpcclassicv1.CreateLoadBalancerListenerPolicyRuleOptions)
				createLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.Condition = core.StringPtr("contains")
				createLoadBalancerListenerPolicyRuleOptionsModel.Type = core.StringPtr("header")
				createLoadBalancerListenerPolicyRuleOptionsModel.Value = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.Field = core.StringPtr("MY-APP-HEADER")
				createLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateLoadBalancerListenerPolicyRule(createLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateLoadBalancerListenerPolicyRule(createLoadBalancerListenerPolicyRuleOptions *CreateLoadBalancerListenerPolicyRuleOptions)`, func() {
		version := "testString"
		createLoadBalancerListenerPolicyRulePath := "/load_balancers/testString/listeners/testString/policies/testString/rules"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createLoadBalancerListenerPolicyRulePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"condition": "contains", "created_at": "2019-01-01T12:00:00", "field": "MY-APP-HEADER", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "provisioning_status": "active", "type": "header", "value": "Value"}`)
				}))
			})
			It(`Invoke CreateLoadBalancerListenerPolicyRule successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateLoadBalancerListenerPolicyRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateLoadBalancerListenerPolicyRuleOptions model
				createLoadBalancerListenerPolicyRuleOptionsModel := new(vpcclassicv1.CreateLoadBalancerListenerPolicyRuleOptions)
				createLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.Condition = core.StringPtr("contains")
				createLoadBalancerListenerPolicyRuleOptionsModel.Type = core.StringPtr("header")
				createLoadBalancerListenerPolicyRuleOptionsModel.Value = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.Field = core.StringPtr("MY-APP-HEADER")
				createLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateLoadBalancerListenerPolicyRule(createLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateLoadBalancerListenerPolicyRule with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the CreateLoadBalancerListenerPolicyRuleOptions model
				createLoadBalancerListenerPolicyRuleOptionsModel := new(vpcclassicv1.CreateLoadBalancerListenerPolicyRuleOptions)
				createLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.Condition = core.StringPtr("contains")
				createLoadBalancerListenerPolicyRuleOptionsModel.Type = core.StringPtr("header")
				createLoadBalancerListenerPolicyRuleOptionsModel.Value = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.Field = core.StringPtr("MY-APP-HEADER")
				createLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateLoadBalancerListenerPolicyRule(createLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateLoadBalancerListenerPolicyRuleOptions model with no property values
				createLoadBalancerListenerPolicyRuleOptionsModelNew := new(vpcclassicv1.CreateLoadBalancerListenerPolicyRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateLoadBalancerListenerPolicyRule(createLoadBalancerListenerPolicyRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteLoadBalancerListenerPolicyRule(deleteLoadBalancerListenerPolicyRuleOptions *DeleteLoadBalancerListenerPolicyRuleOptions)`, func() {
		version := "testString"
		deleteLoadBalancerListenerPolicyRulePath := "/load_balancers/testString/listeners/testString/policies/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteLoadBalancerListenerPolicyRulePath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteLoadBalancerListenerPolicyRule successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteLoadBalancerListenerPolicyRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteLoadBalancerListenerPolicyRuleOptions model
				deleteLoadBalancerListenerPolicyRuleOptionsModel := new(vpcclassicv1.DeleteLoadBalancerListenerPolicyRuleOptions)
				deleteLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteLoadBalancerListenerPolicyRule(deleteLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteLoadBalancerListenerPolicyRule with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteLoadBalancerListenerPolicyRuleOptions model
				deleteLoadBalancerListenerPolicyRuleOptionsModel := new(vpcclassicv1.DeleteLoadBalancerListenerPolicyRuleOptions)
				deleteLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteLoadBalancerListenerPolicyRule(deleteLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteLoadBalancerListenerPolicyRuleOptions model with no property values
				deleteLoadBalancerListenerPolicyRuleOptionsModelNew := new(vpcclassicv1.DeleteLoadBalancerListenerPolicyRuleOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteLoadBalancerListenerPolicyRule(deleteLoadBalancerListenerPolicyRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancerListenerPolicyRule(getLoadBalancerListenerPolicyRuleOptions *GetLoadBalancerListenerPolicyRuleOptions) - Operation response error`, func() {
		version := "testString"
		getLoadBalancerListenerPolicyRulePath := "/load_balancers/testString/listeners/testString/policies/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getLoadBalancerListenerPolicyRulePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetLoadBalancerListenerPolicyRule with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerListenerPolicyRuleOptions model
				getLoadBalancerListenerPolicyRuleOptionsModel := new(vpcclassicv1.GetLoadBalancerListenerPolicyRuleOptions)
				getLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetLoadBalancerListenerPolicyRule(getLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetLoadBalancerListenerPolicyRule(getLoadBalancerListenerPolicyRuleOptions *GetLoadBalancerListenerPolicyRuleOptions)`, func() {
		version := "testString"
		getLoadBalancerListenerPolicyRulePath := "/load_balancers/testString/listeners/testString/policies/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getLoadBalancerListenerPolicyRulePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"condition": "contains", "created_at": "2019-01-01T12:00:00", "field": "MY-APP-HEADER", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "provisioning_status": "active", "type": "header", "value": "Value"}`)
				}))
			})
			It(`Invoke GetLoadBalancerListenerPolicyRule successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetLoadBalancerListenerPolicyRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetLoadBalancerListenerPolicyRuleOptions model
				getLoadBalancerListenerPolicyRuleOptionsModel := new(vpcclassicv1.GetLoadBalancerListenerPolicyRuleOptions)
				getLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetLoadBalancerListenerPolicyRule(getLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetLoadBalancerListenerPolicyRule with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerListenerPolicyRuleOptions model
				getLoadBalancerListenerPolicyRuleOptionsModel := new(vpcclassicv1.GetLoadBalancerListenerPolicyRuleOptions)
				getLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetLoadBalancerListenerPolicyRule(getLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetLoadBalancerListenerPolicyRuleOptions model with no property values
				getLoadBalancerListenerPolicyRuleOptionsModelNew := new(vpcclassicv1.GetLoadBalancerListenerPolicyRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetLoadBalancerListenerPolicyRule(getLoadBalancerListenerPolicyRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateLoadBalancerListenerPolicyRule(updateLoadBalancerListenerPolicyRuleOptions *UpdateLoadBalancerListenerPolicyRuleOptions) - Operation response error`, func() {
		version := "testString"
		updateLoadBalancerListenerPolicyRulePath := "/load_balancers/testString/listeners/testString/policies/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateLoadBalancerListenerPolicyRulePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateLoadBalancerListenerPolicyRule with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateLoadBalancerListenerPolicyRuleOptions model
				updateLoadBalancerListenerPolicyRuleOptionsModel := new(vpcclassicv1.UpdateLoadBalancerListenerPolicyRuleOptions)
				updateLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.Condition = core.StringPtr("contains")
				updateLoadBalancerListenerPolicyRuleOptionsModel.Field = core.StringPtr("MY-APP-HEADER")
				updateLoadBalancerListenerPolicyRuleOptionsModel.Type = core.StringPtr("header")
				updateLoadBalancerListenerPolicyRuleOptionsModel.Value = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateLoadBalancerListenerPolicyRule(updateLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateLoadBalancerListenerPolicyRule(updateLoadBalancerListenerPolicyRuleOptions *UpdateLoadBalancerListenerPolicyRuleOptions)`, func() {
		version := "testString"
		updateLoadBalancerListenerPolicyRulePath := "/load_balancers/testString/listeners/testString/policies/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateLoadBalancerListenerPolicyRulePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"condition": "contains", "created_at": "2019-01-01T12:00:00", "field": "MY-APP-HEADER", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "provisioning_status": "active", "type": "header", "value": "Value"}`)
				}))
			})
			It(`Invoke UpdateLoadBalancerListenerPolicyRule successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateLoadBalancerListenerPolicyRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerListenerPolicyRuleOptions model
				updateLoadBalancerListenerPolicyRuleOptionsModel := new(vpcclassicv1.UpdateLoadBalancerListenerPolicyRuleOptions)
				updateLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.Condition = core.StringPtr("contains")
				updateLoadBalancerListenerPolicyRuleOptionsModel.Field = core.StringPtr("MY-APP-HEADER")
				updateLoadBalancerListenerPolicyRuleOptionsModel.Type = core.StringPtr("header")
				updateLoadBalancerListenerPolicyRuleOptionsModel.Value = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateLoadBalancerListenerPolicyRule(updateLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateLoadBalancerListenerPolicyRule with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateLoadBalancerListenerPolicyRuleOptions model
				updateLoadBalancerListenerPolicyRuleOptionsModel := new(vpcclassicv1.UpdateLoadBalancerListenerPolicyRuleOptions)
				updateLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.Condition = core.StringPtr("contains")
				updateLoadBalancerListenerPolicyRuleOptionsModel.Field = core.StringPtr("MY-APP-HEADER")
				updateLoadBalancerListenerPolicyRuleOptionsModel.Type = core.StringPtr("header")
				updateLoadBalancerListenerPolicyRuleOptionsModel.Value = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateLoadBalancerListenerPolicyRule(updateLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateLoadBalancerListenerPolicyRuleOptions model with no property values
				updateLoadBalancerListenerPolicyRuleOptionsModelNew := new(vpcclassicv1.UpdateLoadBalancerListenerPolicyRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateLoadBalancerListenerPolicyRule(updateLoadBalancerListenerPolicyRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLoadBalancerPools(listLoadBalancerPoolsOptions *ListLoadBalancerPoolsOptions) - Operation response error`, func() {
		version := "testString"
		listLoadBalancerPoolsPath := "/load_balancers/testString/pools"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listLoadBalancerPoolsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListLoadBalancerPools with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerPoolsOptions model
				listLoadBalancerPoolsOptionsModel := new(vpcclassicv1.ListLoadBalancerPoolsOptions)
				listLoadBalancerPoolsOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerPoolsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListLoadBalancerPools(listLoadBalancerPoolsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListLoadBalancerPools(listLoadBalancerPoolsOptions *ListLoadBalancerPoolsOptions)`, func() {
		version := "testString"
		listLoadBalancerPoolsPath := "/load_balancers/testString/pools"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listLoadBalancerPoolsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"pools": [{"algorithm": "least_connections", "created_at": "2019-01-01T12:00:00", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "http", "url_path": "/"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "members": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer-pool", "protocol": "http", "provisioning_status": "active", "session_persistence": {"type": "source_ip"}}]}`)
				}))
			})
			It(`Invoke ListLoadBalancerPools successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListLoadBalancerPools(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListLoadBalancerPoolsOptions model
				listLoadBalancerPoolsOptionsModel := new(vpcclassicv1.ListLoadBalancerPoolsOptions)
				listLoadBalancerPoolsOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerPoolsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListLoadBalancerPools(listLoadBalancerPoolsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListLoadBalancerPools with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerPoolsOptions model
				listLoadBalancerPoolsOptionsModel := new(vpcclassicv1.ListLoadBalancerPoolsOptions)
				listLoadBalancerPoolsOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerPoolsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListLoadBalancerPools(listLoadBalancerPoolsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListLoadBalancerPoolsOptions model with no property values
				listLoadBalancerPoolsOptionsModelNew := new(vpcclassicv1.ListLoadBalancerPoolsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListLoadBalancerPools(listLoadBalancerPoolsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateLoadBalancerPool(createLoadBalancerPoolOptions *CreateLoadBalancerPoolOptions) - Operation response error`, func() {
		version := "testString"
		createLoadBalancerPoolPath := "/load_balancers/testString/pools"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createLoadBalancerPoolPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateLoadBalancerPool with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeIP model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberTargetPrototypeIP)
				loadBalancerPoolMemberTargetPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the LoadBalancerPoolHealthMonitorPrototype model
				loadBalancerPoolHealthMonitorPrototypeModel := new(vpcclassicv1.LoadBalancerPoolHealthMonitorPrototype)
				loadBalancerPoolHealthMonitorPrototypeModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPrototypeModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Type = core.StringPtr("http")
				loadBalancerPoolHealthMonitorPrototypeModel.URLPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))

				// Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
				loadBalancerPoolSessionPersistencePrototypeModel := new(vpcclassicv1.LoadBalancerPoolSessionPersistencePrototype)
				loadBalancerPoolSessionPersistencePrototypeModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the CreateLoadBalancerPoolOptions model
				createLoadBalancerPoolOptionsModel := new(vpcclassicv1.CreateLoadBalancerPoolOptions)
				createLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerPoolOptionsModel.Algorithm = core.StringPtr("least_connections")
				createLoadBalancerPoolOptionsModel.HealthMonitor = loadBalancerPoolHealthMonitorPrototypeModel
				createLoadBalancerPoolOptionsModel.Protocol = core.StringPtr("http")
				createLoadBalancerPoolOptionsModel.Members = []vpcclassicv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				createLoadBalancerPoolOptionsModel.Name = core.StringPtr("my-load-balancer-pool")
				createLoadBalancerPoolOptionsModel.SessionPersistence = loadBalancerPoolSessionPersistencePrototypeModel
				createLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateLoadBalancerPool(createLoadBalancerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateLoadBalancerPool(createLoadBalancerPoolOptions *CreateLoadBalancerPoolOptions)`, func() {
		version := "testString"
		createLoadBalancerPoolPath := "/load_balancers/testString/pools"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createLoadBalancerPoolPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"algorithm": "least_connections", "created_at": "2019-01-01T12:00:00", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "http", "url_path": "/"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "members": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer-pool", "protocol": "http", "provisioning_status": "active", "session_persistence": {"type": "source_ip"}}`)
				}))
			})
			It(`Invoke CreateLoadBalancerPool successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateLoadBalancerPool(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeIP model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberTargetPrototypeIP)
				loadBalancerPoolMemberTargetPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the LoadBalancerPoolHealthMonitorPrototype model
				loadBalancerPoolHealthMonitorPrototypeModel := new(vpcclassicv1.LoadBalancerPoolHealthMonitorPrototype)
				loadBalancerPoolHealthMonitorPrototypeModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPrototypeModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Type = core.StringPtr("http")
				loadBalancerPoolHealthMonitorPrototypeModel.URLPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))

				// Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
				loadBalancerPoolSessionPersistencePrototypeModel := new(vpcclassicv1.LoadBalancerPoolSessionPersistencePrototype)
				loadBalancerPoolSessionPersistencePrototypeModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the CreateLoadBalancerPoolOptions model
				createLoadBalancerPoolOptionsModel := new(vpcclassicv1.CreateLoadBalancerPoolOptions)
				createLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerPoolOptionsModel.Algorithm = core.StringPtr("least_connections")
				createLoadBalancerPoolOptionsModel.HealthMonitor = loadBalancerPoolHealthMonitorPrototypeModel
				createLoadBalancerPoolOptionsModel.Protocol = core.StringPtr("http")
				createLoadBalancerPoolOptionsModel.Members = []vpcclassicv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				createLoadBalancerPoolOptionsModel.Name = core.StringPtr("my-load-balancer-pool")
				createLoadBalancerPoolOptionsModel.SessionPersistence = loadBalancerPoolSessionPersistencePrototypeModel
				createLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateLoadBalancerPool(createLoadBalancerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateLoadBalancerPool with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeIP model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberTargetPrototypeIP)
				loadBalancerPoolMemberTargetPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the LoadBalancerPoolHealthMonitorPrototype model
				loadBalancerPoolHealthMonitorPrototypeModel := new(vpcclassicv1.LoadBalancerPoolHealthMonitorPrototype)
				loadBalancerPoolHealthMonitorPrototypeModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPrototypeModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Type = core.StringPtr("http")
				loadBalancerPoolHealthMonitorPrototypeModel.URLPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))

				// Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
				loadBalancerPoolSessionPersistencePrototypeModel := new(vpcclassicv1.LoadBalancerPoolSessionPersistencePrototype)
				loadBalancerPoolSessionPersistencePrototypeModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the CreateLoadBalancerPoolOptions model
				createLoadBalancerPoolOptionsModel := new(vpcclassicv1.CreateLoadBalancerPoolOptions)
				createLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerPoolOptionsModel.Algorithm = core.StringPtr("least_connections")
				createLoadBalancerPoolOptionsModel.HealthMonitor = loadBalancerPoolHealthMonitorPrototypeModel
				createLoadBalancerPoolOptionsModel.Protocol = core.StringPtr("http")
				createLoadBalancerPoolOptionsModel.Members = []vpcclassicv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				createLoadBalancerPoolOptionsModel.Name = core.StringPtr("my-load-balancer-pool")
				createLoadBalancerPoolOptionsModel.SessionPersistence = loadBalancerPoolSessionPersistencePrototypeModel
				createLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateLoadBalancerPool(createLoadBalancerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateLoadBalancerPoolOptions model with no property values
				createLoadBalancerPoolOptionsModelNew := new(vpcclassicv1.CreateLoadBalancerPoolOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateLoadBalancerPool(createLoadBalancerPoolOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteLoadBalancerPool(deleteLoadBalancerPoolOptions *DeleteLoadBalancerPoolOptions)`, func() {
		version := "testString"
		deleteLoadBalancerPoolPath := "/load_balancers/testString/pools/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteLoadBalancerPoolPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteLoadBalancerPool successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteLoadBalancerPool(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteLoadBalancerPoolOptions model
				deleteLoadBalancerPoolOptionsModel := new(vpcclassicv1.DeleteLoadBalancerPoolOptions)
				deleteLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				deleteLoadBalancerPoolOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteLoadBalancerPool(deleteLoadBalancerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteLoadBalancerPool with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteLoadBalancerPoolOptions model
				deleteLoadBalancerPoolOptionsModel := new(vpcclassicv1.DeleteLoadBalancerPoolOptions)
				deleteLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				deleteLoadBalancerPoolOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteLoadBalancerPool(deleteLoadBalancerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteLoadBalancerPoolOptions model with no property values
				deleteLoadBalancerPoolOptionsModelNew := new(vpcclassicv1.DeleteLoadBalancerPoolOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteLoadBalancerPool(deleteLoadBalancerPoolOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancerPool(getLoadBalancerPoolOptions *GetLoadBalancerPoolOptions) - Operation response error`, func() {
		version := "testString"
		getLoadBalancerPoolPath := "/load_balancers/testString/pools/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getLoadBalancerPoolPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetLoadBalancerPool with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerPoolOptions model
				getLoadBalancerPoolOptionsModel := new(vpcclassicv1.GetLoadBalancerPoolOptions)
				getLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerPoolOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetLoadBalancerPool(getLoadBalancerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetLoadBalancerPool(getLoadBalancerPoolOptions *GetLoadBalancerPoolOptions)`, func() {
		version := "testString"
		getLoadBalancerPoolPath := "/load_balancers/testString/pools/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getLoadBalancerPoolPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"algorithm": "least_connections", "created_at": "2019-01-01T12:00:00", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "http", "url_path": "/"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "members": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer-pool", "protocol": "http", "provisioning_status": "active", "session_persistence": {"type": "source_ip"}}`)
				}))
			})
			It(`Invoke GetLoadBalancerPool successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetLoadBalancerPool(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetLoadBalancerPoolOptions model
				getLoadBalancerPoolOptionsModel := new(vpcclassicv1.GetLoadBalancerPoolOptions)
				getLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerPoolOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetLoadBalancerPool(getLoadBalancerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetLoadBalancerPool with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerPoolOptions model
				getLoadBalancerPoolOptionsModel := new(vpcclassicv1.GetLoadBalancerPoolOptions)
				getLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerPoolOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetLoadBalancerPool(getLoadBalancerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetLoadBalancerPoolOptions model with no property values
				getLoadBalancerPoolOptionsModelNew := new(vpcclassicv1.GetLoadBalancerPoolOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetLoadBalancerPool(getLoadBalancerPoolOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateLoadBalancerPool(updateLoadBalancerPoolOptions *UpdateLoadBalancerPoolOptions) - Operation response error`, func() {
		version := "testString"
		updateLoadBalancerPoolPath := "/load_balancers/testString/pools/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateLoadBalancerPoolPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateLoadBalancerPool with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolHealthMonitorPatch model
				loadBalancerPoolHealthMonitorPatchModel := new(vpcclassicv1.LoadBalancerPoolHealthMonitorPatch)
				loadBalancerPoolHealthMonitorPatchModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPatchModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPatchModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPatchModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPatchModel.Type = core.StringPtr("http")
				loadBalancerPoolHealthMonitorPatchModel.URLPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolSessionPersistencePatch model
				loadBalancerPoolSessionPersistencePatchModel := new(vpcclassicv1.LoadBalancerPoolSessionPersistencePatch)
				loadBalancerPoolSessionPersistencePatchModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the UpdateLoadBalancerPoolOptions model
				updateLoadBalancerPoolOptionsModel := new(vpcclassicv1.UpdateLoadBalancerPoolOptions)
				updateLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerPoolOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerPoolOptionsModel.Algorithm = core.StringPtr("least_connections")
				updateLoadBalancerPoolOptionsModel.HealthMonitor = loadBalancerPoolHealthMonitorPatchModel
				updateLoadBalancerPoolOptionsModel.Name = core.StringPtr("my-load-balancer-pool")
				updateLoadBalancerPoolOptionsModel.Protocol = core.StringPtr("http")
				updateLoadBalancerPoolOptionsModel.SessionPersistence = loadBalancerPoolSessionPersistencePatchModel
				updateLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateLoadBalancerPool(updateLoadBalancerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateLoadBalancerPool(updateLoadBalancerPoolOptions *UpdateLoadBalancerPoolOptions)`, func() {
		version := "testString"
		updateLoadBalancerPoolPath := "/load_balancers/testString/pools/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateLoadBalancerPoolPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"algorithm": "least_connections", "created_at": "2019-01-01T12:00:00", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "http", "url_path": "/"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "members": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer-pool", "protocol": "http", "provisioning_status": "active", "session_persistence": {"type": "source_ip"}}`)
				}))
			})
			It(`Invoke UpdateLoadBalancerPool successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateLoadBalancerPool(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the LoadBalancerPoolHealthMonitorPatch model
				loadBalancerPoolHealthMonitorPatchModel := new(vpcclassicv1.LoadBalancerPoolHealthMonitorPatch)
				loadBalancerPoolHealthMonitorPatchModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPatchModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPatchModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPatchModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPatchModel.Type = core.StringPtr("http")
				loadBalancerPoolHealthMonitorPatchModel.URLPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolSessionPersistencePatch model
				loadBalancerPoolSessionPersistencePatchModel := new(vpcclassicv1.LoadBalancerPoolSessionPersistencePatch)
				loadBalancerPoolSessionPersistencePatchModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the UpdateLoadBalancerPoolOptions model
				updateLoadBalancerPoolOptionsModel := new(vpcclassicv1.UpdateLoadBalancerPoolOptions)
				updateLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerPoolOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerPoolOptionsModel.Algorithm = core.StringPtr("least_connections")
				updateLoadBalancerPoolOptionsModel.HealthMonitor = loadBalancerPoolHealthMonitorPatchModel
				updateLoadBalancerPoolOptionsModel.Name = core.StringPtr("my-load-balancer-pool")
				updateLoadBalancerPoolOptionsModel.Protocol = core.StringPtr("http")
				updateLoadBalancerPoolOptionsModel.SessionPersistence = loadBalancerPoolSessionPersistencePatchModel
				updateLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateLoadBalancerPool(updateLoadBalancerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateLoadBalancerPool with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolHealthMonitorPatch model
				loadBalancerPoolHealthMonitorPatchModel := new(vpcclassicv1.LoadBalancerPoolHealthMonitorPatch)
				loadBalancerPoolHealthMonitorPatchModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPatchModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPatchModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPatchModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPatchModel.Type = core.StringPtr("http")
				loadBalancerPoolHealthMonitorPatchModel.URLPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolSessionPersistencePatch model
				loadBalancerPoolSessionPersistencePatchModel := new(vpcclassicv1.LoadBalancerPoolSessionPersistencePatch)
				loadBalancerPoolSessionPersistencePatchModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the UpdateLoadBalancerPoolOptions model
				updateLoadBalancerPoolOptionsModel := new(vpcclassicv1.UpdateLoadBalancerPoolOptions)
				updateLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerPoolOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerPoolOptionsModel.Algorithm = core.StringPtr("least_connections")
				updateLoadBalancerPoolOptionsModel.HealthMonitor = loadBalancerPoolHealthMonitorPatchModel
				updateLoadBalancerPoolOptionsModel.Name = core.StringPtr("my-load-balancer-pool")
				updateLoadBalancerPoolOptionsModel.Protocol = core.StringPtr("http")
				updateLoadBalancerPoolOptionsModel.SessionPersistence = loadBalancerPoolSessionPersistencePatchModel
				updateLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateLoadBalancerPool(updateLoadBalancerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateLoadBalancerPoolOptions model with no property values
				updateLoadBalancerPoolOptionsModelNew := new(vpcclassicv1.UpdateLoadBalancerPoolOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateLoadBalancerPool(updateLoadBalancerPoolOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLoadBalancerPoolMembers(listLoadBalancerPoolMembersOptions *ListLoadBalancerPoolMembersOptions) - Operation response error`, func() {
		version := "testString"
		listLoadBalancerPoolMembersPath := "/load_balancers/testString/pools/testString/members"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listLoadBalancerPoolMembersPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListLoadBalancerPoolMembers with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerPoolMembersOptions model
				listLoadBalancerPoolMembersOptionsModel := new(vpcclassicv1.ListLoadBalancerPoolMembersOptions)
				listLoadBalancerPoolMembersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerPoolMembersOptionsModel.PoolID = core.StringPtr("testString")
				listLoadBalancerPoolMembersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListLoadBalancerPoolMembers(listLoadBalancerPoolMembersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListLoadBalancerPoolMembers(listLoadBalancerPoolMembersOptions *ListLoadBalancerPoolMembersOptions)`, func() {
		version := "testString"
		listLoadBalancerPoolMembersPath := "/load_balancers/testString/pools/testString/members"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listLoadBalancerPoolMembersPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"members": [{"created_at": "2019-01-01T12:00:00", "health": "faulted", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "provisioning_status": "active", "target": {"address": "192.168.3.4"}, "weight": 50}]}`)
				}))
			})
			It(`Invoke ListLoadBalancerPoolMembers successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListLoadBalancerPoolMembers(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListLoadBalancerPoolMembersOptions model
				listLoadBalancerPoolMembersOptionsModel := new(vpcclassicv1.ListLoadBalancerPoolMembersOptions)
				listLoadBalancerPoolMembersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerPoolMembersOptionsModel.PoolID = core.StringPtr("testString")
				listLoadBalancerPoolMembersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListLoadBalancerPoolMembers(listLoadBalancerPoolMembersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListLoadBalancerPoolMembers with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerPoolMembersOptions model
				listLoadBalancerPoolMembersOptionsModel := new(vpcclassicv1.ListLoadBalancerPoolMembersOptions)
				listLoadBalancerPoolMembersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerPoolMembersOptionsModel.PoolID = core.StringPtr("testString")
				listLoadBalancerPoolMembersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListLoadBalancerPoolMembers(listLoadBalancerPoolMembersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListLoadBalancerPoolMembersOptions model with no property values
				listLoadBalancerPoolMembersOptionsModelNew := new(vpcclassicv1.ListLoadBalancerPoolMembersOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListLoadBalancerPoolMembers(listLoadBalancerPoolMembersOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateLoadBalancerPoolMember(createLoadBalancerPoolMemberOptions *CreateLoadBalancerPoolMemberOptions) - Operation response error`, func() {
		version := "testString"
		createLoadBalancerPoolMemberPath := "/load_balancers/testString/pools/testString/members"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createLoadBalancerPoolMemberPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateLoadBalancerPoolMember with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeIP model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberTargetPrototypeIP)
				loadBalancerPoolMemberTargetPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the CreateLoadBalancerPoolMemberOptions model
				createLoadBalancerPoolMemberOptionsModel := new(vpcclassicv1.CreateLoadBalancerPoolMemberOptions)
				createLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				createLoadBalancerPoolMemberOptionsModel.Port = core.Int64Ptr(int64(80))
				createLoadBalancerPoolMemberOptionsModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				createLoadBalancerPoolMemberOptionsModel.Weight = core.Int64Ptr(int64(50))
				createLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateLoadBalancerPoolMember(createLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateLoadBalancerPoolMember(createLoadBalancerPoolMemberOptions *CreateLoadBalancerPoolMemberOptions)`, func() {
		version := "testString"
		createLoadBalancerPoolMemberPath := "/load_balancers/testString/pools/testString/members"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createLoadBalancerPoolMemberPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "health": "faulted", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "provisioning_status": "active", "target": {"address": "192.168.3.4"}, "weight": 50}`)
				}))
			})
			It(`Invoke CreateLoadBalancerPoolMember successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateLoadBalancerPoolMember(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeIP model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberTargetPrototypeIP)
				loadBalancerPoolMemberTargetPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the CreateLoadBalancerPoolMemberOptions model
				createLoadBalancerPoolMemberOptionsModel := new(vpcclassicv1.CreateLoadBalancerPoolMemberOptions)
				createLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				createLoadBalancerPoolMemberOptionsModel.Port = core.Int64Ptr(int64(80))
				createLoadBalancerPoolMemberOptionsModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				createLoadBalancerPoolMemberOptionsModel.Weight = core.Int64Ptr(int64(50))
				createLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateLoadBalancerPoolMember(createLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateLoadBalancerPoolMember with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeIP model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberTargetPrototypeIP)
				loadBalancerPoolMemberTargetPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the CreateLoadBalancerPoolMemberOptions model
				createLoadBalancerPoolMemberOptionsModel := new(vpcclassicv1.CreateLoadBalancerPoolMemberOptions)
				createLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				createLoadBalancerPoolMemberOptionsModel.Port = core.Int64Ptr(int64(80))
				createLoadBalancerPoolMemberOptionsModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				createLoadBalancerPoolMemberOptionsModel.Weight = core.Int64Ptr(int64(50))
				createLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateLoadBalancerPoolMember(createLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateLoadBalancerPoolMemberOptions model with no property values
				createLoadBalancerPoolMemberOptionsModelNew := new(vpcclassicv1.CreateLoadBalancerPoolMemberOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateLoadBalancerPoolMember(createLoadBalancerPoolMemberOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceLoadBalancerPoolMembers(replaceLoadBalancerPoolMembersOptions *ReplaceLoadBalancerPoolMembersOptions) - Operation response error`, func() {
		version := "testString"
		replaceLoadBalancerPoolMembersPath := "/load_balancers/testString/pools/testString/members"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(replaceLoadBalancerPoolMembersPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceLoadBalancerPoolMembers with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeIP model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberTargetPrototypeIP)
				loadBalancerPoolMemberTargetPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))

				// Construct an instance of the ReplaceLoadBalancerPoolMembersOptions model
				replaceLoadBalancerPoolMembersOptionsModel := new(vpcclassicv1.ReplaceLoadBalancerPoolMembersOptions)
				replaceLoadBalancerPoolMembersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				replaceLoadBalancerPoolMembersOptionsModel.PoolID = core.StringPtr("testString")
				replaceLoadBalancerPoolMembersOptionsModel.Members = []vpcclassicv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				replaceLoadBalancerPoolMembersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ReplaceLoadBalancerPoolMembers(replaceLoadBalancerPoolMembersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ReplaceLoadBalancerPoolMembers(replaceLoadBalancerPoolMembersOptions *ReplaceLoadBalancerPoolMembersOptions)`, func() {
		version := "testString"
		replaceLoadBalancerPoolMembersPath := "/load_balancers/testString/pools/testString/members"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(replaceLoadBalancerPoolMembersPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, `{"members": [{"created_at": "2019-01-01T12:00:00", "health": "faulted", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "provisioning_status": "active", "target": {"address": "192.168.3.4"}, "weight": 50}]}`)
				}))
			})
			It(`Invoke ReplaceLoadBalancerPoolMembers successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ReplaceLoadBalancerPoolMembers(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeIP model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberTargetPrototypeIP)
				loadBalancerPoolMemberTargetPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))

				// Construct an instance of the ReplaceLoadBalancerPoolMembersOptions model
				replaceLoadBalancerPoolMembersOptionsModel := new(vpcclassicv1.ReplaceLoadBalancerPoolMembersOptions)
				replaceLoadBalancerPoolMembersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				replaceLoadBalancerPoolMembersOptionsModel.PoolID = core.StringPtr("testString")
				replaceLoadBalancerPoolMembersOptionsModel.Members = []vpcclassicv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				replaceLoadBalancerPoolMembersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ReplaceLoadBalancerPoolMembers(replaceLoadBalancerPoolMembersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ReplaceLoadBalancerPoolMembers with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeIP model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberTargetPrototypeIP)
				loadBalancerPoolMemberTargetPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))

				// Construct an instance of the ReplaceLoadBalancerPoolMembersOptions model
				replaceLoadBalancerPoolMembersOptionsModel := new(vpcclassicv1.ReplaceLoadBalancerPoolMembersOptions)
				replaceLoadBalancerPoolMembersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				replaceLoadBalancerPoolMembersOptionsModel.PoolID = core.StringPtr("testString")
				replaceLoadBalancerPoolMembersOptionsModel.Members = []vpcclassicv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				replaceLoadBalancerPoolMembersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ReplaceLoadBalancerPoolMembers(replaceLoadBalancerPoolMembersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceLoadBalancerPoolMembersOptions model with no property values
				replaceLoadBalancerPoolMembersOptionsModelNew := new(vpcclassicv1.ReplaceLoadBalancerPoolMembersOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ReplaceLoadBalancerPoolMembers(replaceLoadBalancerPoolMembersOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteLoadBalancerPoolMember(deleteLoadBalancerPoolMemberOptions *DeleteLoadBalancerPoolMemberOptions)`, func() {
		version := "testString"
		deleteLoadBalancerPoolMemberPath := "/load_balancers/testString/pools/testString/members/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteLoadBalancerPoolMemberPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteLoadBalancerPoolMember successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteLoadBalancerPoolMember(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteLoadBalancerPoolMemberOptions model
				deleteLoadBalancerPoolMemberOptionsModel := new(vpcclassicv1.DeleteLoadBalancerPoolMemberOptions)
				deleteLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				deleteLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				deleteLoadBalancerPoolMemberOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteLoadBalancerPoolMember(deleteLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteLoadBalancerPoolMember with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteLoadBalancerPoolMemberOptions model
				deleteLoadBalancerPoolMemberOptionsModel := new(vpcclassicv1.DeleteLoadBalancerPoolMemberOptions)
				deleteLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				deleteLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				deleteLoadBalancerPoolMemberOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteLoadBalancerPoolMember(deleteLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteLoadBalancerPoolMemberOptions model with no property values
				deleteLoadBalancerPoolMemberOptionsModelNew := new(vpcclassicv1.DeleteLoadBalancerPoolMemberOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteLoadBalancerPoolMember(deleteLoadBalancerPoolMemberOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancerPoolMember(getLoadBalancerPoolMemberOptions *GetLoadBalancerPoolMemberOptions) - Operation response error`, func() {
		version := "testString"
		getLoadBalancerPoolMemberPath := "/load_balancers/testString/pools/testString/members/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getLoadBalancerPoolMemberPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetLoadBalancerPoolMember with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerPoolMemberOptions model
				getLoadBalancerPoolMemberOptionsModel := new(vpcclassicv1.GetLoadBalancerPoolMemberOptions)
				getLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetLoadBalancerPoolMember(getLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetLoadBalancerPoolMember(getLoadBalancerPoolMemberOptions *GetLoadBalancerPoolMemberOptions)`, func() {
		version := "testString"
		getLoadBalancerPoolMemberPath := "/load_balancers/testString/pools/testString/members/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getLoadBalancerPoolMemberPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "health": "faulted", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "provisioning_status": "active", "target": {"address": "192.168.3.4"}, "weight": 50}`)
				}))
			})
			It(`Invoke GetLoadBalancerPoolMember successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetLoadBalancerPoolMember(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetLoadBalancerPoolMemberOptions model
				getLoadBalancerPoolMemberOptionsModel := new(vpcclassicv1.GetLoadBalancerPoolMemberOptions)
				getLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetLoadBalancerPoolMember(getLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetLoadBalancerPoolMember with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerPoolMemberOptions model
				getLoadBalancerPoolMemberOptionsModel := new(vpcclassicv1.GetLoadBalancerPoolMemberOptions)
				getLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetLoadBalancerPoolMember(getLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetLoadBalancerPoolMemberOptions model with no property values
				getLoadBalancerPoolMemberOptionsModelNew := new(vpcclassicv1.GetLoadBalancerPoolMemberOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetLoadBalancerPoolMember(getLoadBalancerPoolMemberOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateLoadBalancerPoolMember(updateLoadBalancerPoolMemberOptions *UpdateLoadBalancerPoolMemberOptions) - Operation response error`, func() {
		version := "testString"
		updateLoadBalancerPoolMemberPath := "/load_balancers/testString/pools/testString/members/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateLoadBalancerPoolMemberPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateLoadBalancerPoolMember with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeIP model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberTargetPrototypeIP)
				loadBalancerPoolMemberTargetPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the UpdateLoadBalancerPoolMemberOptions model
				updateLoadBalancerPoolMemberOptionsModel := new(vpcclassicv1.UpdateLoadBalancerPoolMemberOptions)
				updateLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.Port = core.Int64Ptr(int64(80))
				updateLoadBalancerPoolMemberOptionsModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				updateLoadBalancerPoolMemberOptionsModel.Weight = core.Int64Ptr(int64(50))
				updateLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateLoadBalancerPoolMember(updateLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateLoadBalancerPoolMember(updateLoadBalancerPoolMemberOptions *UpdateLoadBalancerPoolMemberOptions)`, func() {
		version := "testString"
		updateLoadBalancerPoolMemberPath := "/load_balancers/testString/pools/testString/members/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateLoadBalancerPoolMemberPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "health": "faulted", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "provisioning_status": "active", "target": {"address": "192.168.3.4"}, "weight": 50}`)
				}))
			})
			It(`Invoke UpdateLoadBalancerPoolMember successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateLoadBalancerPoolMember(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeIP model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberTargetPrototypeIP)
				loadBalancerPoolMemberTargetPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the UpdateLoadBalancerPoolMemberOptions model
				updateLoadBalancerPoolMemberOptionsModel := new(vpcclassicv1.UpdateLoadBalancerPoolMemberOptions)
				updateLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.Port = core.Int64Ptr(int64(80))
				updateLoadBalancerPoolMemberOptionsModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				updateLoadBalancerPoolMemberOptionsModel.Weight = core.Int64Ptr(int64(50))
				updateLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateLoadBalancerPoolMember(updateLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateLoadBalancerPoolMember with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeIP model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberTargetPrototypeIP)
				loadBalancerPoolMemberTargetPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the UpdateLoadBalancerPoolMemberOptions model
				updateLoadBalancerPoolMemberOptionsModel := new(vpcclassicv1.UpdateLoadBalancerPoolMemberOptions)
				updateLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.Port = core.Int64Ptr(int64(80))
				updateLoadBalancerPoolMemberOptionsModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				updateLoadBalancerPoolMemberOptionsModel.Weight = core.Int64Ptr(int64(50))
				updateLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateLoadBalancerPoolMember(updateLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateLoadBalancerPoolMemberOptions model with no property values
				updateLoadBalancerPoolMemberOptionsModelNew := new(vpcclassicv1.UpdateLoadBalancerPoolMemberOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateLoadBalancerPoolMember(updateLoadBalancerPoolMemberOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			Expect(testService).ToNot(BeNil())
			Expect(testServiceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				URL:     "{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				URL:     "https://vpcclassicv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_URL":       "https://vpcclassicv1/api",
				"VPC_CLASSIC_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					URL:     "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					Version: core.StringPtr(version),
				})
				err := testService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_URL":       "https://vpcclassicv1/api",
				"VPC_CLASSIC_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
				URL:     "{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`ListNetworkAcls(listNetworkAclsOptions *ListNetworkAclsOptions) - Operation response error`, func() {
		version := "testString"
		listNetworkAclsPath := "/network_acls"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listNetworkAclsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListNetworkAcls with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListNetworkAclsOptions model
				listNetworkAclsOptionsModel := new(vpcclassicv1.ListNetworkAclsOptions)
				listNetworkAclsOptionsModel.Start = core.StringPtr("testString")
				listNetworkAclsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listNetworkAclsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListNetworkAcls(listNetworkAclsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListNetworkAcls(listNetworkAclsOptions *ListNetworkAclsOptions)`, func() {
		version := "testString"
		listNetworkAclsPath := "/network_acls"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listNetworkAclsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls?limit=20"}, "limit": 20, "network_acls": [{"created_at": "2019-01-01T12:00:00", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "rules": [{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "port_max": 22, "port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}], "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}}`)
				}))
			})
			It(`Invoke ListNetworkAcls successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListNetworkAcls(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListNetworkAclsOptions model
				listNetworkAclsOptionsModel := new(vpcclassicv1.ListNetworkAclsOptions)
				listNetworkAclsOptionsModel.Start = core.StringPtr("testString")
				listNetworkAclsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listNetworkAclsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListNetworkAcls(listNetworkAclsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListNetworkAcls with error: Operation request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListNetworkAclsOptions model
				listNetworkAclsOptionsModel := new(vpcclassicv1.ListNetworkAclsOptions)
				listNetworkAclsOptionsModel.Start = core.StringPtr("testString")
				listNetworkAclsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listNetworkAclsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListNetworkAcls(listNetworkAclsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateNetworkACL(createNetworkACLOptions *CreateNetworkACLOptions) - Operation response error`, func() {
		version := "testString"
		createNetworkACLPath := "/network_acls"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createNetworkACLPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateNetworkACL with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll model
				networkACLRulePrototypeNetworkACLContextModel := new(vpcclassicv1.NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll)
				networkACLRulePrototypeNetworkACLContextModel.Action = core.StringPtr("allow")
				networkACLRulePrototypeNetworkACLContextModel.Destination = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeNetworkACLContextModel.Direction = core.StringPtr("inbound")
				networkACLRulePrototypeNetworkACLContextModel.Name = core.StringPtr("my-rule-2")
				networkACLRulePrototypeNetworkACLContextModel.Protocol = core.StringPtr("all")
				networkACLRulePrototypeNetworkACLContextModel.Source = core.StringPtr("192.168.3.2/32")

				// Construct an instance of the NetworkACLPrototypeNetworkACLByRules model
				networkACLPrototypeModel := new(vpcclassicv1.NetworkACLPrototypeNetworkACLByRules)
				networkACLPrototypeModel.Name = core.StringPtr("my-network-acl")
				networkACLPrototypeModel.Rules = []vpcclassicv1.NetworkACLRulePrototypeNetworkACLContextIntf{networkACLRulePrototypeNetworkACLContextModel}

				// Construct an instance of the CreateNetworkACLOptions model
				createNetworkACLOptionsModel := new(vpcclassicv1.CreateNetworkACLOptions)
				createNetworkACLOptionsModel.NetworkACLPrototype = networkACLPrototypeModel
				createNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateNetworkACL(createNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateNetworkACL(createNetworkACLOptions *CreateNetworkACLOptions)`, func() {
		version := "testString"
		createNetworkACLPath := "/network_acls"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createNetworkACLPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "rules": [{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "port_max": 22, "port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke CreateNetworkACL successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateNetworkACL(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll model
				networkACLRulePrototypeNetworkACLContextModel := new(vpcclassicv1.NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll)
				networkACLRulePrototypeNetworkACLContextModel.Action = core.StringPtr("allow")
				networkACLRulePrototypeNetworkACLContextModel.Destination = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeNetworkACLContextModel.Direction = core.StringPtr("inbound")
				networkACLRulePrototypeNetworkACLContextModel.Name = core.StringPtr("my-rule-2")
				networkACLRulePrototypeNetworkACLContextModel.Protocol = core.StringPtr("all")
				networkACLRulePrototypeNetworkACLContextModel.Source = core.StringPtr("192.168.3.2/32")

				// Construct an instance of the NetworkACLPrototypeNetworkACLByRules model
				networkACLPrototypeModel := new(vpcclassicv1.NetworkACLPrototypeNetworkACLByRules)
				networkACLPrototypeModel.Name = core.StringPtr("my-network-acl")
				networkACLPrototypeModel.Rules = []vpcclassicv1.NetworkACLRulePrototypeNetworkACLContextIntf{networkACLRulePrototypeNetworkACLContextModel}

				// Construct an instance of the CreateNetworkACLOptions model
				createNetworkACLOptionsModel := new(vpcclassicv1.CreateNetworkACLOptions)
				createNetworkACLOptionsModel.NetworkACLPrototype = networkACLPrototypeModel
				createNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateNetworkACL(createNetworkACLOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateNetworkACL with error: Operation request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll model
				networkACLRulePrototypeNetworkACLContextModel := new(vpcclassicv1.NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll)
				networkACLRulePrototypeNetworkACLContextModel.Action = core.StringPtr("allow")
				networkACLRulePrototypeNetworkACLContextModel.Destination = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeNetworkACLContextModel.Direction = core.StringPtr("inbound")
				networkACLRulePrototypeNetworkACLContextModel.Name = core.StringPtr("my-rule-2")
				networkACLRulePrototypeNetworkACLContextModel.Protocol = core.StringPtr("all")
				networkACLRulePrototypeNetworkACLContextModel.Source = core.StringPtr("192.168.3.2/32")

				// Construct an instance of the NetworkACLPrototypeNetworkACLByRules model
				networkACLPrototypeModel := new(vpcclassicv1.NetworkACLPrototypeNetworkACLByRules)
				networkACLPrototypeModel.Name = core.StringPtr("my-network-acl")
				networkACLPrototypeModel.Rules = []vpcclassicv1.NetworkACLRulePrototypeNetworkACLContextIntf{networkACLRulePrototypeNetworkACLContextModel}

				// Construct an instance of the CreateNetworkACLOptions model
				createNetworkACLOptionsModel := new(vpcclassicv1.CreateNetworkACLOptions)
				createNetworkACLOptionsModel.NetworkACLPrototype = networkACLPrototypeModel
				createNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateNetworkACL(createNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteNetworkACL(deleteNetworkACLOptions *DeleteNetworkACLOptions)`, func() {
		version := "testString"
		deleteNetworkACLPath := "/network_acls/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteNetworkACLPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteNetworkACL successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteNetworkACL(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteNetworkACLOptions model
				deleteNetworkACLOptionsModel := new(vpcclassicv1.DeleteNetworkACLOptions)
				deleteNetworkACLOptionsModel.ID = core.StringPtr("testString")
				deleteNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteNetworkACL(deleteNetworkACLOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteNetworkACL with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteNetworkACLOptions model
				deleteNetworkACLOptionsModel := new(vpcclassicv1.DeleteNetworkACLOptions)
				deleteNetworkACLOptionsModel.ID = core.StringPtr("testString")
				deleteNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteNetworkACL(deleteNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteNetworkACLOptions model with no property values
				deleteNetworkACLOptionsModelNew := new(vpcclassicv1.DeleteNetworkACLOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteNetworkACL(deleteNetworkACLOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetNetworkACL(getNetworkACLOptions *GetNetworkACLOptions) - Operation response error`, func() {
		version := "testString"
		getNetworkACLPath := "/network_acls/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getNetworkACLPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetNetworkACL with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetNetworkACLOptions model
				getNetworkACLOptionsModel := new(vpcclassicv1.GetNetworkACLOptions)
				getNetworkACLOptionsModel.ID = core.StringPtr("testString")
				getNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetNetworkACL(getNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetNetworkACL(getNetworkACLOptions *GetNetworkACLOptions)`, func() {
		version := "testString"
		getNetworkACLPath := "/network_acls/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getNetworkACLPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "rules": [{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "port_max": 22, "port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke GetNetworkACL successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetNetworkACL(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetNetworkACLOptions model
				getNetworkACLOptionsModel := new(vpcclassicv1.GetNetworkACLOptions)
				getNetworkACLOptionsModel.ID = core.StringPtr("testString")
				getNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetNetworkACL(getNetworkACLOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetNetworkACL with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetNetworkACLOptions model
				getNetworkACLOptionsModel := new(vpcclassicv1.GetNetworkACLOptions)
				getNetworkACLOptionsModel.ID = core.StringPtr("testString")
				getNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetNetworkACL(getNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetNetworkACLOptions model with no property values
				getNetworkACLOptionsModelNew := new(vpcclassicv1.GetNetworkACLOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetNetworkACL(getNetworkACLOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateNetworkACL(updateNetworkACLOptions *UpdateNetworkACLOptions) - Operation response error`, func() {
		version := "testString"
		updateNetworkACLPath := "/network_acls/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateNetworkACLPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateNetworkACL with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateNetworkACLOptions model
				updateNetworkACLOptionsModel := new(vpcclassicv1.UpdateNetworkACLOptions)
				updateNetworkACLOptionsModel.ID = core.StringPtr("testString")
				updateNetworkACLOptionsModel.Name = core.StringPtr("my-network-acl")
				updateNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateNetworkACL(updateNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateNetworkACL(updateNetworkACLOptions *UpdateNetworkACLOptions)`, func() {
		version := "testString"
		updateNetworkACLPath := "/network_acls/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateNetworkACLPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "rules": [{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "port_max": 22, "port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke UpdateNetworkACL successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateNetworkACL(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateNetworkACLOptions model
				updateNetworkACLOptionsModel := new(vpcclassicv1.UpdateNetworkACLOptions)
				updateNetworkACLOptionsModel.ID = core.StringPtr("testString")
				updateNetworkACLOptionsModel.Name = core.StringPtr("my-network-acl")
				updateNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateNetworkACL(updateNetworkACLOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateNetworkACL with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateNetworkACLOptions model
				updateNetworkACLOptionsModel := new(vpcclassicv1.UpdateNetworkACLOptions)
				updateNetworkACLOptionsModel.ID = core.StringPtr("testString")
				updateNetworkACLOptionsModel.Name = core.StringPtr("my-network-acl")
				updateNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateNetworkACL(updateNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateNetworkACLOptions model with no property values
				updateNetworkACLOptionsModelNew := new(vpcclassicv1.UpdateNetworkACLOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateNetworkACL(updateNetworkACLOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListNetworkACLRules(listNetworkACLRulesOptions *ListNetworkACLRulesOptions) - Operation response error`, func() {
		version := "testString"
		listNetworkACLRulesPath := "/network_acls/testString/rules"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listNetworkACLRulesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["direction"]).To(Equal([]string{"inbound"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListNetworkACLRules with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListNetworkACLRulesOptions model
				listNetworkACLRulesOptionsModel := new(vpcclassicv1.ListNetworkACLRulesOptions)
				listNetworkACLRulesOptionsModel.NetworkACLID = core.StringPtr("testString")
				listNetworkACLRulesOptionsModel.Start = core.StringPtr("testString")
				listNetworkACLRulesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listNetworkACLRulesOptionsModel.Direction = core.StringPtr("inbound")
				listNetworkACLRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListNetworkACLRules(listNetworkACLRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListNetworkACLRules(listNetworkACLRulesOptions *ListNetworkACLRulesOptions)`, func() {
		version := "testString"
		listNetworkACLRulesPath := "/network_acls/testString/rules"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listNetworkACLRulesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["direction"]).To(Equal([]string{"inbound"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "rules": [{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "port_max": 22, "port_min": 22, "source_port_max": 65535, "source_port_min": 49152}]}`)
				}))
			})
			It(`Invoke ListNetworkACLRules successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListNetworkACLRules(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListNetworkACLRulesOptions model
				listNetworkACLRulesOptionsModel := new(vpcclassicv1.ListNetworkACLRulesOptions)
				listNetworkACLRulesOptionsModel.NetworkACLID = core.StringPtr("testString")
				listNetworkACLRulesOptionsModel.Start = core.StringPtr("testString")
				listNetworkACLRulesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listNetworkACLRulesOptionsModel.Direction = core.StringPtr("inbound")
				listNetworkACLRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListNetworkACLRules(listNetworkACLRulesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListNetworkACLRules with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListNetworkACLRulesOptions model
				listNetworkACLRulesOptionsModel := new(vpcclassicv1.ListNetworkACLRulesOptions)
				listNetworkACLRulesOptionsModel.NetworkACLID = core.StringPtr("testString")
				listNetworkACLRulesOptionsModel.Start = core.StringPtr("testString")
				listNetworkACLRulesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listNetworkACLRulesOptionsModel.Direction = core.StringPtr("inbound")
				listNetworkACLRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListNetworkACLRules(listNetworkACLRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListNetworkACLRulesOptions model with no property values
				listNetworkACLRulesOptionsModelNew := new(vpcclassicv1.ListNetworkACLRulesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListNetworkACLRules(listNetworkACLRulesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateNetworkACLRule(createNetworkACLRuleOptions *CreateNetworkACLRuleOptions) - Operation response error`, func() {
		version := "testString"
		createNetworkACLRulePath := "/network_acls/testString/rules"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createNetworkACLRulePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateNetworkACLRule with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the NetworkACLRuleIdentityByID model
				networkACLRuleIdentityModel := new(vpcclassicv1.NetworkACLRuleIdentityByID)
				networkACLRuleIdentityModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")

				// Construct an instance of the NetworkACLRulePrototypeNetworkACLRuleProtocolAll model
				networkACLRulePrototypeModel := new(vpcclassicv1.NetworkACLRulePrototypeNetworkACLRuleProtocolAll)
				networkACLRulePrototypeModel.Action = core.StringPtr("allow")
				networkACLRulePrototypeModel.Before = networkACLRuleIdentityModel
				networkACLRulePrototypeModel.Destination = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeModel.Direction = core.StringPtr("inbound")
				networkACLRulePrototypeModel.Name = core.StringPtr("my-rule-2")
				networkACLRulePrototypeModel.Protocol = core.StringPtr("all")
				networkACLRulePrototypeModel.Source = core.StringPtr("192.168.3.2/32")

				// Construct an instance of the CreateNetworkACLRuleOptions model
				createNetworkACLRuleOptionsModel := new(vpcclassicv1.CreateNetworkACLRuleOptions)
				createNetworkACLRuleOptionsModel.NetworkACLID = core.StringPtr("testString")
				createNetworkACLRuleOptionsModel.NetworkACLRulePrototype = networkACLRulePrototypeModel
				createNetworkACLRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateNetworkACLRule(createNetworkACLRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateNetworkACLRule(createNetworkACLRuleOptions *CreateNetworkACLRuleOptions)`, func() {
		version := "testString"
		createNetworkACLRulePath := "/network_acls/testString/rules"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createNetworkACLRulePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "all", "source": "192.168.3.0/24"}`)
				}))
			})
			It(`Invoke CreateNetworkACLRule successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateNetworkACLRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the NetworkACLRuleIdentityByID model
				networkACLRuleIdentityModel := new(vpcclassicv1.NetworkACLRuleIdentityByID)
				networkACLRuleIdentityModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")

				// Construct an instance of the NetworkACLRulePrototypeNetworkACLRuleProtocolAll model
				networkACLRulePrototypeModel := new(vpcclassicv1.NetworkACLRulePrototypeNetworkACLRuleProtocolAll)
				networkACLRulePrototypeModel.Action = core.StringPtr("allow")
				networkACLRulePrototypeModel.Before = networkACLRuleIdentityModel
				networkACLRulePrototypeModel.Destination = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeModel.Direction = core.StringPtr("inbound")
				networkACLRulePrototypeModel.Name = core.StringPtr("my-rule-2")
				networkACLRulePrototypeModel.Protocol = core.StringPtr("all")
				networkACLRulePrototypeModel.Source = core.StringPtr("192.168.3.2/32")

				// Construct an instance of the CreateNetworkACLRuleOptions model
				createNetworkACLRuleOptionsModel := new(vpcclassicv1.CreateNetworkACLRuleOptions)
				createNetworkACLRuleOptionsModel.NetworkACLID = core.StringPtr("testString")
				createNetworkACLRuleOptionsModel.NetworkACLRulePrototype = networkACLRulePrototypeModel
				createNetworkACLRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateNetworkACLRule(createNetworkACLRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateNetworkACLRule with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the NetworkACLRuleIdentityByID model
				networkACLRuleIdentityModel := new(vpcclassicv1.NetworkACLRuleIdentityByID)
				networkACLRuleIdentityModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")

				// Construct an instance of the NetworkACLRulePrototypeNetworkACLRuleProtocolAll model
				networkACLRulePrototypeModel := new(vpcclassicv1.NetworkACLRulePrototypeNetworkACLRuleProtocolAll)
				networkACLRulePrototypeModel.Action = core.StringPtr("allow")
				networkACLRulePrototypeModel.Before = networkACLRuleIdentityModel
				networkACLRulePrototypeModel.Destination = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeModel.Direction = core.StringPtr("inbound")
				networkACLRulePrototypeModel.Name = core.StringPtr("my-rule-2")
				networkACLRulePrototypeModel.Protocol = core.StringPtr("all")
				networkACLRulePrototypeModel.Source = core.StringPtr("192.168.3.2/32")

				// Construct an instance of the CreateNetworkACLRuleOptions model
				createNetworkACLRuleOptionsModel := new(vpcclassicv1.CreateNetworkACLRuleOptions)
				createNetworkACLRuleOptionsModel.NetworkACLID = core.StringPtr("testString")
				createNetworkACLRuleOptionsModel.NetworkACLRulePrototype = networkACLRulePrototypeModel
				createNetworkACLRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateNetworkACLRule(createNetworkACLRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateNetworkACLRuleOptions model with no property values
				createNetworkACLRuleOptionsModelNew := new(vpcclassicv1.CreateNetworkACLRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateNetworkACLRule(createNetworkACLRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteNetworkACLRule(deleteNetworkACLRuleOptions *DeleteNetworkACLRuleOptions)`, func() {
		version := "testString"
		deleteNetworkACLRulePath := "/network_acls/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteNetworkACLRulePath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteNetworkACLRule successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteNetworkACLRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteNetworkACLRuleOptions model
				deleteNetworkACLRuleOptionsModel := new(vpcclassicv1.DeleteNetworkACLRuleOptions)
				deleteNetworkACLRuleOptionsModel.NetworkACLID = core.StringPtr("testString")
				deleteNetworkACLRuleOptionsModel.ID = core.StringPtr("testString")
				deleteNetworkACLRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteNetworkACLRule(deleteNetworkACLRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteNetworkACLRule with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteNetworkACLRuleOptions model
				deleteNetworkACLRuleOptionsModel := new(vpcclassicv1.DeleteNetworkACLRuleOptions)
				deleteNetworkACLRuleOptionsModel.NetworkACLID = core.StringPtr("testString")
				deleteNetworkACLRuleOptionsModel.ID = core.StringPtr("testString")
				deleteNetworkACLRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteNetworkACLRule(deleteNetworkACLRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteNetworkACLRuleOptions model with no property values
				deleteNetworkACLRuleOptionsModelNew := new(vpcclassicv1.DeleteNetworkACLRuleOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteNetworkACLRule(deleteNetworkACLRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetNetworkACLRule(getNetworkACLRuleOptions *GetNetworkACLRuleOptions) - Operation response error`, func() {
		version := "testString"
		getNetworkACLRulePath := "/network_acls/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getNetworkACLRulePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetNetworkACLRule with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetNetworkACLRuleOptions model
				getNetworkACLRuleOptionsModel := new(vpcclassicv1.GetNetworkACLRuleOptions)
				getNetworkACLRuleOptionsModel.NetworkACLID = core.StringPtr("testString")
				getNetworkACLRuleOptionsModel.ID = core.StringPtr("testString")
				getNetworkACLRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetNetworkACLRule(getNetworkACLRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetNetworkACLRule(getNetworkACLRuleOptions *GetNetworkACLRuleOptions)`, func() {
		version := "testString"
		getNetworkACLRulePath := "/network_acls/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getNetworkACLRulePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "all", "source": "192.168.3.0/24"}`)
				}))
			})
			It(`Invoke GetNetworkACLRule successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetNetworkACLRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetNetworkACLRuleOptions model
				getNetworkACLRuleOptionsModel := new(vpcclassicv1.GetNetworkACLRuleOptions)
				getNetworkACLRuleOptionsModel.NetworkACLID = core.StringPtr("testString")
				getNetworkACLRuleOptionsModel.ID = core.StringPtr("testString")
				getNetworkACLRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetNetworkACLRule(getNetworkACLRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetNetworkACLRule with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetNetworkACLRuleOptions model
				getNetworkACLRuleOptionsModel := new(vpcclassicv1.GetNetworkACLRuleOptions)
				getNetworkACLRuleOptionsModel.NetworkACLID = core.StringPtr("testString")
				getNetworkACLRuleOptionsModel.ID = core.StringPtr("testString")
				getNetworkACLRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetNetworkACLRule(getNetworkACLRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetNetworkACLRuleOptions model with no property values
				getNetworkACLRuleOptionsModelNew := new(vpcclassicv1.GetNetworkACLRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetNetworkACLRule(getNetworkACLRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateNetworkACLRule(updateNetworkACLRuleOptions *UpdateNetworkACLRuleOptions) - Operation response error`, func() {
		version := "testString"
		updateNetworkACLRulePath := "/network_acls/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateNetworkACLRulePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateNetworkACLRule with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the NetworkACLRuleIdentityByID model
				networkACLRuleIdentityModel := new(vpcclassicv1.NetworkACLRuleIdentityByID)
				networkACLRuleIdentityModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")

				// Construct an instance of the NetworkACLRulePatchNetworkACLRuleProtocolIcmp model
				networkACLRulePatchModel := new(vpcclassicv1.NetworkACLRulePatchNetworkACLRuleProtocolIcmp)
				networkACLRulePatchModel.Action = core.StringPtr("allow")
				networkACLRulePatchModel.Before = networkACLRuleIdentityModel
				networkACLRulePatchModel.Destination = core.StringPtr("192.168.3.2/32")
				networkACLRulePatchModel.Direction = core.StringPtr("inbound")
				networkACLRulePatchModel.Name = core.StringPtr("my-rule-2")
				networkACLRulePatchModel.Protocol = core.StringPtr("icmp")
				networkACLRulePatchModel.Source = core.StringPtr("192.168.3.2/32")
				networkACLRulePatchModel.Code = core.Int64Ptr(int64(0))
				networkACLRulePatchModel.Type = core.Int64Ptr(int64(8))

				// Construct an instance of the UpdateNetworkACLRuleOptions model
				updateNetworkACLRuleOptionsModel := new(vpcclassicv1.UpdateNetworkACLRuleOptions)
				updateNetworkACLRuleOptionsModel.NetworkACLID = core.StringPtr("testString")
				updateNetworkACLRuleOptionsModel.ID = core.StringPtr("testString")
				updateNetworkACLRuleOptionsModel.NetworkACLRulePatch = networkACLRulePatchModel
				updateNetworkACLRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateNetworkACLRule(updateNetworkACLRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateNetworkACLRule(updateNetworkACLRuleOptions *UpdateNetworkACLRuleOptions)`, func() {
		version := "testString"
		updateNetworkACLRulePath := "/network_acls/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateNetworkACLRulePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "all", "source": "192.168.3.0/24"}`)
				}))
			})
			It(`Invoke UpdateNetworkACLRule successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateNetworkACLRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the NetworkACLRuleIdentityByID model
				networkACLRuleIdentityModel := new(vpcclassicv1.NetworkACLRuleIdentityByID)
				networkACLRuleIdentityModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")

				// Construct an instance of the NetworkACLRulePatchNetworkACLRuleProtocolIcmp model
				networkACLRulePatchModel := new(vpcclassicv1.NetworkACLRulePatchNetworkACLRuleProtocolIcmp)
				networkACLRulePatchModel.Action = core.StringPtr("allow")
				networkACLRulePatchModel.Before = networkACLRuleIdentityModel
				networkACLRulePatchModel.Destination = core.StringPtr("192.168.3.2/32")
				networkACLRulePatchModel.Direction = core.StringPtr("inbound")
				networkACLRulePatchModel.Name = core.StringPtr("my-rule-2")
				networkACLRulePatchModel.Protocol = core.StringPtr("icmp")
				networkACLRulePatchModel.Source = core.StringPtr("192.168.3.2/32")
				networkACLRulePatchModel.Code = core.Int64Ptr(int64(0))
				networkACLRulePatchModel.Type = core.Int64Ptr(int64(8))

				// Construct an instance of the UpdateNetworkACLRuleOptions model
				updateNetworkACLRuleOptionsModel := new(vpcclassicv1.UpdateNetworkACLRuleOptions)
				updateNetworkACLRuleOptionsModel.NetworkACLID = core.StringPtr("testString")
				updateNetworkACLRuleOptionsModel.ID = core.StringPtr("testString")
				updateNetworkACLRuleOptionsModel.NetworkACLRulePatch = networkACLRulePatchModel
				updateNetworkACLRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateNetworkACLRule(updateNetworkACLRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateNetworkACLRule with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the NetworkACLRuleIdentityByID model
				networkACLRuleIdentityModel := new(vpcclassicv1.NetworkACLRuleIdentityByID)
				networkACLRuleIdentityModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")

				// Construct an instance of the NetworkACLRulePatchNetworkACLRuleProtocolIcmp model
				networkACLRulePatchModel := new(vpcclassicv1.NetworkACLRulePatchNetworkACLRuleProtocolIcmp)
				networkACLRulePatchModel.Action = core.StringPtr("allow")
				networkACLRulePatchModel.Before = networkACLRuleIdentityModel
				networkACLRulePatchModel.Destination = core.StringPtr("192.168.3.2/32")
				networkACLRulePatchModel.Direction = core.StringPtr("inbound")
				networkACLRulePatchModel.Name = core.StringPtr("my-rule-2")
				networkACLRulePatchModel.Protocol = core.StringPtr("icmp")
				networkACLRulePatchModel.Source = core.StringPtr("192.168.3.2/32")
				networkACLRulePatchModel.Code = core.Int64Ptr(int64(0))
				networkACLRulePatchModel.Type = core.Int64Ptr(int64(8))

				// Construct an instance of the UpdateNetworkACLRuleOptions model
				updateNetworkACLRuleOptionsModel := new(vpcclassicv1.UpdateNetworkACLRuleOptions)
				updateNetworkACLRuleOptionsModel.NetworkACLID = core.StringPtr("testString")
				updateNetworkACLRuleOptionsModel.ID = core.StringPtr("testString")
				updateNetworkACLRuleOptionsModel.NetworkACLRulePatch = networkACLRulePatchModel
				updateNetworkACLRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateNetworkACLRule(updateNetworkACLRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateNetworkACLRuleOptions model with no property values
				updateNetworkACLRuleOptionsModelNew := new(vpcclassicv1.UpdateNetworkACLRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateNetworkACLRule(updateNetworkACLRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			Expect(testService).ToNot(BeNil())
			Expect(testServiceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				URL:     "{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				URL:     "https://vpcclassicv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_URL":       "https://vpcclassicv1/api",
				"VPC_CLASSIC_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					URL:     "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					Version: core.StringPtr(version),
				})
				err := testService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_URL":       "https://vpcclassicv1/api",
				"VPC_CLASSIC_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
				URL:     "{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`ListPublicGateways(listPublicGatewaysOptions *ListPublicGatewaysOptions) - Operation response error`, func() {
		version := "testString"
		listPublicGatewaysPath := "/public_gateways"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listPublicGatewaysPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListPublicGateways with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListPublicGatewaysOptions model
				listPublicGatewaysOptionsModel := new(vpcclassicv1.ListPublicGatewaysOptions)
				listPublicGatewaysOptionsModel.Start = core.StringPtr("testString")
				listPublicGatewaysOptionsModel.Limit = core.Int64Ptr(int64(1))
				listPublicGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListPublicGateways(listPublicGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListPublicGateways(listPublicGatewaysOptions *ListPublicGatewaysOptions)`, func() {
		version := "testString"
		listPublicGatewaysPath := "/public_gateways"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listPublicGatewaysPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "public_gateways": [{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}]}`)
				}))
			})
			It(`Invoke ListPublicGateways successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListPublicGateways(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListPublicGatewaysOptions model
				listPublicGatewaysOptionsModel := new(vpcclassicv1.ListPublicGatewaysOptions)
				listPublicGatewaysOptionsModel.Start = core.StringPtr("testString")
				listPublicGatewaysOptionsModel.Limit = core.Int64Ptr(int64(1))
				listPublicGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListPublicGateways(listPublicGatewaysOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListPublicGateways with error: Operation request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListPublicGatewaysOptions model
				listPublicGatewaysOptionsModel := new(vpcclassicv1.ListPublicGatewaysOptions)
				listPublicGatewaysOptionsModel.Start = core.StringPtr("testString")
				listPublicGatewaysOptionsModel.Limit = core.Int64Ptr(int64(1))
				listPublicGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListPublicGateways(listPublicGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreatePublicGateway(createPublicGatewayOptions *CreatePublicGatewayOptions) - Operation response error`, func() {
		version := "testString"
		createPublicGatewayPath := "/public_gateways"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createPublicGatewayPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreatePublicGateway with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the PublicGatewayPrototypeFloatingIPFloatingIPIdentityFloatingIPIdentityByID model
				publicGatewayPrototypeFloatingIPModel := new(vpcclassicv1.PublicGatewayPrototypeFloatingIPFloatingIPIdentityFloatingIPIdentityByID)
				publicGatewayPrototypeFloatingIPModel.ID = core.StringPtr("39300233-9995-4806-89a5-3c1b6eb88689")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcclassicv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcclassicv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreatePublicGatewayOptions model
				createPublicGatewayOptionsModel := new(vpcclassicv1.CreatePublicGatewayOptions)
				createPublicGatewayOptionsModel.VPC = vpcIdentityModel
				createPublicGatewayOptionsModel.Zone = zoneIdentityModel
				createPublicGatewayOptionsModel.FloatingIP = publicGatewayPrototypeFloatingIPModel
				createPublicGatewayOptionsModel.Name = core.StringPtr("my-public-gateway")
				createPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreatePublicGateway(createPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreatePublicGateway(createPublicGatewayOptions *CreatePublicGatewayOptions)`, func() {
		version := "testString"
		createPublicGatewayPath := "/public_gateways"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createPublicGatewayPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreatePublicGateway successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreatePublicGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PublicGatewayPrototypeFloatingIPFloatingIPIdentityFloatingIPIdentityByID model
				publicGatewayPrototypeFloatingIPModel := new(vpcclassicv1.PublicGatewayPrototypeFloatingIPFloatingIPIdentityFloatingIPIdentityByID)
				publicGatewayPrototypeFloatingIPModel.ID = core.StringPtr("39300233-9995-4806-89a5-3c1b6eb88689")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcclassicv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcclassicv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreatePublicGatewayOptions model
				createPublicGatewayOptionsModel := new(vpcclassicv1.CreatePublicGatewayOptions)
				createPublicGatewayOptionsModel.VPC = vpcIdentityModel
				createPublicGatewayOptionsModel.Zone = zoneIdentityModel
				createPublicGatewayOptionsModel.FloatingIP = publicGatewayPrototypeFloatingIPModel
				createPublicGatewayOptionsModel.Name = core.StringPtr("my-public-gateway")
				createPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreatePublicGateway(createPublicGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreatePublicGateway with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the PublicGatewayPrototypeFloatingIPFloatingIPIdentityFloatingIPIdentityByID model
				publicGatewayPrototypeFloatingIPModel := new(vpcclassicv1.PublicGatewayPrototypeFloatingIPFloatingIPIdentityFloatingIPIdentityByID)
				publicGatewayPrototypeFloatingIPModel.ID = core.StringPtr("39300233-9995-4806-89a5-3c1b6eb88689")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcclassicv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcclassicv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreatePublicGatewayOptions model
				createPublicGatewayOptionsModel := new(vpcclassicv1.CreatePublicGatewayOptions)
				createPublicGatewayOptionsModel.VPC = vpcIdentityModel
				createPublicGatewayOptionsModel.Zone = zoneIdentityModel
				createPublicGatewayOptionsModel.FloatingIP = publicGatewayPrototypeFloatingIPModel
				createPublicGatewayOptionsModel.Name = core.StringPtr("my-public-gateway")
				createPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreatePublicGateway(createPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreatePublicGatewayOptions model with no property values
				createPublicGatewayOptionsModelNew := new(vpcclassicv1.CreatePublicGatewayOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreatePublicGateway(createPublicGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeletePublicGateway(deletePublicGatewayOptions *DeletePublicGatewayOptions)`, func() {
		version := "testString"
		deletePublicGatewayPath := "/public_gateways/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deletePublicGatewayPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeletePublicGateway successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeletePublicGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeletePublicGatewayOptions model
				deletePublicGatewayOptionsModel := new(vpcclassicv1.DeletePublicGatewayOptions)
				deletePublicGatewayOptionsModel.ID = core.StringPtr("testString")
				deletePublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeletePublicGateway(deletePublicGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeletePublicGateway with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeletePublicGatewayOptions model
				deletePublicGatewayOptionsModel := new(vpcclassicv1.DeletePublicGatewayOptions)
				deletePublicGatewayOptionsModel.ID = core.StringPtr("testString")
				deletePublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeletePublicGateway(deletePublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeletePublicGatewayOptions model with no property values
				deletePublicGatewayOptionsModelNew := new(vpcclassicv1.DeletePublicGatewayOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeletePublicGateway(deletePublicGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetPublicGateway(getPublicGatewayOptions *GetPublicGatewayOptions) - Operation response error`, func() {
		version := "testString"
		getPublicGatewayPath := "/public_gateways/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getPublicGatewayPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetPublicGateway with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetPublicGatewayOptions model
				getPublicGatewayOptionsModel := new(vpcclassicv1.GetPublicGatewayOptions)
				getPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				getPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetPublicGateway(getPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetPublicGateway(getPublicGatewayOptions *GetPublicGatewayOptions)`, func() {
		version := "testString"
		getPublicGatewayPath := "/public_gateways/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getPublicGatewayPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetPublicGateway successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetPublicGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetPublicGatewayOptions model
				getPublicGatewayOptionsModel := new(vpcclassicv1.GetPublicGatewayOptions)
				getPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				getPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetPublicGateway(getPublicGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetPublicGateway with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetPublicGatewayOptions model
				getPublicGatewayOptionsModel := new(vpcclassicv1.GetPublicGatewayOptions)
				getPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				getPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetPublicGateway(getPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetPublicGatewayOptions model with no property values
				getPublicGatewayOptionsModelNew := new(vpcclassicv1.GetPublicGatewayOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetPublicGateway(getPublicGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdatePublicGateway(updatePublicGatewayOptions *UpdatePublicGatewayOptions) - Operation response error`, func() {
		version := "testString"
		updatePublicGatewayPath := "/public_gateways/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updatePublicGatewayPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdatePublicGateway with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdatePublicGatewayOptions model
				updatePublicGatewayOptionsModel := new(vpcclassicv1.UpdatePublicGatewayOptions)
				updatePublicGatewayOptionsModel.ID = core.StringPtr("testString")
				updatePublicGatewayOptionsModel.Name = core.StringPtr("my-public-gateway")
				updatePublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdatePublicGateway(updatePublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdatePublicGateway(updatePublicGatewayOptions *UpdatePublicGatewayOptions)`, func() {
		version := "testString"
		updatePublicGatewayPath := "/public_gateways/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updatePublicGatewayPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdatePublicGateway successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdatePublicGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdatePublicGatewayOptions model
				updatePublicGatewayOptionsModel := new(vpcclassicv1.UpdatePublicGatewayOptions)
				updatePublicGatewayOptionsModel.ID = core.StringPtr("testString")
				updatePublicGatewayOptionsModel.Name = core.StringPtr("my-public-gateway")
				updatePublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdatePublicGateway(updatePublicGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdatePublicGateway with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdatePublicGatewayOptions model
				updatePublicGatewayOptionsModel := new(vpcclassicv1.UpdatePublicGatewayOptions)
				updatePublicGatewayOptionsModel.ID = core.StringPtr("testString")
				updatePublicGatewayOptionsModel.Name = core.StringPtr("my-public-gateway")
				updatePublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdatePublicGateway(updatePublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdatePublicGatewayOptions model with no property values
				updatePublicGatewayOptionsModelNew := new(vpcclassicv1.UpdatePublicGatewayOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdatePublicGateway(updatePublicGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			Expect(testService).ToNot(BeNil())
			Expect(testServiceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				URL:     "{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				URL:     "https://vpcclassicv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_URL":       "https://vpcclassicv1/api",
				"VPC_CLASSIC_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					URL:     "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					Version: core.StringPtr(version),
				})
				err := testService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_URL":       "https://vpcclassicv1/api",
				"VPC_CLASSIC_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
				URL:     "{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`ListKeys(listKeysOptions *ListKeysOptions) - Operation response error`, func() {
		version := "testString"
		listKeysPath := "/keys"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listKeysPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListKeys with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListKeysOptions model
				listKeysOptionsModel := new(vpcclassicv1.ListKeysOptions)
				listKeysOptionsModel.Start = core.StringPtr("testString")
				listKeysOptionsModel.Limit = core.Int64Ptr(int64(1))
				listKeysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListKeys(listKeysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListKeys(listKeysOptions *ListKeysOptions)`, func() {
		version := "testString"
		listKeysPath := "/keys"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listKeysPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/keys?limit=20"}, "keys": [{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "length": 2048, "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "type": "rsa"}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/keys?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListKeys successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListKeys(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListKeysOptions model
				listKeysOptionsModel := new(vpcclassicv1.ListKeysOptions)
				listKeysOptionsModel.Start = core.StringPtr("testString")
				listKeysOptionsModel.Limit = core.Int64Ptr(int64(1))
				listKeysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListKeys(listKeysOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListKeys with error: Operation request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListKeysOptions model
				listKeysOptionsModel := new(vpcclassicv1.ListKeysOptions)
				listKeysOptionsModel.Start = core.StringPtr("testString")
				listKeysOptionsModel.Limit = core.Int64Ptr(int64(1))
				listKeysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListKeys(listKeysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateKey(createKeyOptions *CreateKeyOptions) - Operation response error`, func() {
		version := "testString"
		createKeyPath := "/keys"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createKeyPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateKey with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateKeyOptions model
				createKeyOptionsModel := new(vpcclassicv1.CreateKeyOptions)
				createKeyOptionsModel.PublicKey = core.StringPtr("AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En")
				createKeyOptionsModel.Name = core.StringPtr("my-key")
				createKeyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createKeyOptionsModel.Type = core.StringPtr("rsa")
				createKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateKey(createKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateKey(createKeyOptions *CreateKeyOptions)`, func() {
		version := "testString"
		createKeyPath := "/keys"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createKeyPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "length": 2048, "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "type": "rsa"}`)
				}))
			})
			It(`Invoke CreateKey successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateKey(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateKeyOptions model
				createKeyOptionsModel := new(vpcclassicv1.CreateKeyOptions)
				createKeyOptionsModel.PublicKey = core.StringPtr("AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En")
				createKeyOptionsModel.Name = core.StringPtr("my-key")
				createKeyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createKeyOptionsModel.Type = core.StringPtr("rsa")
				createKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateKey(createKeyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateKey with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateKeyOptions model
				createKeyOptionsModel := new(vpcclassicv1.CreateKeyOptions)
				createKeyOptionsModel.PublicKey = core.StringPtr("AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En")
				createKeyOptionsModel.Name = core.StringPtr("my-key")
				createKeyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createKeyOptionsModel.Type = core.StringPtr("rsa")
				createKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateKey(createKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateKeyOptions model with no property values
				createKeyOptionsModelNew := new(vpcclassicv1.CreateKeyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateKey(createKeyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteKey(deleteKeyOptions *DeleteKeyOptions)`, func() {
		version := "testString"
		deleteKeyPath := "/keys/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteKeyPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteKey successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteKey(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteKeyOptions model
				deleteKeyOptionsModel := new(vpcclassicv1.DeleteKeyOptions)
				deleteKeyOptionsModel.ID = core.StringPtr("testString")
				deleteKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteKey(deleteKeyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteKey with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteKeyOptions model
				deleteKeyOptionsModel := new(vpcclassicv1.DeleteKeyOptions)
				deleteKeyOptionsModel.ID = core.StringPtr("testString")
				deleteKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteKey(deleteKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteKeyOptions model with no property values
				deleteKeyOptionsModelNew := new(vpcclassicv1.DeleteKeyOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteKey(deleteKeyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetKey(getKeyOptions *GetKeyOptions) - Operation response error`, func() {
		version := "testString"
		getKeyPath := "/keys/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getKeyPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetKey with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetKeyOptions model
				getKeyOptionsModel := new(vpcclassicv1.GetKeyOptions)
				getKeyOptionsModel.ID = core.StringPtr("testString")
				getKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetKey(getKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetKey(getKeyOptions *GetKeyOptions)`, func() {
		version := "testString"
		getKeyPath := "/keys/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getKeyPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "length": 2048, "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "type": "rsa"}`)
				}))
			})
			It(`Invoke GetKey successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetKey(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetKeyOptions model
				getKeyOptionsModel := new(vpcclassicv1.GetKeyOptions)
				getKeyOptionsModel.ID = core.StringPtr("testString")
				getKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetKey(getKeyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetKey with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetKeyOptions model
				getKeyOptionsModel := new(vpcclassicv1.GetKeyOptions)
				getKeyOptionsModel.ID = core.StringPtr("testString")
				getKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetKey(getKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetKeyOptions model with no property values
				getKeyOptionsModelNew := new(vpcclassicv1.GetKeyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetKey(getKeyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateKey(updateKeyOptions *UpdateKeyOptions) - Operation response error`, func() {
		version := "testString"
		updateKeyPath := "/keys/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateKeyPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateKey with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateKeyOptions model
				updateKeyOptionsModel := new(vpcclassicv1.UpdateKeyOptions)
				updateKeyOptionsModel.ID = core.StringPtr("testString")
				updateKeyOptionsModel.Name = core.StringPtr("my-key")
				updateKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateKey(updateKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateKey(updateKeyOptions *UpdateKeyOptions)`, func() {
		version := "testString"
		updateKeyPath := "/keys/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateKeyPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "length": 2048, "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "type": "rsa"}`)
				}))
			})
			It(`Invoke UpdateKey successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateKey(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateKeyOptions model
				updateKeyOptionsModel := new(vpcclassicv1.UpdateKeyOptions)
				updateKeyOptionsModel.ID = core.StringPtr("testString")
				updateKeyOptionsModel.Name = core.StringPtr("my-key")
				updateKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateKey(updateKeyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateKey with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateKeyOptions model
				updateKeyOptionsModel := new(vpcclassicv1.UpdateKeyOptions)
				updateKeyOptionsModel.ID = core.StringPtr("testString")
				updateKeyOptionsModel.Name = core.StringPtr("my-key")
				updateKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateKey(updateKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateKeyOptions model with no property values
				updateKeyOptionsModelNew := new(vpcclassicv1.UpdateKeyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateKey(updateKeyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			Expect(testService).ToNot(BeNil())
			Expect(testServiceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				URL:     "{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				URL:     "https://vpcclassicv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_URL":       "https://vpcclassicv1/api",
				"VPC_CLASSIC_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					URL:     "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					Version: core.StringPtr(version),
				})
				err := testService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_URL":       "https://vpcclassicv1/api",
				"VPC_CLASSIC_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
				URL:     "{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`ListSecurityGroups(listSecurityGroupsOptions *ListSecurityGroupsOptions) - Operation response error`, func() {
		version := "testString"
		listSecurityGroupsPath := "/security_groups"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listSecurityGroupsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["vpc.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["vpc.crn"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["vpc.name"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListSecurityGroups with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListSecurityGroupsOptions model
				listSecurityGroupsOptionsModel := new(vpcclassicv1.ListSecurityGroupsOptions)
				listSecurityGroupsOptionsModel.VPCID = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.VPCCRN = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.VPCName = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListSecurityGroups(listSecurityGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListSecurityGroups(listSecurityGroupsOptions *ListSecurityGroupsOptions)`, func() {
		version := "testString"
		listSecurityGroupsPath := "/security_groups"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listSecurityGroupsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["vpc.id"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["vpc.crn"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["vpc.name"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"security_groups": [{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "network_interfaces": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "rules": [{"direction": "inbound", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "protocol": "all", "remote": {"address": "192.168.3.4"}}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}]}`)
				}))
			})
			It(`Invoke ListSecurityGroups successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListSecurityGroups(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListSecurityGroupsOptions model
				listSecurityGroupsOptionsModel := new(vpcclassicv1.ListSecurityGroupsOptions)
				listSecurityGroupsOptionsModel.VPCID = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.VPCCRN = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.VPCName = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListSecurityGroups(listSecurityGroupsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListSecurityGroups with error: Operation request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListSecurityGroupsOptions model
				listSecurityGroupsOptionsModel := new(vpcclassicv1.ListSecurityGroupsOptions)
				listSecurityGroupsOptionsModel.VPCID = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.VPCCRN = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.VPCName = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListSecurityGroups(listSecurityGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateSecurityGroup(createSecurityGroupOptions *CreateSecurityGroupOptions) - Operation response error`, func() {
		version := "testString"
		createSecurityGroupPath := "/security_groups"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createSecurityGroupPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateSecurityGroup with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the SecurityGroupRulePrototypeRemoteIP model
				securityGroupRulePrototypeRemoteModel := new(vpcclassicv1.SecurityGroupRulePrototypeRemoteIP)
				securityGroupRulePrototypeRemoteModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolIcmp model
				securityGroupRulePrototypeModel := new(vpcclassicv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolIcmp)
				securityGroupRulePrototypeModel.Direction = core.StringPtr("inbound")
				securityGroupRulePrototypeModel.IPVersion = core.StringPtr("ipv4")
				securityGroupRulePrototypeModel.Protocol = core.StringPtr("icmp")
				securityGroupRulePrototypeModel.Remote = securityGroupRulePrototypeRemoteModel
				securityGroupRulePrototypeModel.Code = core.Int64Ptr(int64(0))
				securityGroupRulePrototypeModel.Type = core.Int64Ptr(int64(8))

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcclassicv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the CreateSecurityGroupOptions model
				createSecurityGroupOptionsModel := new(vpcclassicv1.CreateSecurityGroupOptions)
				createSecurityGroupOptionsModel.VPC = vpcIdentityModel
				createSecurityGroupOptionsModel.Name = core.StringPtr("my-security-group")
				createSecurityGroupOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createSecurityGroupOptionsModel.Rules = []vpcclassicv1.SecurityGroupRulePrototypeIntf{securityGroupRulePrototypeModel}
				createSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateSecurityGroup(createSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateSecurityGroup(createSecurityGroupOptions *CreateSecurityGroupOptions)`, func() {
		version := "testString"
		createSecurityGroupPath := "/security_groups"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createSecurityGroupPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "network_interfaces": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "rules": [{"direction": "inbound", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "protocol": "all", "remote": {"address": "192.168.3.4"}}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke CreateSecurityGroup successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateSecurityGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the SecurityGroupRulePrototypeRemoteIP model
				securityGroupRulePrototypeRemoteModel := new(vpcclassicv1.SecurityGroupRulePrototypeRemoteIP)
				securityGroupRulePrototypeRemoteModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolIcmp model
				securityGroupRulePrototypeModel := new(vpcclassicv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolIcmp)
				securityGroupRulePrototypeModel.Direction = core.StringPtr("inbound")
				securityGroupRulePrototypeModel.IPVersion = core.StringPtr("ipv4")
				securityGroupRulePrototypeModel.Protocol = core.StringPtr("icmp")
				securityGroupRulePrototypeModel.Remote = securityGroupRulePrototypeRemoteModel
				securityGroupRulePrototypeModel.Code = core.Int64Ptr(int64(0))
				securityGroupRulePrototypeModel.Type = core.Int64Ptr(int64(8))

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcclassicv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the CreateSecurityGroupOptions model
				createSecurityGroupOptionsModel := new(vpcclassicv1.CreateSecurityGroupOptions)
				createSecurityGroupOptionsModel.VPC = vpcIdentityModel
				createSecurityGroupOptionsModel.Name = core.StringPtr("my-security-group")
				createSecurityGroupOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createSecurityGroupOptionsModel.Rules = []vpcclassicv1.SecurityGroupRulePrototypeIntf{securityGroupRulePrototypeModel}
				createSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateSecurityGroup(createSecurityGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateSecurityGroup with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the SecurityGroupRulePrototypeRemoteIP model
				securityGroupRulePrototypeRemoteModel := new(vpcclassicv1.SecurityGroupRulePrototypeRemoteIP)
				securityGroupRulePrototypeRemoteModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolIcmp model
				securityGroupRulePrototypeModel := new(vpcclassicv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolIcmp)
				securityGroupRulePrototypeModel.Direction = core.StringPtr("inbound")
				securityGroupRulePrototypeModel.IPVersion = core.StringPtr("ipv4")
				securityGroupRulePrototypeModel.Protocol = core.StringPtr("icmp")
				securityGroupRulePrototypeModel.Remote = securityGroupRulePrototypeRemoteModel
				securityGroupRulePrototypeModel.Code = core.Int64Ptr(int64(0))
				securityGroupRulePrototypeModel.Type = core.Int64Ptr(int64(8))

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcclassicv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the CreateSecurityGroupOptions model
				createSecurityGroupOptionsModel := new(vpcclassicv1.CreateSecurityGroupOptions)
				createSecurityGroupOptionsModel.VPC = vpcIdentityModel
				createSecurityGroupOptionsModel.Name = core.StringPtr("my-security-group")
				createSecurityGroupOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createSecurityGroupOptionsModel.Rules = []vpcclassicv1.SecurityGroupRulePrototypeIntf{securityGroupRulePrototypeModel}
				createSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateSecurityGroup(createSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateSecurityGroupOptions model with no property values
				createSecurityGroupOptionsModelNew := new(vpcclassicv1.CreateSecurityGroupOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateSecurityGroup(createSecurityGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteSecurityGroup(deleteSecurityGroupOptions *DeleteSecurityGroupOptions)`, func() {
		version := "testString"
		deleteSecurityGroupPath := "/security_groups/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteSecurityGroupPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteSecurityGroup successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteSecurityGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteSecurityGroupOptions model
				deleteSecurityGroupOptionsModel := new(vpcclassicv1.DeleteSecurityGroupOptions)
				deleteSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				deleteSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteSecurityGroup(deleteSecurityGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteSecurityGroup with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteSecurityGroupOptions model
				deleteSecurityGroupOptionsModel := new(vpcclassicv1.DeleteSecurityGroupOptions)
				deleteSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				deleteSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteSecurityGroup(deleteSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteSecurityGroupOptions model with no property values
				deleteSecurityGroupOptionsModelNew := new(vpcclassicv1.DeleteSecurityGroupOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteSecurityGroup(deleteSecurityGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSecurityGroup(getSecurityGroupOptions *GetSecurityGroupOptions) - Operation response error`, func() {
		version := "testString"
		getSecurityGroupPath := "/security_groups/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getSecurityGroupPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSecurityGroup with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetSecurityGroupOptions model
				getSecurityGroupOptionsModel := new(vpcclassicv1.GetSecurityGroupOptions)
				getSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetSecurityGroup(getSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetSecurityGroup(getSecurityGroupOptions *GetSecurityGroupOptions)`, func() {
		version := "testString"
		getSecurityGroupPath := "/security_groups/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getSecurityGroupPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "network_interfaces": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "rules": [{"direction": "inbound", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "protocol": "all", "remote": {"address": "192.168.3.4"}}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke GetSecurityGroup successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetSecurityGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSecurityGroupOptions model
				getSecurityGroupOptionsModel := new(vpcclassicv1.GetSecurityGroupOptions)
				getSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetSecurityGroup(getSecurityGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetSecurityGroup with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetSecurityGroupOptions model
				getSecurityGroupOptionsModel := new(vpcclassicv1.GetSecurityGroupOptions)
				getSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetSecurityGroup(getSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSecurityGroupOptions model with no property values
				getSecurityGroupOptionsModelNew := new(vpcclassicv1.GetSecurityGroupOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetSecurityGroup(getSecurityGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateSecurityGroup(updateSecurityGroupOptions *UpdateSecurityGroupOptions) - Operation response error`, func() {
		version := "testString"
		updateSecurityGroupPath := "/security_groups/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateSecurityGroupPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateSecurityGroup with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateSecurityGroupOptions model
				updateSecurityGroupOptionsModel := new(vpcclassicv1.UpdateSecurityGroupOptions)
				updateSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				updateSecurityGroupOptionsModel.Name = core.StringPtr("my-security-group")
				updateSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateSecurityGroup(updateSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateSecurityGroup(updateSecurityGroupOptions *UpdateSecurityGroupOptions)`, func() {
		version := "testString"
		updateSecurityGroupPath := "/security_groups/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateSecurityGroupPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "network_interfaces": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "rules": [{"direction": "inbound", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "protocol": "all", "remote": {"address": "192.168.3.4"}}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke UpdateSecurityGroup successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateSecurityGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateSecurityGroupOptions model
				updateSecurityGroupOptionsModel := new(vpcclassicv1.UpdateSecurityGroupOptions)
				updateSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				updateSecurityGroupOptionsModel.Name = core.StringPtr("my-security-group")
				updateSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateSecurityGroup(updateSecurityGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateSecurityGroup with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateSecurityGroupOptions model
				updateSecurityGroupOptionsModel := new(vpcclassicv1.UpdateSecurityGroupOptions)
				updateSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				updateSecurityGroupOptionsModel.Name = core.StringPtr("my-security-group")
				updateSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateSecurityGroup(updateSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateSecurityGroupOptions model with no property values
				updateSecurityGroupOptionsModelNew := new(vpcclassicv1.UpdateSecurityGroupOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateSecurityGroup(updateSecurityGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListSecurityGroupNetworkInterfaces(listSecurityGroupNetworkInterfacesOptions *ListSecurityGroupNetworkInterfacesOptions) - Operation response error`, func() {
		version := "testString"
		listSecurityGroupNetworkInterfacesPath := "/security_groups/testString/network_interfaces"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listSecurityGroupNetworkInterfacesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListSecurityGroupNetworkInterfaces with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListSecurityGroupNetworkInterfacesOptions model
				listSecurityGroupNetworkInterfacesOptionsModel := new(vpcclassicv1.ListSecurityGroupNetworkInterfacesOptions)
				listSecurityGroupNetworkInterfacesOptionsModel.SecurityGroupID = core.StringPtr("testString")
				listSecurityGroupNetworkInterfacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListSecurityGroupNetworkInterfaces(listSecurityGroupNetworkInterfacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListSecurityGroupNetworkInterfaces(listSecurityGroupNetworkInterfacesOptions *ListSecurityGroupNetworkInterfacesOptions)`, func() {
		version := "testString"
		listSecurityGroupNetworkInterfacesPath := "/security_groups/testString/network_interfaces"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listSecurityGroupNetworkInterfacesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"network_interfaces": [{"created_at": "2019-01-01T12:00:00", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}]}`)
				}))
			})
			It(`Invoke ListSecurityGroupNetworkInterfaces successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListSecurityGroupNetworkInterfaces(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListSecurityGroupNetworkInterfacesOptions model
				listSecurityGroupNetworkInterfacesOptionsModel := new(vpcclassicv1.ListSecurityGroupNetworkInterfacesOptions)
				listSecurityGroupNetworkInterfacesOptionsModel.SecurityGroupID = core.StringPtr("testString")
				listSecurityGroupNetworkInterfacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListSecurityGroupNetworkInterfaces(listSecurityGroupNetworkInterfacesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListSecurityGroupNetworkInterfaces with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListSecurityGroupNetworkInterfacesOptions model
				listSecurityGroupNetworkInterfacesOptionsModel := new(vpcclassicv1.ListSecurityGroupNetworkInterfacesOptions)
				listSecurityGroupNetworkInterfacesOptionsModel.SecurityGroupID = core.StringPtr("testString")
				listSecurityGroupNetworkInterfacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListSecurityGroupNetworkInterfaces(listSecurityGroupNetworkInterfacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListSecurityGroupNetworkInterfacesOptions model with no property values
				listSecurityGroupNetworkInterfacesOptionsModelNew := new(vpcclassicv1.ListSecurityGroupNetworkInterfacesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListSecurityGroupNetworkInterfaces(listSecurityGroupNetworkInterfacesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`RemoveSecurityGroupNetworkInterface(removeSecurityGroupNetworkInterfaceOptions *RemoveSecurityGroupNetworkInterfaceOptions)`, func() {
		version := "testString"
		removeSecurityGroupNetworkInterfacePath := "/security_groups/testString/network_interfaces/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(removeSecurityGroupNetworkInterfacePath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke RemoveSecurityGroupNetworkInterface successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.RemoveSecurityGroupNetworkInterface(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the RemoveSecurityGroupNetworkInterfaceOptions model
				removeSecurityGroupNetworkInterfaceOptionsModel := new(vpcclassicv1.RemoveSecurityGroupNetworkInterfaceOptions)
				removeSecurityGroupNetworkInterfaceOptionsModel.SecurityGroupID = core.StringPtr("testString")
				removeSecurityGroupNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				removeSecurityGroupNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.RemoveSecurityGroupNetworkInterface(removeSecurityGroupNetworkInterfaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke RemoveSecurityGroupNetworkInterface with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the RemoveSecurityGroupNetworkInterfaceOptions model
				removeSecurityGroupNetworkInterfaceOptionsModel := new(vpcclassicv1.RemoveSecurityGroupNetworkInterfaceOptions)
				removeSecurityGroupNetworkInterfaceOptionsModel.SecurityGroupID = core.StringPtr("testString")
				removeSecurityGroupNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				removeSecurityGroupNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.RemoveSecurityGroupNetworkInterface(removeSecurityGroupNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the RemoveSecurityGroupNetworkInterfaceOptions model with no property values
				removeSecurityGroupNetworkInterfaceOptionsModelNew := new(vpcclassicv1.RemoveSecurityGroupNetworkInterfaceOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.RemoveSecurityGroupNetworkInterface(removeSecurityGroupNetworkInterfaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSecurityGroupNetworkInterface(getSecurityGroupNetworkInterfaceOptions *GetSecurityGroupNetworkInterfaceOptions) - Operation response error`, func() {
		version := "testString"
		getSecurityGroupNetworkInterfacePath := "/security_groups/testString/network_interfaces/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getSecurityGroupNetworkInterfacePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSecurityGroupNetworkInterface with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetSecurityGroupNetworkInterfaceOptions model
				getSecurityGroupNetworkInterfaceOptionsModel := new(vpcclassicv1.GetSecurityGroupNetworkInterfaceOptions)
				getSecurityGroupNetworkInterfaceOptionsModel.SecurityGroupID = core.StringPtr("testString")
				getSecurityGroupNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetSecurityGroupNetworkInterface(getSecurityGroupNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetSecurityGroupNetworkInterface(getSecurityGroupNetworkInterfaceOptions *GetSecurityGroupNetworkInterfaceOptions)`, func() {
		version := "testString"
		getSecurityGroupNetworkInterfacePath := "/security_groups/testString/network_interfaces/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getSecurityGroupNetworkInterfacePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}`)
				}))
			})
			It(`Invoke GetSecurityGroupNetworkInterface successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetSecurityGroupNetworkInterface(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSecurityGroupNetworkInterfaceOptions model
				getSecurityGroupNetworkInterfaceOptionsModel := new(vpcclassicv1.GetSecurityGroupNetworkInterfaceOptions)
				getSecurityGroupNetworkInterfaceOptionsModel.SecurityGroupID = core.StringPtr("testString")
				getSecurityGroupNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetSecurityGroupNetworkInterface(getSecurityGroupNetworkInterfaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetSecurityGroupNetworkInterface with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetSecurityGroupNetworkInterfaceOptions model
				getSecurityGroupNetworkInterfaceOptionsModel := new(vpcclassicv1.GetSecurityGroupNetworkInterfaceOptions)
				getSecurityGroupNetworkInterfaceOptionsModel.SecurityGroupID = core.StringPtr("testString")
				getSecurityGroupNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetSecurityGroupNetworkInterface(getSecurityGroupNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSecurityGroupNetworkInterfaceOptions model with no property values
				getSecurityGroupNetworkInterfaceOptionsModelNew := new(vpcclassicv1.GetSecurityGroupNetworkInterfaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetSecurityGroupNetworkInterface(getSecurityGroupNetworkInterfaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`AddSecurityGroupNetworkInterface(addSecurityGroupNetworkInterfaceOptions *AddSecurityGroupNetworkInterfaceOptions) - Operation response error`, func() {
		version := "testString"
		addSecurityGroupNetworkInterfacePath := "/security_groups/testString/network_interfaces/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(addSecurityGroupNetworkInterfacePath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke AddSecurityGroupNetworkInterface with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the AddSecurityGroupNetworkInterfaceOptions model
				addSecurityGroupNetworkInterfaceOptionsModel := new(vpcclassicv1.AddSecurityGroupNetworkInterfaceOptions)
				addSecurityGroupNetworkInterfaceOptionsModel.SecurityGroupID = core.StringPtr("testString")
				addSecurityGroupNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				addSecurityGroupNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.AddSecurityGroupNetworkInterface(addSecurityGroupNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`AddSecurityGroupNetworkInterface(addSecurityGroupNetworkInterfaceOptions *AddSecurityGroupNetworkInterfaceOptions)`, func() {
		version := "testString"
		addSecurityGroupNetworkInterfacePath := "/security_groups/testString/network_interfaces/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(addSecurityGroupNetworkInterfacePath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}`)
				}))
			})
			It(`Invoke AddSecurityGroupNetworkInterface successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.AddSecurityGroupNetworkInterface(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the AddSecurityGroupNetworkInterfaceOptions model
				addSecurityGroupNetworkInterfaceOptionsModel := new(vpcclassicv1.AddSecurityGroupNetworkInterfaceOptions)
				addSecurityGroupNetworkInterfaceOptionsModel.SecurityGroupID = core.StringPtr("testString")
				addSecurityGroupNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				addSecurityGroupNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.AddSecurityGroupNetworkInterface(addSecurityGroupNetworkInterfaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke AddSecurityGroupNetworkInterface with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the AddSecurityGroupNetworkInterfaceOptions model
				addSecurityGroupNetworkInterfaceOptionsModel := new(vpcclassicv1.AddSecurityGroupNetworkInterfaceOptions)
				addSecurityGroupNetworkInterfaceOptionsModel.SecurityGroupID = core.StringPtr("testString")
				addSecurityGroupNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				addSecurityGroupNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.AddSecurityGroupNetworkInterface(addSecurityGroupNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the AddSecurityGroupNetworkInterfaceOptions model with no property values
				addSecurityGroupNetworkInterfaceOptionsModelNew := new(vpcclassicv1.AddSecurityGroupNetworkInterfaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.AddSecurityGroupNetworkInterface(addSecurityGroupNetworkInterfaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListSecurityGroupRules(listSecurityGroupRulesOptions *ListSecurityGroupRulesOptions) - Operation response error`, func() {
		version := "testString"
		listSecurityGroupRulesPath := "/security_groups/testString/rules"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listSecurityGroupRulesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListSecurityGroupRules with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListSecurityGroupRulesOptions model
				listSecurityGroupRulesOptionsModel := new(vpcclassicv1.ListSecurityGroupRulesOptions)
				listSecurityGroupRulesOptionsModel.SecurityGroupID = core.StringPtr("testString")
				listSecurityGroupRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListSecurityGroupRules(listSecurityGroupRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListSecurityGroupRules(listSecurityGroupRulesOptions *ListSecurityGroupRulesOptions)`, func() {
		version := "testString"
		listSecurityGroupRulesPath := "/security_groups/testString/rules"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listSecurityGroupRulesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"rules": [{"direction": "inbound", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "protocol": "all", "remote": {"address": "192.168.3.4"}}]}`)
				}))
			})
			It(`Invoke ListSecurityGroupRules successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListSecurityGroupRules(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListSecurityGroupRulesOptions model
				listSecurityGroupRulesOptionsModel := new(vpcclassicv1.ListSecurityGroupRulesOptions)
				listSecurityGroupRulesOptionsModel.SecurityGroupID = core.StringPtr("testString")
				listSecurityGroupRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListSecurityGroupRules(listSecurityGroupRulesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListSecurityGroupRules with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListSecurityGroupRulesOptions model
				listSecurityGroupRulesOptionsModel := new(vpcclassicv1.ListSecurityGroupRulesOptions)
				listSecurityGroupRulesOptionsModel.SecurityGroupID = core.StringPtr("testString")
				listSecurityGroupRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListSecurityGroupRules(listSecurityGroupRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListSecurityGroupRulesOptions model with no property values
				listSecurityGroupRulesOptionsModelNew := new(vpcclassicv1.ListSecurityGroupRulesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListSecurityGroupRules(listSecurityGroupRulesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateSecurityGroupRule(createSecurityGroupRuleOptions *CreateSecurityGroupRuleOptions) - Operation response error`, func() {
		version := "testString"
		createSecurityGroupRulePath := "/security_groups/testString/rules"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createSecurityGroupRulePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateSecurityGroupRule with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the SecurityGroupRulePrototypeRemoteIP model
				securityGroupRulePrototypeRemoteModel := new(vpcclassicv1.SecurityGroupRulePrototypeRemoteIP)
				securityGroupRulePrototypeRemoteModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolIcmp model
				securityGroupRulePrototypeModel := new(vpcclassicv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolIcmp)
				securityGroupRulePrototypeModel.Direction = core.StringPtr("inbound")
				securityGroupRulePrototypeModel.IPVersion = core.StringPtr("ipv4")
				securityGroupRulePrototypeModel.Protocol = core.StringPtr("icmp")
				securityGroupRulePrototypeModel.Remote = securityGroupRulePrototypeRemoteModel
				securityGroupRulePrototypeModel.Code = core.Int64Ptr(int64(0))
				securityGroupRulePrototypeModel.Type = core.Int64Ptr(int64(8))

				// Construct an instance of the CreateSecurityGroupRuleOptions model
				createSecurityGroupRuleOptionsModel := new(vpcclassicv1.CreateSecurityGroupRuleOptions)
				createSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				createSecurityGroupRuleOptionsModel.SecurityGroupRulePrototype = securityGroupRulePrototypeModel
				createSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateSecurityGroupRule(createSecurityGroupRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateSecurityGroupRule(createSecurityGroupRuleOptions *CreateSecurityGroupRuleOptions)`, func() {
		version := "testString"
		createSecurityGroupRulePath := "/security_groups/testString/rules"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createSecurityGroupRulePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"direction": "inbound", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "protocol": "all", "remote": {"address": "192.168.3.4"}}`)
				}))
			})
			It(`Invoke CreateSecurityGroupRule successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateSecurityGroupRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the SecurityGroupRulePrototypeRemoteIP model
				securityGroupRulePrototypeRemoteModel := new(vpcclassicv1.SecurityGroupRulePrototypeRemoteIP)
				securityGroupRulePrototypeRemoteModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolIcmp model
				securityGroupRulePrototypeModel := new(vpcclassicv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolIcmp)
				securityGroupRulePrototypeModel.Direction = core.StringPtr("inbound")
				securityGroupRulePrototypeModel.IPVersion = core.StringPtr("ipv4")
				securityGroupRulePrototypeModel.Protocol = core.StringPtr("icmp")
				securityGroupRulePrototypeModel.Remote = securityGroupRulePrototypeRemoteModel
				securityGroupRulePrototypeModel.Code = core.Int64Ptr(int64(0))
				securityGroupRulePrototypeModel.Type = core.Int64Ptr(int64(8))

				// Construct an instance of the CreateSecurityGroupRuleOptions model
				createSecurityGroupRuleOptionsModel := new(vpcclassicv1.CreateSecurityGroupRuleOptions)
				createSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				createSecurityGroupRuleOptionsModel.SecurityGroupRulePrototype = securityGroupRulePrototypeModel
				createSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateSecurityGroupRule(createSecurityGroupRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateSecurityGroupRule with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the SecurityGroupRulePrototypeRemoteIP model
				securityGroupRulePrototypeRemoteModel := new(vpcclassicv1.SecurityGroupRulePrototypeRemoteIP)
				securityGroupRulePrototypeRemoteModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolIcmp model
				securityGroupRulePrototypeModel := new(vpcclassicv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolIcmp)
				securityGroupRulePrototypeModel.Direction = core.StringPtr("inbound")
				securityGroupRulePrototypeModel.IPVersion = core.StringPtr("ipv4")
				securityGroupRulePrototypeModel.Protocol = core.StringPtr("icmp")
				securityGroupRulePrototypeModel.Remote = securityGroupRulePrototypeRemoteModel
				securityGroupRulePrototypeModel.Code = core.Int64Ptr(int64(0))
				securityGroupRulePrototypeModel.Type = core.Int64Ptr(int64(8))

				// Construct an instance of the CreateSecurityGroupRuleOptions model
				createSecurityGroupRuleOptionsModel := new(vpcclassicv1.CreateSecurityGroupRuleOptions)
				createSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				createSecurityGroupRuleOptionsModel.SecurityGroupRulePrototype = securityGroupRulePrototypeModel
				createSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateSecurityGroupRule(createSecurityGroupRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateSecurityGroupRuleOptions model with no property values
				createSecurityGroupRuleOptionsModelNew := new(vpcclassicv1.CreateSecurityGroupRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateSecurityGroupRule(createSecurityGroupRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteSecurityGroupRule(deleteSecurityGroupRuleOptions *DeleteSecurityGroupRuleOptions)`, func() {
		version := "testString"
		deleteSecurityGroupRulePath := "/security_groups/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteSecurityGroupRulePath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteSecurityGroupRule successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteSecurityGroupRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteSecurityGroupRuleOptions model
				deleteSecurityGroupRuleOptionsModel := new(vpcclassicv1.DeleteSecurityGroupRuleOptions)
				deleteSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				deleteSecurityGroupRuleOptionsModel.ID = core.StringPtr("testString")
				deleteSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteSecurityGroupRule(deleteSecurityGroupRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteSecurityGroupRule with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteSecurityGroupRuleOptions model
				deleteSecurityGroupRuleOptionsModel := new(vpcclassicv1.DeleteSecurityGroupRuleOptions)
				deleteSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				deleteSecurityGroupRuleOptionsModel.ID = core.StringPtr("testString")
				deleteSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteSecurityGroupRule(deleteSecurityGroupRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteSecurityGroupRuleOptions model with no property values
				deleteSecurityGroupRuleOptionsModelNew := new(vpcclassicv1.DeleteSecurityGroupRuleOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteSecurityGroupRule(deleteSecurityGroupRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSecurityGroupRule(getSecurityGroupRuleOptions *GetSecurityGroupRuleOptions) - Operation response error`, func() {
		version := "testString"
		getSecurityGroupRulePath := "/security_groups/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getSecurityGroupRulePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSecurityGroupRule with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetSecurityGroupRuleOptions model
				getSecurityGroupRuleOptionsModel := new(vpcclassicv1.GetSecurityGroupRuleOptions)
				getSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				getSecurityGroupRuleOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetSecurityGroupRule(getSecurityGroupRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetSecurityGroupRule(getSecurityGroupRuleOptions *GetSecurityGroupRuleOptions)`, func() {
		version := "testString"
		getSecurityGroupRulePath := "/security_groups/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getSecurityGroupRulePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"direction": "inbound", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "protocol": "all", "remote": {"address": "192.168.3.4"}}`)
				}))
			})
			It(`Invoke GetSecurityGroupRule successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetSecurityGroupRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSecurityGroupRuleOptions model
				getSecurityGroupRuleOptionsModel := new(vpcclassicv1.GetSecurityGroupRuleOptions)
				getSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				getSecurityGroupRuleOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetSecurityGroupRule(getSecurityGroupRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetSecurityGroupRule with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetSecurityGroupRuleOptions model
				getSecurityGroupRuleOptionsModel := new(vpcclassicv1.GetSecurityGroupRuleOptions)
				getSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				getSecurityGroupRuleOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetSecurityGroupRule(getSecurityGroupRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSecurityGroupRuleOptions model with no property values
				getSecurityGroupRuleOptionsModelNew := new(vpcclassicv1.GetSecurityGroupRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetSecurityGroupRule(getSecurityGroupRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateSecurityGroupRule(updateSecurityGroupRuleOptions *UpdateSecurityGroupRuleOptions) - Operation response error`, func() {
		version := "testString"
		updateSecurityGroupRulePath := "/security_groups/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateSecurityGroupRulePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateSecurityGroupRule with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the SecurityGroupRulePatchRemoteIP model
				securityGroupRulePatchRemoteModel := new(vpcclassicv1.SecurityGroupRulePatchRemoteIP)
				securityGroupRulePatchRemoteModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the SecurityGroupRulePatchSecurityGroupRuleProtocolIcmp model
				securityGroupRulePatchModel := new(vpcclassicv1.SecurityGroupRulePatchSecurityGroupRuleProtocolIcmp)
				securityGroupRulePatchModel.Direction = core.StringPtr("inbound")
				securityGroupRulePatchModel.IPVersion = core.StringPtr("ipv4")
				securityGroupRulePatchModel.Protocol = core.StringPtr("icmp")
				securityGroupRulePatchModel.Remote = securityGroupRulePatchRemoteModel
				securityGroupRulePatchModel.Code = core.Int64Ptr(int64(0))
				securityGroupRulePatchModel.Type = core.Int64Ptr(int64(8))

				// Construct an instance of the UpdateSecurityGroupRuleOptions model
				updateSecurityGroupRuleOptionsModel := new(vpcclassicv1.UpdateSecurityGroupRuleOptions)
				updateSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				updateSecurityGroupRuleOptionsModel.ID = core.StringPtr("testString")
				updateSecurityGroupRuleOptionsModel.SecurityGroupRulePatch = securityGroupRulePatchModel
				updateSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateSecurityGroupRule(updateSecurityGroupRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateSecurityGroupRule(updateSecurityGroupRuleOptions *UpdateSecurityGroupRuleOptions)`, func() {
		version := "testString"
		updateSecurityGroupRulePath := "/security_groups/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateSecurityGroupRulePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"direction": "inbound", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "protocol": "all", "remote": {"address": "192.168.3.4"}}`)
				}))
			})
			It(`Invoke UpdateSecurityGroupRule successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateSecurityGroupRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the SecurityGroupRulePatchRemoteIP model
				securityGroupRulePatchRemoteModel := new(vpcclassicv1.SecurityGroupRulePatchRemoteIP)
				securityGroupRulePatchRemoteModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the SecurityGroupRulePatchSecurityGroupRuleProtocolIcmp model
				securityGroupRulePatchModel := new(vpcclassicv1.SecurityGroupRulePatchSecurityGroupRuleProtocolIcmp)
				securityGroupRulePatchModel.Direction = core.StringPtr("inbound")
				securityGroupRulePatchModel.IPVersion = core.StringPtr("ipv4")
				securityGroupRulePatchModel.Protocol = core.StringPtr("icmp")
				securityGroupRulePatchModel.Remote = securityGroupRulePatchRemoteModel
				securityGroupRulePatchModel.Code = core.Int64Ptr(int64(0))
				securityGroupRulePatchModel.Type = core.Int64Ptr(int64(8))

				// Construct an instance of the UpdateSecurityGroupRuleOptions model
				updateSecurityGroupRuleOptionsModel := new(vpcclassicv1.UpdateSecurityGroupRuleOptions)
				updateSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				updateSecurityGroupRuleOptionsModel.ID = core.StringPtr("testString")
				updateSecurityGroupRuleOptionsModel.SecurityGroupRulePatch = securityGroupRulePatchModel
				updateSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateSecurityGroupRule(updateSecurityGroupRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateSecurityGroupRule with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the SecurityGroupRulePatchRemoteIP model
				securityGroupRulePatchRemoteModel := new(vpcclassicv1.SecurityGroupRulePatchRemoteIP)
				securityGroupRulePatchRemoteModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the SecurityGroupRulePatchSecurityGroupRuleProtocolIcmp model
				securityGroupRulePatchModel := new(vpcclassicv1.SecurityGroupRulePatchSecurityGroupRuleProtocolIcmp)
				securityGroupRulePatchModel.Direction = core.StringPtr("inbound")
				securityGroupRulePatchModel.IPVersion = core.StringPtr("ipv4")
				securityGroupRulePatchModel.Protocol = core.StringPtr("icmp")
				securityGroupRulePatchModel.Remote = securityGroupRulePatchRemoteModel
				securityGroupRulePatchModel.Code = core.Int64Ptr(int64(0))
				securityGroupRulePatchModel.Type = core.Int64Ptr(int64(8))

				// Construct an instance of the UpdateSecurityGroupRuleOptions model
				updateSecurityGroupRuleOptionsModel := new(vpcclassicv1.UpdateSecurityGroupRuleOptions)
				updateSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				updateSecurityGroupRuleOptionsModel.ID = core.StringPtr("testString")
				updateSecurityGroupRuleOptionsModel.SecurityGroupRulePatch = securityGroupRulePatchModel
				updateSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateSecurityGroupRule(updateSecurityGroupRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateSecurityGroupRuleOptions model with no property values
				updateSecurityGroupRuleOptionsModelNew := new(vpcclassicv1.UpdateSecurityGroupRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateSecurityGroupRule(updateSecurityGroupRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			Expect(testService).ToNot(BeNil())
			Expect(testServiceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				URL:     "{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				URL:     "https://vpcclassicv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_URL":       "https://vpcclassicv1/api",
				"VPC_CLASSIC_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					URL:     "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					Version: core.StringPtr(version),
				})
				err := testService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_URL":       "https://vpcclassicv1/api",
				"VPC_CLASSIC_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
				URL:     "{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`ListSubnets(listSubnetsOptions *ListSubnetsOptions) - Operation response error`, func() {
		version := "testString"
		listSubnetsPath := "/subnets"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listSubnetsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListSubnets with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListSubnetsOptions model
				listSubnetsOptionsModel := new(vpcclassicv1.ListSubnetsOptions)
				listSubnetsOptionsModel.Start = core.StringPtr("testString")
				listSubnetsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listSubnetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListSubnets(listSubnetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListSubnets(listSubnetsOptions *ListSubnetsOptions)`, func() {
		version := "testString"
		listSubnetsPath := "/subnets"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listSubnetsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/subnets?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/subnets?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "subnets": [{"available_ipv4_address_count": 15, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "ipv4_cidr_block": "10.0.0.0/24", "name": "my-subnet", "network_acl": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "public_gateway": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway"}, "status": "available", "total_ipv4_address_count": 256, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}]}`)
				}))
			})
			It(`Invoke ListSubnets successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListSubnets(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListSubnetsOptions model
				listSubnetsOptionsModel := new(vpcclassicv1.ListSubnetsOptions)
				listSubnetsOptionsModel.Start = core.StringPtr("testString")
				listSubnetsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listSubnetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListSubnets(listSubnetsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListSubnets with error: Operation request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListSubnetsOptions model
				listSubnetsOptionsModel := new(vpcclassicv1.ListSubnetsOptions)
				listSubnetsOptionsModel.Start = core.StringPtr("testString")
				listSubnetsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listSubnetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListSubnets(listSubnetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateSubnet(createSubnetOptions *CreateSubnetOptions) - Operation response error`, func() {
		version := "testString"
		createSubnetPath := "/subnets"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createSubnetPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateSubnet with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the NetworkACLIdentityByID model
				networkACLIdentityModel := new(vpcclassicv1.NetworkACLIdentityByID)
				networkACLIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcclassicv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcclassicv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcclassicv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the SubnetPrototypeSubnetByTotalCount model
				subnetPrototypeModel := new(vpcclassicv1.SubnetPrototypeSubnetByTotalCount)
				subnetPrototypeModel.Name = core.StringPtr("my-subnet")
				subnetPrototypeModel.NetworkACL = networkACLIdentityModel
				subnetPrototypeModel.PublicGateway = publicGatewayIdentityModel
				subnetPrototypeModel.VPC = vpcIdentityModel
				subnetPrototypeModel.TotalIpv4AddressCount = core.Int64Ptr(int64(256))
				subnetPrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateSubnetOptions model
				createSubnetOptionsModel := new(vpcclassicv1.CreateSubnetOptions)
				createSubnetOptionsModel.SubnetPrototype = subnetPrototypeModel
				createSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateSubnet(createSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateSubnet(createSubnetOptions *CreateSubnetOptions)`, func() {
		version := "testString"
		createSubnetPath := "/subnets"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createSubnetPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"available_ipv4_address_count": 15, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "ipv4_cidr_block": "10.0.0.0/24", "name": "my-subnet", "network_acl": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "public_gateway": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway"}, "status": "available", "total_ipv4_address_count": 256, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreateSubnet successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateSubnet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the NetworkACLIdentityByID model
				networkACLIdentityModel := new(vpcclassicv1.NetworkACLIdentityByID)
				networkACLIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcclassicv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcclassicv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcclassicv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the SubnetPrototypeSubnetByTotalCount model
				subnetPrototypeModel := new(vpcclassicv1.SubnetPrototypeSubnetByTotalCount)
				subnetPrototypeModel.Name = core.StringPtr("my-subnet")
				subnetPrototypeModel.NetworkACL = networkACLIdentityModel
				subnetPrototypeModel.PublicGateway = publicGatewayIdentityModel
				subnetPrototypeModel.VPC = vpcIdentityModel
				subnetPrototypeModel.TotalIpv4AddressCount = core.Int64Ptr(int64(256))
				subnetPrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateSubnetOptions model
				createSubnetOptionsModel := new(vpcclassicv1.CreateSubnetOptions)
				createSubnetOptionsModel.SubnetPrototype = subnetPrototypeModel
				createSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateSubnet(createSubnetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateSubnet with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the NetworkACLIdentityByID model
				networkACLIdentityModel := new(vpcclassicv1.NetworkACLIdentityByID)
				networkACLIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcclassicv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcclassicv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcclassicv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the SubnetPrototypeSubnetByTotalCount model
				subnetPrototypeModel := new(vpcclassicv1.SubnetPrototypeSubnetByTotalCount)
				subnetPrototypeModel.Name = core.StringPtr("my-subnet")
				subnetPrototypeModel.NetworkACL = networkACLIdentityModel
				subnetPrototypeModel.PublicGateway = publicGatewayIdentityModel
				subnetPrototypeModel.VPC = vpcIdentityModel
				subnetPrototypeModel.TotalIpv4AddressCount = core.Int64Ptr(int64(256))
				subnetPrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateSubnetOptions model
				createSubnetOptionsModel := new(vpcclassicv1.CreateSubnetOptions)
				createSubnetOptionsModel.SubnetPrototype = subnetPrototypeModel
				createSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateSubnet(createSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateSubnetOptions model with no property values
				createSubnetOptionsModelNew := new(vpcclassicv1.CreateSubnetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateSubnet(createSubnetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteSubnet(deleteSubnetOptions *DeleteSubnetOptions)`, func() {
		version := "testString"
		deleteSubnetPath := "/subnets/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteSubnetPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteSubnet successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteSubnet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteSubnetOptions model
				deleteSubnetOptionsModel := new(vpcclassicv1.DeleteSubnetOptions)
				deleteSubnetOptionsModel.ID = core.StringPtr("testString")
				deleteSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteSubnet(deleteSubnetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteSubnet with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteSubnetOptions model
				deleteSubnetOptionsModel := new(vpcclassicv1.DeleteSubnetOptions)
				deleteSubnetOptionsModel.ID = core.StringPtr("testString")
				deleteSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteSubnet(deleteSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteSubnetOptions model with no property values
				deleteSubnetOptionsModelNew := new(vpcclassicv1.DeleteSubnetOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteSubnet(deleteSubnetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSubnet(getSubnetOptions *GetSubnetOptions) - Operation response error`, func() {
		version := "testString"
		getSubnetPath := "/subnets/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getSubnetPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSubnet with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetSubnetOptions model
				getSubnetOptionsModel := new(vpcclassicv1.GetSubnetOptions)
				getSubnetOptionsModel.ID = core.StringPtr("testString")
				getSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetSubnet(getSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetSubnet(getSubnetOptions *GetSubnetOptions)`, func() {
		version := "testString"
		getSubnetPath := "/subnets/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getSubnetPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"available_ipv4_address_count": 15, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "ipv4_cidr_block": "10.0.0.0/24", "name": "my-subnet", "network_acl": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "public_gateway": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway"}, "status": "available", "total_ipv4_address_count": 256, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetSubnet successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetSubnet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSubnetOptions model
				getSubnetOptionsModel := new(vpcclassicv1.GetSubnetOptions)
				getSubnetOptionsModel.ID = core.StringPtr("testString")
				getSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetSubnet(getSubnetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetSubnet with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetSubnetOptions model
				getSubnetOptionsModel := new(vpcclassicv1.GetSubnetOptions)
				getSubnetOptionsModel.ID = core.StringPtr("testString")
				getSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetSubnet(getSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSubnetOptions model with no property values
				getSubnetOptionsModelNew := new(vpcclassicv1.GetSubnetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetSubnet(getSubnetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateSubnet(updateSubnetOptions *UpdateSubnetOptions) - Operation response error`, func() {
		version := "testString"
		updateSubnetPath := "/subnets/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateSubnetPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateSubnet with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the NetworkACLIdentityByID model
				networkACLIdentityModel := new(vpcclassicv1.NetworkACLIdentityByID)
				networkACLIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcclassicv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the UpdateSubnetOptions model
				updateSubnetOptionsModel := new(vpcclassicv1.UpdateSubnetOptions)
				updateSubnetOptionsModel.ID = core.StringPtr("testString")
				updateSubnetOptionsModel.Name = core.StringPtr("my-subnet")
				updateSubnetOptionsModel.NetworkACL = networkACLIdentityModel
				updateSubnetOptionsModel.PublicGateway = publicGatewayIdentityModel
				updateSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateSubnet(updateSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateSubnet(updateSubnetOptions *UpdateSubnetOptions)`, func() {
		version := "testString"
		updateSubnetPath := "/subnets/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateSubnetPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"available_ipv4_address_count": 15, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "ipv4_cidr_block": "10.0.0.0/24", "name": "my-subnet", "network_acl": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "public_gateway": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway"}, "status": "available", "total_ipv4_address_count": 256, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateSubnet successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateSubnet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the NetworkACLIdentityByID model
				networkACLIdentityModel := new(vpcclassicv1.NetworkACLIdentityByID)
				networkACLIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcclassicv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the UpdateSubnetOptions model
				updateSubnetOptionsModel := new(vpcclassicv1.UpdateSubnetOptions)
				updateSubnetOptionsModel.ID = core.StringPtr("testString")
				updateSubnetOptionsModel.Name = core.StringPtr("my-subnet")
				updateSubnetOptionsModel.NetworkACL = networkACLIdentityModel
				updateSubnetOptionsModel.PublicGateway = publicGatewayIdentityModel
				updateSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateSubnet(updateSubnetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateSubnet with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the NetworkACLIdentityByID model
				networkACLIdentityModel := new(vpcclassicv1.NetworkACLIdentityByID)
				networkACLIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcclassicv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the UpdateSubnetOptions model
				updateSubnetOptionsModel := new(vpcclassicv1.UpdateSubnetOptions)
				updateSubnetOptionsModel.ID = core.StringPtr("testString")
				updateSubnetOptionsModel.Name = core.StringPtr("my-subnet")
				updateSubnetOptionsModel.NetworkACL = networkACLIdentityModel
				updateSubnetOptionsModel.PublicGateway = publicGatewayIdentityModel
				updateSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateSubnet(updateSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateSubnetOptions model with no property values
				updateSubnetOptionsModelNew := new(vpcclassicv1.UpdateSubnetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateSubnet(updateSubnetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSubnetNetworkACL(getSubnetNetworkACLOptions *GetSubnetNetworkACLOptions) - Operation response error`, func() {
		version := "testString"
		getSubnetNetworkACLPath := "/subnets/testString/network_acl"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getSubnetNetworkACLPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSubnetNetworkACL with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetSubnetNetworkACLOptions model
				getSubnetNetworkACLOptionsModel := new(vpcclassicv1.GetSubnetNetworkACLOptions)
				getSubnetNetworkACLOptionsModel.ID = core.StringPtr("testString")
				getSubnetNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetSubnetNetworkACL(getSubnetNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetSubnetNetworkACL(getSubnetNetworkACLOptions *GetSubnetNetworkACLOptions)`, func() {
		version := "testString"
		getSubnetNetworkACLPath := "/subnets/testString/network_acl"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getSubnetNetworkACLPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "rules": [{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "port_max": 22, "port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke GetSubnetNetworkACL successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetSubnetNetworkACL(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSubnetNetworkACLOptions model
				getSubnetNetworkACLOptionsModel := new(vpcclassicv1.GetSubnetNetworkACLOptions)
				getSubnetNetworkACLOptionsModel.ID = core.StringPtr("testString")
				getSubnetNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetSubnetNetworkACL(getSubnetNetworkACLOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetSubnetNetworkACL with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetSubnetNetworkACLOptions model
				getSubnetNetworkACLOptionsModel := new(vpcclassicv1.GetSubnetNetworkACLOptions)
				getSubnetNetworkACLOptionsModel.ID = core.StringPtr("testString")
				getSubnetNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetSubnetNetworkACL(getSubnetNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSubnetNetworkACLOptions model with no property values
				getSubnetNetworkACLOptionsModelNew := new(vpcclassicv1.GetSubnetNetworkACLOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetSubnetNetworkACL(getSubnetNetworkACLOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceSubnetNetworkACL(replaceSubnetNetworkACLOptions *ReplaceSubnetNetworkACLOptions) - Operation response error`, func() {
		version := "testString"
		replaceSubnetNetworkACLPath := "/subnets/testString/network_acl"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(replaceSubnetNetworkACLPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceSubnetNetworkACL with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the NetworkACLIdentityByID model
				networkACLIdentityModel := new(vpcclassicv1.NetworkACLIdentityByID)
				networkACLIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the ReplaceSubnetNetworkACLOptions model
				replaceSubnetNetworkACLOptionsModel := new(vpcclassicv1.ReplaceSubnetNetworkACLOptions)
				replaceSubnetNetworkACLOptionsModel.ID = core.StringPtr("testString")
				replaceSubnetNetworkACLOptionsModel.NetworkACLIdentity = networkACLIdentityModel
				replaceSubnetNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ReplaceSubnetNetworkACL(replaceSubnetNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ReplaceSubnetNetworkACL(replaceSubnetNetworkACLOptions *ReplaceSubnetNetworkACLOptions)`, func() {
		version := "testString"
		replaceSubnetNetworkACLPath := "/subnets/testString/network_acl"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(replaceSubnetNetworkACLPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "rules": [{"action": "allow", "before": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "protocol": "udp", "source": "192.168.3.0/24", "port_max": 22, "port_min": 22, "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke ReplaceSubnetNetworkACL successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ReplaceSubnetNetworkACL(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the NetworkACLIdentityByID model
				networkACLIdentityModel := new(vpcclassicv1.NetworkACLIdentityByID)
				networkACLIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the ReplaceSubnetNetworkACLOptions model
				replaceSubnetNetworkACLOptionsModel := new(vpcclassicv1.ReplaceSubnetNetworkACLOptions)
				replaceSubnetNetworkACLOptionsModel.ID = core.StringPtr("testString")
				replaceSubnetNetworkACLOptionsModel.NetworkACLIdentity = networkACLIdentityModel
				replaceSubnetNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ReplaceSubnetNetworkACL(replaceSubnetNetworkACLOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ReplaceSubnetNetworkACL with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the NetworkACLIdentityByID model
				networkACLIdentityModel := new(vpcclassicv1.NetworkACLIdentityByID)
				networkACLIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the ReplaceSubnetNetworkACLOptions model
				replaceSubnetNetworkACLOptionsModel := new(vpcclassicv1.ReplaceSubnetNetworkACLOptions)
				replaceSubnetNetworkACLOptionsModel.ID = core.StringPtr("testString")
				replaceSubnetNetworkACLOptionsModel.NetworkACLIdentity = networkACLIdentityModel
				replaceSubnetNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ReplaceSubnetNetworkACL(replaceSubnetNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceSubnetNetworkACLOptions model with no property values
				replaceSubnetNetworkACLOptionsModelNew := new(vpcclassicv1.ReplaceSubnetNetworkACLOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ReplaceSubnetNetworkACL(replaceSubnetNetworkACLOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UnsetSubnetPublicGateway(unsetSubnetPublicGatewayOptions *UnsetSubnetPublicGatewayOptions)`, func() {
		version := "testString"
		unsetSubnetPublicGatewayPath := "/subnets/testString/public_gateway"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(unsetSubnetPublicGatewayPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke UnsetSubnetPublicGateway successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.UnsetSubnetPublicGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the UnsetSubnetPublicGatewayOptions model
				unsetSubnetPublicGatewayOptionsModel := new(vpcclassicv1.UnsetSubnetPublicGatewayOptions)
				unsetSubnetPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				unsetSubnetPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.UnsetSubnetPublicGateway(unsetSubnetPublicGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke UnsetSubnetPublicGateway with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UnsetSubnetPublicGatewayOptions model
				unsetSubnetPublicGatewayOptionsModel := new(vpcclassicv1.UnsetSubnetPublicGatewayOptions)
				unsetSubnetPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				unsetSubnetPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.UnsetSubnetPublicGateway(unsetSubnetPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the UnsetSubnetPublicGatewayOptions model with no property values
				unsetSubnetPublicGatewayOptionsModelNew := new(vpcclassicv1.UnsetSubnetPublicGatewayOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.UnsetSubnetPublicGateway(unsetSubnetPublicGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSubnetPublicGateway(getSubnetPublicGatewayOptions *GetSubnetPublicGatewayOptions) - Operation response error`, func() {
		version := "testString"
		getSubnetPublicGatewayPath := "/subnets/testString/public_gateway"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getSubnetPublicGatewayPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSubnetPublicGateway with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetSubnetPublicGatewayOptions model
				getSubnetPublicGatewayOptionsModel := new(vpcclassicv1.GetSubnetPublicGatewayOptions)
				getSubnetPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				getSubnetPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetSubnetPublicGateway(getSubnetPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetSubnetPublicGateway(getSubnetPublicGatewayOptions *GetSubnetPublicGatewayOptions)`, func() {
		version := "testString"
		getSubnetPublicGatewayPath := "/subnets/testString/public_gateway"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getSubnetPublicGatewayPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetSubnetPublicGateway successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetSubnetPublicGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSubnetPublicGatewayOptions model
				getSubnetPublicGatewayOptionsModel := new(vpcclassicv1.GetSubnetPublicGatewayOptions)
				getSubnetPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				getSubnetPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetSubnetPublicGateway(getSubnetPublicGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetSubnetPublicGateway with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetSubnetPublicGatewayOptions model
				getSubnetPublicGatewayOptionsModel := new(vpcclassicv1.GetSubnetPublicGatewayOptions)
				getSubnetPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				getSubnetPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetSubnetPublicGateway(getSubnetPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSubnetPublicGatewayOptions model with no property values
				getSubnetPublicGatewayOptionsModelNew := new(vpcclassicv1.GetSubnetPublicGatewayOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetSubnetPublicGateway(getSubnetPublicGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SetSubnetPublicGateway(setSubnetPublicGatewayOptions *SetSubnetPublicGatewayOptions) - Operation response error`, func() {
		version := "testString"
		setSubnetPublicGatewayPath := "/subnets/testString/public_gateway"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(setSubnetPublicGatewayPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke SetSubnetPublicGateway with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcclassicv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the SetSubnetPublicGatewayOptions model
				setSubnetPublicGatewayOptionsModel := new(vpcclassicv1.SetSubnetPublicGatewayOptions)
				setSubnetPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				setSubnetPublicGatewayOptionsModel.PublicGatewayIdentity = publicGatewayIdentityModel
				setSubnetPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.SetSubnetPublicGateway(setSubnetPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`SetSubnetPublicGateway(setSubnetPublicGatewayOptions *SetSubnetPublicGatewayOptions)`, func() {
		version := "testString"
		setSubnetPublicGatewayPath := "/subnets/testString/public_gateway"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(setSubnetPublicGatewayPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke SetSubnetPublicGateway successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.SetSubnetPublicGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcclassicv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the SetSubnetPublicGatewayOptions model
				setSubnetPublicGatewayOptionsModel := new(vpcclassicv1.SetSubnetPublicGatewayOptions)
				setSubnetPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				setSubnetPublicGatewayOptionsModel.PublicGatewayIdentity = publicGatewayIdentityModel
				setSubnetPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.SetSubnetPublicGateway(setSubnetPublicGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke SetSubnetPublicGateway with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcclassicv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the SetSubnetPublicGatewayOptions model
				setSubnetPublicGatewayOptionsModel := new(vpcclassicv1.SetSubnetPublicGatewayOptions)
				setSubnetPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				setSubnetPublicGatewayOptionsModel.PublicGatewayIdentity = publicGatewayIdentityModel
				setSubnetPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.SetSubnetPublicGateway(setSubnetPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the SetSubnetPublicGatewayOptions model with no property values
				setSubnetPublicGatewayOptionsModelNew := new(vpcclassicv1.SetSubnetPublicGatewayOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.SetSubnetPublicGateway(setSubnetPublicGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			Expect(testService).ToNot(BeNil())
			Expect(testServiceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				URL:     "{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				URL:     "https://vpcclassicv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_URL":       "https://vpcclassicv1/api",
				"VPC_CLASSIC_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					URL:     "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					Version: core.StringPtr(version),
				})
				err := testService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_URL":       "https://vpcclassicv1/api",
				"VPC_CLASSIC_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
				URL:     "{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`ListVpcs(listVpcsOptions *ListVpcsOptions) - Operation response error`, func() {
		version := "testString"
		listVpcsPath := "/vpcs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVpcsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					// TODO: Add check for classic_access query parameter

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVpcs with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVpcsOptions model
				listVpcsOptionsModel := new(vpcclassicv1.ListVpcsOptions)
				listVpcsOptionsModel.Start = core.StringPtr("testString")
				listVpcsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVpcsOptionsModel.ClassicAccess = core.BoolPtr(true)
				listVpcsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListVpcs(listVpcsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListVpcs(listVpcsOptions *ListVpcsOptions)`, func() {
		version := "testString"
		listVpcsPath := "/vpcs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVpcsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					// TODO: Add check for classic_access query parameter

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "vpcs": [{"classic_access": false, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "default_network_acl": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "default_security_group": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "status": "available"}]}`)
				}))
			})
			It(`Invoke ListVpcs successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListVpcs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVpcsOptions model
				listVpcsOptionsModel := new(vpcclassicv1.ListVpcsOptions)
				listVpcsOptionsModel.Start = core.StringPtr("testString")
				listVpcsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVpcsOptionsModel.ClassicAccess = core.BoolPtr(true)
				listVpcsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListVpcs(listVpcsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListVpcs with error: Operation request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVpcsOptions model
				listVpcsOptionsModel := new(vpcclassicv1.ListVpcsOptions)
				listVpcsOptionsModel.Start = core.StringPtr("testString")
				listVpcsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVpcsOptionsModel.ClassicAccess = core.BoolPtr(true)
				listVpcsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListVpcs(listVpcsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVPC(createVPCOptions *CreateVPCOptions) - Operation response error`, func() {
		version := "testString"
		createVPCPath := "/vpcs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createVPCPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateVPC with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateVPCOptions model
				createVPCOptionsModel := new(vpcclassicv1.CreateVPCOptions)
				createVPCOptionsModel.AddressPrefixManagement = core.StringPtr("manual")
				createVPCOptionsModel.ClassicAccess = core.BoolPtr(false)
				createVPCOptionsModel.Name = core.StringPtr("my-vpc")
				createVPCOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createVPCOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateVPC(createVPCOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateVPC(createVPCOptions *CreateVPCOptions)`, func() {
		version := "testString"
		createVPCPath := "/vpcs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createVPCPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"classic_access": false, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "default_network_acl": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "default_security_group": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "status": "available"}`)
				}))
			})
			It(`Invoke CreateVPC successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateVPC(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateVPCOptions model
				createVPCOptionsModel := new(vpcclassicv1.CreateVPCOptions)
				createVPCOptionsModel.AddressPrefixManagement = core.StringPtr("manual")
				createVPCOptionsModel.ClassicAccess = core.BoolPtr(false)
				createVPCOptionsModel.Name = core.StringPtr("my-vpc")
				createVPCOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createVPCOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateVPC(createVPCOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateVPC with error: Operation request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateVPCOptions model
				createVPCOptionsModel := new(vpcclassicv1.CreateVPCOptions)
				createVPCOptionsModel.AddressPrefixManagement = core.StringPtr("manual")
				createVPCOptionsModel.ClassicAccess = core.BoolPtr(false)
				createVPCOptionsModel.Name = core.StringPtr("my-vpc")
				createVPCOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createVPCOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateVPC(createVPCOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteVPC(deleteVPCOptions *DeleteVPCOptions)`, func() {
		version := "testString"
		deleteVPCPath := "/vpcs/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteVPCPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteVPC successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteVPC(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteVPCOptions model
				deleteVPCOptionsModel := new(vpcclassicv1.DeleteVPCOptions)
				deleteVPCOptionsModel.ID = core.StringPtr("testString")
				deleteVPCOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteVPC(deleteVPCOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteVPC with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteVPCOptions model
				deleteVPCOptionsModel := new(vpcclassicv1.DeleteVPCOptions)
				deleteVPCOptionsModel.ID = core.StringPtr("testString")
				deleteVPCOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteVPC(deleteVPCOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteVPCOptions model with no property values
				deleteVPCOptionsModelNew := new(vpcclassicv1.DeleteVPCOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteVPC(deleteVPCOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVPC(getVPCOptions *GetVPCOptions) - Operation response error`, func() {
		version := "testString"
		getVPCPath := "/vpcs/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVPCPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVPC with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVPCOptions model
				getVPCOptionsModel := new(vpcclassicv1.GetVPCOptions)
				getVPCOptionsModel.ID = core.StringPtr("testString")
				getVPCOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetVPC(getVPCOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetVPC(getVPCOptions *GetVPCOptions)`, func() {
		version := "testString"
		getVPCPath := "/vpcs/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVPCPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"classic_access": false, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "default_network_acl": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "default_security_group": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "status": "available"}`)
				}))
			})
			It(`Invoke GetVPC successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetVPC(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVPCOptions model
				getVPCOptionsModel := new(vpcclassicv1.GetVPCOptions)
				getVPCOptionsModel.ID = core.StringPtr("testString")
				getVPCOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetVPC(getVPCOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetVPC with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVPCOptions model
				getVPCOptionsModel := new(vpcclassicv1.GetVPCOptions)
				getVPCOptionsModel.ID = core.StringPtr("testString")
				getVPCOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetVPC(getVPCOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVPCOptions model with no property values
				getVPCOptionsModelNew := new(vpcclassicv1.GetVPCOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetVPC(getVPCOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVPC(updateVPCOptions *UpdateVPCOptions) - Operation response error`, func() {
		version := "testString"
		updateVPCPath := "/vpcs/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateVPCPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateVPC with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateVPCOptions model
				updateVPCOptionsModel := new(vpcclassicv1.UpdateVPCOptions)
				updateVPCOptionsModel.ID = core.StringPtr("testString")
				updateVPCOptionsModel.Name = core.StringPtr("my-vpc")
				updateVPCOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateVPC(updateVPCOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateVPC(updateVPCOptions *UpdateVPCOptions)`, func() {
		version := "testString"
		updateVPCPath := "/vpcs/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateVPCPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"classic_access": false, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "default_network_acl": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "default_security_group": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "status": "available"}`)
				}))
			})
			It(`Invoke UpdateVPC successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateVPC(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateVPCOptions model
				updateVPCOptionsModel := new(vpcclassicv1.UpdateVPCOptions)
				updateVPCOptionsModel.ID = core.StringPtr("testString")
				updateVPCOptionsModel.Name = core.StringPtr("my-vpc")
				updateVPCOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateVPC(updateVPCOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateVPC with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateVPCOptions model
				updateVPCOptionsModel := new(vpcclassicv1.UpdateVPCOptions)
				updateVPCOptionsModel.ID = core.StringPtr("testString")
				updateVPCOptionsModel.Name = core.StringPtr("my-vpc")
				updateVPCOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateVPC(updateVPCOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateVPCOptions model with no property values
				updateVPCOptionsModelNew := new(vpcclassicv1.UpdateVPCOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateVPC(updateVPCOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVPCDefaultSecurityGroup(getVPCDefaultSecurityGroupOptions *GetVPCDefaultSecurityGroupOptions) - Operation response error`, func() {
		version := "testString"
		getVPCDefaultSecurityGroupPath := "/vpcs/testString/default_security_group"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVPCDefaultSecurityGroupPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVPCDefaultSecurityGroup with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVPCDefaultSecurityGroupOptions model
				getVPCDefaultSecurityGroupOptionsModel := new(vpcclassicv1.GetVPCDefaultSecurityGroupOptions)
				getVPCDefaultSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				getVPCDefaultSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetVPCDefaultSecurityGroup(getVPCDefaultSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetVPCDefaultSecurityGroup(getVPCDefaultSecurityGroupOptions *GetVPCDefaultSecurityGroupOptions)`, func() {
		version := "testString"
		getVPCDefaultSecurityGroupPath := "/vpcs/testString/default_security_group"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVPCDefaultSecurityGroupPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "observant-chip-emphatic-engraver", "rules": [{"direction": "inbound", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "protocol": "all", "remote": {"address": "192.168.3.4"}}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke GetVPCDefaultSecurityGroup successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetVPCDefaultSecurityGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVPCDefaultSecurityGroupOptions model
				getVPCDefaultSecurityGroupOptionsModel := new(vpcclassicv1.GetVPCDefaultSecurityGroupOptions)
				getVPCDefaultSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				getVPCDefaultSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetVPCDefaultSecurityGroup(getVPCDefaultSecurityGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetVPCDefaultSecurityGroup with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVPCDefaultSecurityGroupOptions model
				getVPCDefaultSecurityGroupOptionsModel := new(vpcclassicv1.GetVPCDefaultSecurityGroupOptions)
				getVPCDefaultSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				getVPCDefaultSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetVPCDefaultSecurityGroup(getVPCDefaultSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVPCDefaultSecurityGroupOptions model with no property values
				getVPCDefaultSecurityGroupOptionsModelNew := new(vpcclassicv1.GetVPCDefaultSecurityGroupOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetVPCDefaultSecurityGroup(getVPCDefaultSecurityGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVPCAddressPrefixes(listVPCAddressPrefixesOptions *ListVPCAddressPrefixesOptions) - Operation response error`, func() {
		version := "testString"
		listVPCAddressPrefixesPath := "/vpcs/testString/address_prefixes"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVPCAddressPrefixesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVPCAddressPrefixes with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVPCAddressPrefixesOptions model
				listVPCAddressPrefixesOptionsModel := new(vpcclassicv1.ListVPCAddressPrefixesOptions)
				listVPCAddressPrefixesOptionsModel.VPCID = core.StringPtr("testString")
				listVPCAddressPrefixesOptionsModel.Start = core.StringPtr("testString")
				listVPCAddressPrefixesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPCAddressPrefixesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListVPCAddressPrefixes(listVPCAddressPrefixesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListVPCAddressPrefixes(listVPCAddressPrefixesOptions *ListVPCAddressPrefixesOptions)`, func() {
		version := "testString"
		listVPCAddressPrefixesPath := "/vpcs/testString/address_prefixes"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVPCAddressPrefixesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"address_prefixes": [{"cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00", "has_subnets": true, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "name": "my-address-prefix-2", "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/a4e28308-8ee7-46ab-8108-9f881f22bdbf/address_prefixes?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/a4e28308-8ee7-46ab-8108-9f881f22bdbf/address_prefixes?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}}`)
				}))
			})
			It(`Invoke ListVPCAddressPrefixes successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListVPCAddressPrefixes(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVPCAddressPrefixesOptions model
				listVPCAddressPrefixesOptionsModel := new(vpcclassicv1.ListVPCAddressPrefixesOptions)
				listVPCAddressPrefixesOptionsModel.VPCID = core.StringPtr("testString")
				listVPCAddressPrefixesOptionsModel.Start = core.StringPtr("testString")
				listVPCAddressPrefixesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPCAddressPrefixesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListVPCAddressPrefixes(listVPCAddressPrefixesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListVPCAddressPrefixes with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVPCAddressPrefixesOptions model
				listVPCAddressPrefixesOptionsModel := new(vpcclassicv1.ListVPCAddressPrefixesOptions)
				listVPCAddressPrefixesOptionsModel.VPCID = core.StringPtr("testString")
				listVPCAddressPrefixesOptionsModel.Start = core.StringPtr("testString")
				listVPCAddressPrefixesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPCAddressPrefixesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListVPCAddressPrefixes(listVPCAddressPrefixesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListVPCAddressPrefixesOptions model with no property values
				listVPCAddressPrefixesOptionsModelNew := new(vpcclassicv1.ListVPCAddressPrefixesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListVPCAddressPrefixes(listVPCAddressPrefixesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVPCAddressPrefix(createVPCAddressPrefixOptions *CreateVPCAddressPrefixOptions) - Operation response error`, func() {
		version := "testString"
		createVPCAddressPrefixPath := "/vpcs/testString/address_prefixes"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createVPCAddressPrefixPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateVPCAddressPrefix with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcclassicv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreateVPCAddressPrefixOptions model
				createVPCAddressPrefixOptionsModel := new(vpcclassicv1.CreateVPCAddressPrefixOptions)
				createVPCAddressPrefixOptionsModel.VPCID = core.StringPtr("testString")
				createVPCAddressPrefixOptionsModel.CIDR = core.StringPtr("10.0.0.0/24")
				createVPCAddressPrefixOptionsModel.Zone = zoneIdentityModel
				createVPCAddressPrefixOptionsModel.IsDefault = core.BoolPtr(true)
				createVPCAddressPrefixOptionsModel.Name = core.StringPtr("my-address-prefix-2")
				createVPCAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateVPCAddressPrefix(createVPCAddressPrefixOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateVPCAddressPrefix(createVPCAddressPrefixOptions *CreateVPCAddressPrefixOptions)`, func() {
		version := "testString"
		createVPCAddressPrefixPath := "/vpcs/testString/address_prefixes"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createVPCAddressPrefixPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00", "has_subnets": true, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "name": "my-address-prefix-2", "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreateVPCAddressPrefix successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateVPCAddressPrefix(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcclassicv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreateVPCAddressPrefixOptions model
				createVPCAddressPrefixOptionsModel := new(vpcclassicv1.CreateVPCAddressPrefixOptions)
				createVPCAddressPrefixOptionsModel.VPCID = core.StringPtr("testString")
				createVPCAddressPrefixOptionsModel.CIDR = core.StringPtr("10.0.0.0/24")
				createVPCAddressPrefixOptionsModel.Zone = zoneIdentityModel
				createVPCAddressPrefixOptionsModel.IsDefault = core.BoolPtr(true)
				createVPCAddressPrefixOptionsModel.Name = core.StringPtr("my-address-prefix-2")
				createVPCAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateVPCAddressPrefix(createVPCAddressPrefixOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateVPCAddressPrefix with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcclassicv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreateVPCAddressPrefixOptions model
				createVPCAddressPrefixOptionsModel := new(vpcclassicv1.CreateVPCAddressPrefixOptions)
				createVPCAddressPrefixOptionsModel.VPCID = core.StringPtr("testString")
				createVPCAddressPrefixOptionsModel.CIDR = core.StringPtr("10.0.0.0/24")
				createVPCAddressPrefixOptionsModel.Zone = zoneIdentityModel
				createVPCAddressPrefixOptionsModel.IsDefault = core.BoolPtr(true)
				createVPCAddressPrefixOptionsModel.Name = core.StringPtr("my-address-prefix-2")
				createVPCAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateVPCAddressPrefix(createVPCAddressPrefixOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateVPCAddressPrefixOptions model with no property values
				createVPCAddressPrefixOptionsModelNew := new(vpcclassicv1.CreateVPCAddressPrefixOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateVPCAddressPrefix(createVPCAddressPrefixOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteVPCAddressPrefix(deleteVPCAddressPrefixOptions *DeleteVPCAddressPrefixOptions)`, func() {
		version := "testString"
		deleteVPCAddressPrefixPath := "/vpcs/testString/address_prefixes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteVPCAddressPrefixPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteVPCAddressPrefix successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteVPCAddressPrefix(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteVPCAddressPrefixOptions model
				deleteVPCAddressPrefixOptionsModel := new(vpcclassicv1.DeleteVPCAddressPrefixOptions)
				deleteVPCAddressPrefixOptionsModel.VPCID = core.StringPtr("testString")
				deleteVPCAddressPrefixOptionsModel.ID = core.StringPtr("testString")
				deleteVPCAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteVPCAddressPrefix(deleteVPCAddressPrefixOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteVPCAddressPrefix with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteVPCAddressPrefixOptions model
				deleteVPCAddressPrefixOptionsModel := new(vpcclassicv1.DeleteVPCAddressPrefixOptions)
				deleteVPCAddressPrefixOptionsModel.VPCID = core.StringPtr("testString")
				deleteVPCAddressPrefixOptionsModel.ID = core.StringPtr("testString")
				deleteVPCAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteVPCAddressPrefix(deleteVPCAddressPrefixOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteVPCAddressPrefixOptions model with no property values
				deleteVPCAddressPrefixOptionsModelNew := new(vpcclassicv1.DeleteVPCAddressPrefixOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteVPCAddressPrefix(deleteVPCAddressPrefixOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVPCAddressPrefix(getVPCAddressPrefixOptions *GetVPCAddressPrefixOptions) - Operation response error`, func() {
		version := "testString"
		getVPCAddressPrefixPath := "/vpcs/testString/address_prefixes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVPCAddressPrefixPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVPCAddressPrefix with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVPCAddressPrefixOptions model
				getVPCAddressPrefixOptionsModel := new(vpcclassicv1.GetVPCAddressPrefixOptions)
				getVPCAddressPrefixOptionsModel.VPCID = core.StringPtr("testString")
				getVPCAddressPrefixOptionsModel.ID = core.StringPtr("testString")
				getVPCAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetVPCAddressPrefix(getVPCAddressPrefixOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetVPCAddressPrefix(getVPCAddressPrefixOptions *GetVPCAddressPrefixOptions)`, func() {
		version := "testString"
		getVPCAddressPrefixPath := "/vpcs/testString/address_prefixes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVPCAddressPrefixPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00", "has_subnets": true, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "name": "my-address-prefix-2", "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetVPCAddressPrefix successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetVPCAddressPrefix(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVPCAddressPrefixOptions model
				getVPCAddressPrefixOptionsModel := new(vpcclassicv1.GetVPCAddressPrefixOptions)
				getVPCAddressPrefixOptionsModel.VPCID = core.StringPtr("testString")
				getVPCAddressPrefixOptionsModel.ID = core.StringPtr("testString")
				getVPCAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetVPCAddressPrefix(getVPCAddressPrefixOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetVPCAddressPrefix with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVPCAddressPrefixOptions model
				getVPCAddressPrefixOptionsModel := new(vpcclassicv1.GetVPCAddressPrefixOptions)
				getVPCAddressPrefixOptionsModel.VPCID = core.StringPtr("testString")
				getVPCAddressPrefixOptionsModel.ID = core.StringPtr("testString")
				getVPCAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetVPCAddressPrefix(getVPCAddressPrefixOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVPCAddressPrefixOptions model with no property values
				getVPCAddressPrefixOptionsModelNew := new(vpcclassicv1.GetVPCAddressPrefixOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetVPCAddressPrefix(getVPCAddressPrefixOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVPCAddressPrefix(updateVPCAddressPrefixOptions *UpdateVPCAddressPrefixOptions) - Operation response error`, func() {
		version := "testString"
		updateVPCAddressPrefixPath := "/vpcs/testString/address_prefixes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateVPCAddressPrefixPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateVPCAddressPrefix with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateVPCAddressPrefixOptions model
				updateVPCAddressPrefixOptionsModel := new(vpcclassicv1.UpdateVPCAddressPrefixOptions)
				updateVPCAddressPrefixOptionsModel.VPCID = core.StringPtr("testString")
				updateVPCAddressPrefixOptionsModel.ID = core.StringPtr("testString")
				updateVPCAddressPrefixOptionsModel.IsDefault = core.BoolPtr(false)
				updateVPCAddressPrefixOptionsModel.Name = core.StringPtr("my-address-prefix-2")
				updateVPCAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateVPCAddressPrefix(updateVPCAddressPrefixOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateVPCAddressPrefix(updateVPCAddressPrefixOptions *UpdateVPCAddressPrefixOptions)`, func() {
		version := "testString"
		updateVPCAddressPrefixPath := "/vpcs/testString/address_prefixes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateVPCAddressPrefixPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00", "has_subnets": true, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "name": "my-address-prefix-2", "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateVPCAddressPrefix successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateVPCAddressPrefix(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateVPCAddressPrefixOptions model
				updateVPCAddressPrefixOptionsModel := new(vpcclassicv1.UpdateVPCAddressPrefixOptions)
				updateVPCAddressPrefixOptionsModel.VPCID = core.StringPtr("testString")
				updateVPCAddressPrefixOptionsModel.ID = core.StringPtr("testString")
				updateVPCAddressPrefixOptionsModel.IsDefault = core.BoolPtr(false)
				updateVPCAddressPrefixOptionsModel.Name = core.StringPtr("my-address-prefix-2")
				updateVPCAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateVPCAddressPrefix(updateVPCAddressPrefixOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateVPCAddressPrefix with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateVPCAddressPrefixOptions model
				updateVPCAddressPrefixOptionsModel := new(vpcclassicv1.UpdateVPCAddressPrefixOptions)
				updateVPCAddressPrefixOptionsModel.VPCID = core.StringPtr("testString")
				updateVPCAddressPrefixOptionsModel.ID = core.StringPtr("testString")
				updateVPCAddressPrefixOptionsModel.IsDefault = core.BoolPtr(false)
				updateVPCAddressPrefixOptionsModel.Name = core.StringPtr("my-address-prefix-2")
				updateVPCAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateVPCAddressPrefix(updateVPCAddressPrefixOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateVPCAddressPrefixOptions model with no property values
				updateVPCAddressPrefixOptionsModelNew := new(vpcclassicv1.UpdateVPCAddressPrefixOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateVPCAddressPrefix(updateVPCAddressPrefixOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVPCRoutes(listVPCRoutesOptions *ListVPCRoutesOptions) - Operation response error`, func() {
		version := "testString"
		listVPCRoutesPath := "/vpcs/testString/routes"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVPCRoutesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["zone.name"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVPCRoutes with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVPCRoutesOptions model
				listVPCRoutesOptionsModel := new(vpcclassicv1.ListVPCRoutesOptions)
				listVPCRoutesOptionsModel.VPCID = core.StringPtr("testString")
				listVPCRoutesOptionsModel.ZoneName = core.StringPtr("testString")
				listVPCRoutesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListVPCRoutes(listVPCRoutesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListVPCRoutes(listVPCRoutesOptions *ListVPCRoutesOptions)`, func() {
		version := "testString"
		listVPCRoutesPath := "/vpcs/testString/routes"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVPCRoutesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["zone.name"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"routes": [{"created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "lifecycle_state": "stable", "name": "my-route-1", "next_hop": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}]}`)
				}))
			})
			It(`Invoke ListVPCRoutes successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListVPCRoutes(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVPCRoutesOptions model
				listVPCRoutesOptionsModel := new(vpcclassicv1.ListVPCRoutesOptions)
				listVPCRoutesOptionsModel.VPCID = core.StringPtr("testString")
				listVPCRoutesOptionsModel.ZoneName = core.StringPtr("testString")
				listVPCRoutesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListVPCRoutes(listVPCRoutesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListVPCRoutes with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVPCRoutesOptions model
				listVPCRoutesOptionsModel := new(vpcclassicv1.ListVPCRoutesOptions)
				listVPCRoutesOptionsModel.VPCID = core.StringPtr("testString")
				listVPCRoutesOptionsModel.ZoneName = core.StringPtr("testString")
				listVPCRoutesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListVPCRoutes(listVPCRoutesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListVPCRoutesOptions model with no property values
				listVPCRoutesOptionsModelNew := new(vpcclassicv1.ListVPCRoutesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListVPCRoutes(listVPCRoutesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVPCRoute(createVPCRouteOptions *CreateVPCRouteOptions) - Operation response error`, func() {
		version := "testString"
		createVPCRoutePath := "/vpcs/testString/routes"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createVPCRoutePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateVPCRoute with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcclassicv1.RouteNextHopPrototypeRouteNextHopIP)
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcclassicv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreateVPCRouteOptions model
				createVPCRouteOptionsModel := new(vpcclassicv1.CreateVPCRouteOptions)
				createVPCRouteOptionsModel.VPCID = core.StringPtr("testString")
				createVPCRouteOptionsModel.Destination = core.StringPtr("192.168.3.0/24")
				createVPCRouteOptionsModel.NextHop = routeNextHopPrototypeModel
				createVPCRouteOptionsModel.Zone = zoneIdentityModel
				createVPCRouteOptionsModel.Name = core.StringPtr("my-route-2")
				createVPCRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateVPCRoute(createVPCRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateVPCRoute(createVPCRouteOptions *CreateVPCRouteOptions)`, func() {
		version := "testString"
		createVPCRoutePath := "/vpcs/testString/routes"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createVPCRoutePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "lifecycle_state": "stable", "name": "my-route-1", "next_hop": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreateVPCRoute successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateVPCRoute(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcclassicv1.RouteNextHopPrototypeRouteNextHopIP)
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcclassicv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreateVPCRouteOptions model
				createVPCRouteOptionsModel := new(vpcclassicv1.CreateVPCRouteOptions)
				createVPCRouteOptionsModel.VPCID = core.StringPtr("testString")
				createVPCRouteOptionsModel.Destination = core.StringPtr("192.168.3.0/24")
				createVPCRouteOptionsModel.NextHop = routeNextHopPrototypeModel
				createVPCRouteOptionsModel.Zone = zoneIdentityModel
				createVPCRouteOptionsModel.Name = core.StringPtr("my-route-2")
				createVPCRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateVPCRoute(createVPCRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateVPCRoute with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcclassicv1.RouteNextHopPrototypeRouteNextHopIP)
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcclassicv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreateVPCRouteOptions model
				createVPCRouteOptionsModel := new(vpcclassicv1.CreateVPCRouteOptions)
				createVPCRouteOptionsModel.VPCID = core.StringPtr("testString")
				createVPCRouteOptionsModel.Destination = core.StringPtr("192.168.3.0/24")
				createVPCRouteOptionsModel.NextHop = routeNextHopPrototypeModel
				createVPCRouteOptionsModel.Zone = zoneIdentityModel
				createVPCRouteOptionsModel.Name = core.StringPtr("my-route-2")
				createVPCRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateVPCRoute(createVPCRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateVPCRouteOptions model with no property values
				createVPCRouteOptionsModelNew := new(vpcclassicv1.CreateVPCRouteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateVPCRoute(createVPCRouteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteVPCRoute(deleteVPCRouteOptions *DeleteVPCRouteOptions)`, func() {
		version := "testString"
		deleteVPCRoutePath := "/vpcs/testString/routes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteVPCRoutePath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteVPCRoute successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteVPCRoute(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteVPCRouteOptions model
				deleteVPCRouteOptionsModel := new(vpcclassicv1.DeleteVPCRouteOptions)
				deleteVPCRouteOptionsModel.VPCID = core.StringPtr("testString")
				deleteVPCRouteOptionsModel.ID = core.StringPtr("testString")
				deleteVPCRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteVPCRoute(deleteVPCRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteVPCRoute with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteVPCRouteOptions model
				deleteVPCRouteOptionsModel := new(vpcclassicv1.DeleteVPCRouteOptions)
				deleteVPCRouteOptionsModel.VPCID = core.StringPtr("testString")
				deleteVPCRouteOptionsModel.ID = core.StringPtr("testString")
				deleteVPCRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteVPCRoute(deleteVPCRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteVPCRouteOptions model with no property values
				deleteVPCRouteOptionsModelNew := new(vpcclassicv1.DeleteVPCRouteOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteVPCRoute(deleteVPCRouteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVPCRoute(getVPCRouteOptions *GetVPCRouteOptions) - Operation response error`, func() {
		version := "testString"
		getVPCRoutePath := "/vpcs/testString/routes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVPCRoutePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVPCRoute with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVPCRouteOptions model
				getVPCRouteOptionsModel := new(vpcclassicv1.GetVPCRouteOptions)
				getVPCRouteOptionsModel.VPCID = core.StringPtr("testString")
				getVPCRouteOptionsModel.ID = core.StringPtr("testString")
				getVPCRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetVPCRoute(getVPCRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetVPCRoute(getVPCRouteOptions *GetVPCRouteOptions)`, func() {
		version := "testString"
		getVPCRoutePath := "/vpcs/testString/routes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVPCRoutePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "lifecycle_state": "stable", "name": "my-route-1", "next_hop": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetVPCRoute successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetVPCRoute(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVPCRouteOptions model
				getVPCRouteOptionsModel := new(vpcclassicv1.GetVPCRouteOptions)
				getVPCRouteOptionsModel.VPCID = core.StringPtr("testString")
				getVPCRouteOptionsModel.ID = core.StringPtr("testString")
				getVPCRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetVPCRoute(getVPCRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetVPCRoute with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVPCRouteOptions model
				getVPCRouteOptionsModel := new(vpcclassicv1.GetVPCRouteOptions)
				getVPCRouteOptionsModel.VPCID = core.StringPtr("testString")
				getVPCRouteOptionsModel.ID = core.StringPtr("testString")
				getVPCRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetVPCRoute(getVPCRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVPCRouteOptions model with no property values
				getVPCRouteOptionsModelNew := new(vpcclassicv1.GetVPCRouteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetVPCRoute(getVPCRouteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVPCRoute(updateVPCRouteOptions *UpdateVPCRouteOptions) - Operation response error`, func() {
		version := "testString"
		updateVPCRoutePath := "/vpcs/testString/routes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateVPCRoutePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateVPCRoute with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateVPCRouteOptions model
				updateVPCRouteOptionsModel := new(vpcclassicv1.UpdateVPCRouteOptions)
				updateVPCRouteOptionsModel.VPCID = core.StringPtr("testString")
				updateVPCRouteOptionsModel.ID = core.StringPtr("testString")
				updateVPCRouteOptionsModel.Name = core.StringPtr("my-route-2")
				updateVPCRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateVPCRoute(updateVPCRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateVPCRoute(updateVPCRouteOptions *UpdateVPCRouteOptions)`, func() {
		version := "testString"
		updateVPCRoutePath := "/vpcs/testString/routes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateVPCRoutePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"created_at": "2019-01-01T12:00:00", "destination": "192.168.3.0/24", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "lifecycle_state": "stable", "name": "my-route-1", "next_hop": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateVPCRoute successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateVPCRoute(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateVPCRouteOptions model
				updateVPCRouteOptionsModel := new(vpcclassicv1.UpdateVPCRouteOptions)
				updateVPCRouteOptionsModel.VPCID = core.StringPtr("testString")
				updateVPCRouteOptionsModel.ID = core.StringPtr("testString")
				updateVPCRouteOptionsModel.Name = core.StringPtr("my-route-2")
				updateVPCRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateVPCRoute(updateVPCRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateVPCRoute with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateVPCRouteOptions model
				updateVPCRouteOptionsModel := new(vpcclassicv1.UpdateVPCRouteOptions)
				updateVPCRouteOptionsModel.VPCID = core.StringPtr("testString")
				updateVPCRouteOptionsModel.ID = core.StringPtr("testString")
				updateVPCRouteOptionsModel.Name = core.StringPtr("my-route-2")
				updateVPCRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateVPCRoute(updateVPCRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateVPCRouteOptions model with no property values
				updateVPCRouteOptionsModelNew := new(vpcclassicv1.UpdateVPCRouteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateVPCRoute(updateVPCRouteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			Expect(testService).ToNot(BeNil())
			Expect(testServiceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				URL:     "{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				URL:     "https://vpcclassicv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_URL":       "https://vpcclassicv1/api",
				"VPC_CLASSIC_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					URL:     "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					Version: core.StringPtr(version),
				})
				err := testService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_URL":       "https://vpcclassicv1/api",
				"VPC_CLASSIC_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
				URL:     "{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`ListIkePolicies(listIkePoliciesOptions *ListIkePoliciesOptions) - Operation response error`, func() {
		version := "testString"
		listIkePoliciesPath := "/ike_policies"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listIkePoliciesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListIkePolicies with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListIkePoliciesOptions model
				listIkePoliciesOptionsModel := new(vpcclassicv1.ListIkePoliciesOptions)
				listIkePoliciesOptionsModel.Start = core.StringPtr("testString")
				listIkePoliciesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listIkePoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListIkePolicies(listIkePoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListIkePolicies(listIkePoliciesOptions *ListIkePoliciesOptions)`, func() {
		version := "testString"
		listIkePoliciesPath := "/ike_policies"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listIkePoliciesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies?limit=20"}, "ike_policies": [{"authentication_algorithm": "md5", "connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "dh_group": 2, "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "ike_version": 1, "key_lifetime": 28800, "name": "my-ike-policy", "negotiation_mode": "main", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListIkePolicies successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListIkePolicies(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListIkePoliciesOptions model
				listIkePoliciesOptionsModel := new(vpcclassicv1.ListIkePoliciesOptions)
				listIkePoliciesOptionsModel.Start = core.StringPtr("testString")
				listIkePoliciesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listIkePoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListIkePolicies(listIkePoliciesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListIkePolicies with error: Operation request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListIkePoliciesOptions model
				listIkePoliciesOptionsModel := new(vpcclassicv1.ListIkePoliciesOptions)
				listIkePoliciesOptionsModel.Start = core.StringPtr("testString")
				listIkePoliciesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listIkePoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListIkePolicies(listIkePoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateIkePolicy(createIkePolicyOptions *CreateIkePolicyOptions) - Operation response error`, func() {
		version := "testString"
		createIkePolicyPath := "/ike_policies"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createIkePolicyPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateIkePolicy with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateIkePolicyOptions model
				createIkePolicyOptionsModel := new(vpcclassicv1.CreateIkePolicyOptions)
				createIkePolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				createIkePolicyOptionsModel.DhGroup = core.Int64Ptr(int64(2))
				createIkePolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				createIkePolicyOptionsModel.IkeVersion = core.Int64Ptr(int64(1))
				createIkePolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(28800))
				createIkePolicyOptionsModel.Name = core.StringPtr("my-ike-policy")
				createIkePolicyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateIkePolicy(createIkePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateIkePolicy(createIkePolicyOptions *CreateIkePolicyOptions)`, func() {
		version := "testString"
		createIkePolicyPath := "/ike_policies"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createIkePolicyPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"authentication_algorithm": "md5", "connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "dh_group": 2, "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "ike_version": 1, "key_lifetime": 28800, "name": "my-ike-policy", "negotiation_mode": "main", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}}`)
				}))
			})
			It(`Invoke CreateIkePolicy successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateIkePolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateIkePolicyOptions model
				createIkePolicyOptionsModel := new(vpcclassicv1.CreateIkePolicyOptions)
				createIkePolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				createIkePolicyOptionsModel.DhGroup = core.Int64Ptr(int64(2))
				createIkePolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				createIkePolicyOptionsModel.IkeVersion = core.Int64Ptr(int64(1))
				createIkePolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(28800))
				createIkePolicyOptionsModel.Name = core.StringPtr("my-ike-policy")
				createIkePolicyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateIkePolicy(createIkePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateIkePolicy with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateIkePolicyOptions model
				createIkePolicyOptionsModel := new(vpcclassicv1.CreateIkePolicyOptions)
				createIkePolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				createIkePolicyOptionsModel.DhGroup = core.Int64Ptr(int64(2))
				createIkePolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				createIkePolicyOptionsModel.IkeVersion = core.Int64Ptr(int64(1))
				createIkePolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(28800))
				createIkePolicyOptionsModel.Name = core.StringPtr("my-ike-policy")
				createIkePolicyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateIkePolicy(createIkePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateIkePolicyOptions model with no property values
				createIkePolicyOptionsModelNew := new(vpcclassicv1.CreateIkePolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateIkePolicy(createIkePolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteIkePolicy(deleteIkePolicyOptions *DeleteIkePolicyOptions)`, func() {
		version := "testString"
		deleteIkePolicyPath := "/ike_policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteIkePolicyPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteIkePolicy successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteIkePolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteIkePolicyOptions model
				deleteIkePolicyOptionsModel := new(vpcclassicv1.DeleteIkePolicyOptions)
				deleteIkePolicyOptionsModel.ID = core.StringPtr("testString")
				deleteIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteIkePolicy(deleteIkePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteIkePolicy with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteIkePolicyOptions model
				deleteIkePolicyOptionsModel := new(vpcclassicv1.DeleteIkePolicyOptions)
				deleteIkePolicyOptionsModel.ID = core.StringPtr("testString")
				deleteIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteIkePolicy(deleteIkePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteIkePolicyOptions model with no property values
				deleteIkePolicyOptionsModelNew := new(vpcclassicv1.DeleteIkePolicyOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteIkePolicy(deleteIkePolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetIkePolicy(getIkePolicyOptions *GetIkePolicyOptions) - Operation response error`, func() {
		version := "testString"
		getIkePolicyPath := "/ike_policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getIkePolicyPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetIkePolicy with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetIkePolicyOptions model
				getIkePolicyOptionsModel := new(vpcclassicv1.GetIkePolicyOptions)
				getIkePolicyOptionsModel.ID = core.StringPtr("testString")
				getIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetIkePolicy(getIkePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetIkePolicy(getIkePolicyOptions *GetIkePolicyOptions)`, func() {
		version := "testString"
		getIkePolicyPath := "/ike_policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getIkePolicyPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"authentication_algorithm": "md5", "connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "dh_group": 2, "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "ike_version": 1, "key_lifetime": 28800, "name": "my-ike-policy", "negotiation_mode": "main", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}}`)
				}))
			})
			It(`Invoke GetIkePolicy successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetIkePolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetIkePolicyOptions model
				getIkePolicyOptionsModel := new(vpcclassicv1.GetIkePolicyOptions)
				getIkePolicyOptionsModel.ID = core.StringPtr("testString")
				getIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetIkePolicy(getIkePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetIkePolicy with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetIkePolicyOptions model
				getIkePolicyOptionsModel := new(vpcclassicv1.GetIkePolicyOptions)
				getIkePolicyOptionsModel.ID = core.StringPtr("testString")
				getIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetIkePolicy(getIkePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetIkePolicyOptions model with no property values
				getIkePolicyOptionsModelNew := new(vpcclassicv1.GetIkePolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetIkePolicy(getIkePolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateIkePolicy(updateIkePolicyOptions *UpdateIkePolicyOptions) - Operation response error`, func() {
		version := "testString"
		updateIkePolicyPath := "/ike_policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateIkePolicyPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateIkePolicy with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateIkePolicyOptions model
				updateIkePolicyOptionsModel := new(vpcclassicv1.UpdateIkePolicyOptions)
				updateIkePolicyOptionsModel.ID = core.StringPtr("testString")
				updateIkePolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				updateIkePolicyOptionsModel.DhGroup = core.Int64Ptr(int64(2))
				updateIkePolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				updateIkePolicyOptionsModel.IkeVersion = core.Int64Ptr(int64(1))
				updateIkePolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(28800))
				updateIkePolicyOptionsModel.Name = core.StringPtr("my-ike-policy")
				updateIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateIkePolicy(updateIkePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateIkePolicy(updateIkePolicyOptions *UpdateIkePolicyOptions)`, func() {
		version := "testString"
		updateIkePolicyPath := "/ike_policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateIkePolicyPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"authentication_algorithm": "md5", "connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "dh_group": 2, "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "ike_version": 1, "key_lifetime": 28800, "name": "my-ike-policy", "negotiation_mode": "main", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}}`)
				}))
			})
			It(`Invoke UpdateIkePolicy successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateIkePolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateIkePolicyOptions model
				updateIkePolicyOptionsModel := new(vpcclassicv1.UpdateIkePolicyOptions)
				updateIkePolicyOptionsModel.ID = core.StringPtr("testString")
				updateIkePolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				updateIkePolicyOptionsModel.DhGroup = core.Int64Ptr(int64(2))
				updateIkePolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				updateIkePolicyOptionsModel.IkeVersion = core.Int64Ptr(int64(1))
				updateIkePolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(28800))
				updateIkePolicyOptionsModel.Name = core.StringPtr("my-ike-policy")
				updateIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateIkePolicy(updateIkePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateIkePolicy with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateIkePolicyOptions model
				updateIkePolicyOptionsModel := new(vpcclassicv1.UpdateIkePolicyOptions)
				updateIkePolicyOptionsModel.ID = core.StringPtr("testString")
				updateIkePolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				updateIkePolicyOptionsModel.DhGroup = core.Int64Ptr(int64(2))
				updateIkePolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				updateIkePolicyOptionsModel.IkeVersion = core.Int64Ptr(int64(1))
				updateIkePolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(28800))
				updateIkePolicyOptionsModel.Name = core.StringPtr("my-ike-policy")
				updateIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateIkePolicy(updateIkePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateIkePolicyOptions model with no property values
				updateIkePolicyOptionsModelNew := new(vpcclassicv1.UpdateIkePolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateIkePolicy(updateIkePolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListIkePolicyConnections(listIkePolicyConnectionsOptions *ListIkePolicyConnectionsOptions) - Operation response error`, func() {
		version := "testString"
		listIkePolicyConnectionsPath := "/ike_policies/testString/connections"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listIkePolicyConnectionsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListIkePolicyConnections with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListIkePolicyConnectionsOptions model
				listIkePolicyConnectionsOptionsModel := new(vpcclassicv1.ListIkePolicyConnectionsOptions)
				listIkePolicyConnectionsOptionsModel.ID = core.StringPtr("testString")
				listIkePolicyConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListIkePolicyConnections(listIkePolicyConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListIkePolicyConnections(listIkePolicyConnectionsOptions *ListIkePolicyConnectionsOptions)`, func() {
		version := "testString"
		listIkePolicyConnectionsPath := "/ike_policies/testString/connections"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listIkePolicyConnectionsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"connections": [{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy"}, "ipsec_policy": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy"}, "local_cidrs": ["192.168.1.0/24"], "name": "my-vpn-connection", "peer_address": "169.21.50.5", "peer_cidrs": ["10.45.1.0/24"], "psk": "lkj14b1oi0alcniejkso", "route_mode": "policy", "status": "down"}]}`)
				}))
			})
			It(`Invoke ListIkePolicyConnections successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListIkePolicyConnections(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListIkePolicyConnectionsOptions model
				listIkePolicyConnectionsOptionsModel := new(vpcclassicv1.ListIkePolicyConnectionsOptions)
				listIkePolicyConnectionsOptionsModel.ID = core.StringPtr("testString")
				listIkePolicyConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListIkePolicyConnections(listIkePolicyConnectionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListIkePolicyConnections with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListIkePolicyConnectionsOptions model
				listIkePolicyConnectionsOptionsModel := new(vpcclassicv1.ListIkePolicyConnectionsOptions)
				listIkePolicyConnectionsOptionsModel.ID = core.StringPtr("testString")
				listIkePolicyConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListIkePolicyConnections(listIkePolicyConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListIkePolicyConnectionsOptions model with no property values
				listIkePolicyConnectionsOptionsModelNew := new(vpcclassicv1.ListIkePolicyConnectionsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListIkePolicyConnections(listIkePolicyConnectionsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListIpsecPolicies(listIpsecPoliciesOptions *ListIpsecPoliciesOptions) - Operation response error`, func() {
		version := "testString"
		listIpsecPoliciesPath := "/ipsec_policies"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listIpsecPoliciesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListIpsecPolicies with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListIpsecPoliciesOptions model
				listIpsecPoliciesOptionsModel := new(vpcclassicv1.ListIpsecPoliciesOptions)
				listIpsecPoliciesOptionsModel.Start = core.StringPtr("testString")
				listIpsecPoliciesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listIpsecPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListIpsecPolicies(listIpsecPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListIpsecPolicies(listIpsecPoliciesOptions *ListIpsecPoliciesOptions)`, func() {
		version := "testString"
		listIpsecPoliciesPath := "/ipsec_policies"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listIpsecPoliciesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies?limit=20"}, "ipsec_policies": [{"authentication_algorithm": "md5", "connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "encapsulation_mode": "tunnel", "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "key_lifetime": 3600, "name": "my-ipsec-policy", "pfs": "disabled", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "transform_protocol": "esp"}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListIpsecPolicies successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListIpsecPolicies(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListIpsecPoliciesOptions model
				listIpsecPoliciesOptionsModel := new(vpcclassicv1.ListIpsecPoliciesOptions)
				listIpsecPoliciesOptionsModel.Start = core.StringPtr("testString")
				listIpsecPoliciesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listIpsecPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListIpsecPolicies(listIpsecPoliciesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListIpsecPolicies with error: Operation request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListIpsecPoliciesOptions model
				listIpsecPoliciesOptionsModel := new(vpcclassicv1.ListIpsecPoliciesOptions)
				listIpsecPoliciesOptionsModel.Start = core.StringPtr("testString")
				listIpsecPoliciesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listIpsecPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListIpsecPolicies(listIpsecPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateIpsecPolicy(createIpsecPolicyOptions *CreateIpsecPolicyOptions) - Operation response error`, func() {
		version := "testString"
		createIpsecPolicyPath := "/ipsec_policies"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createIpsecPolicyPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateIpsecPolicy with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateIpsecPolicyOptions model
				createIpsecPolicyOptionsModel := new(vpcclassicv1.CreateIpsecPolicyOptions)
				createIpsecPolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				createIpsecPolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				createIpsecPolicyOptionsModel.Pfs = core.StringPtr("disabled")
				createIpsecPolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(3600))
				createIpsecPolicyOptionsModel.Name = core.StringPtr("my-ipsec-policy")
				createIpsecPolicyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateIpsecPolicy(createIpsecPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateIpsecPolicy(createIpsecPolicyOptions *CreateIpsecPolicyOptions)`, func() {
		version := "testString"
		createIpsecPolicyPath := "/ipsec_policies"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createIpsecPolicyPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"authentication_algorithm": "md5", "connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "encapsulation_mode": "tunnel", "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "key_lifetime": 3600, "name": "my-ipsec-policy", "pfs": "disabled", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "transform_protocol": "esp"}`)
				}))
			})
			It(`Invoke CreateIpsecPolicy successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateIpsecPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateIpsecPolicyOptions model
				createIpsecPolicyOptionsModel := new(vpcclassicv1.CreateIpsecPolicyOptions)
				createIpsecPolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				createIpsecPolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				createIpsecPolicyOptionsModel.Pfs = core.StringPtr("disabled")
				createIpsecPolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(3600))
				createIpsecPolicyOptionsModel.Name = core.StringPtr("my-ipsec-policy")
				createIpsecPolicyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateIpsecPolicy(createIpsecPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateIpsecPolicy with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateIpsecPolicyOptions model
				createIpsecPolicyOptionsModel := new(vpcclassicv1.CreateIpsecPolicyOptions)
				createIpsecPolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				createIpsecPolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				createIpsecPolicyOptionsModel.Pfs = core.StringPtr("disabled")
				createIpsecPolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(3600))
				createIpsecPolicyOptionsModel.Name = core.StringPtr("my-ipsec-policy")
				createIpsecPolicyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateIpsecPolicy(createIpsecPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateIpsecPolicyOptions model with no property values
				createIpsecPolicyOptionsModelNew := new(vpcclassicv1.CreateIpsecPolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateIpsecPolicy(createIpsecPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteIpsecPolicy(deleteIpsecPolicyOptions *DeleteIpsecPolicyOptions)`, func() {
		version := "testString"
		deleteIpsecPolicyPath := "/ipsec_policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteIpsecPolicyPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteIpsecPolicy successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteIpsecPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteIpsecPolicyOptions model
				deleteIpsecPolicyOptionsModel := new(vpcclassicv1.DeleteIpsecPolicyOptions)
				deleteIpsecPolicyOptionsModel.ID = core.StringPtr("testString")
				deleteIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteIpsecPolicy(deleteIpsecPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteIpsecPolicy with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteIpsecPolicyOptions model
				deleteIpsecPolicyOptionsModel := new(vpcclassicv1.DeleteIpsecPolicyOptions)
				deleteIpsecPolicyOptionsModel.ID = core.StringPtr("testString")
				deleteIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteIpsecPolicy(deleteIpsecPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteIpsecPolicyOptions model with no property values
				deleteIpsecPolicyOptionsModelNew := new(vpcclassicv1.DeleteIpsecPolicyOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteIpsecPolicy(deleteIpsecPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetIpsecPolicy(getIpsecPolicyOptions *GetIpsecPolicyOptions) - Operation response error`, func() {
		version := "testString"
		getIpsecPolicyPath := "/ipsec_policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getIpsecPolicyPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetIpsecPolicy with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetIpsecPolicyOptions model
				getIpsecPolicyOptionsModel := new(vpcclassicv1.GetIpsecPolicyOptions)
				getIpsecPolicyOptionsModel.ID = core.StringPtr("testString")
				getIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetIpsecPolicy(getIpsecPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetIpsecPolicy(getIpsecPolicyOptions *GetIpsecPolicyOptions)`, func() {
		version := "testString"
		getIpsecPolicyPath := "/ipsec_policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getIpsecPolicyPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"authentication_algorithm": "md5", "connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "encapsulation_mode": "tunnel", "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "key_lifetime": 3600, "name": "my-ipsec-policy", "pfs": "disabled", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "transform_protocol": "esp"}`)
				}))
			})
			It(`Invoke GetIpsecPolicy successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetIpsecPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetIpsecPolicyOptions model
				getIpsecPolicyOptionsModel := new(vpcclassicv1.GetIpsecPolicyOptions)
				getIpsecPolicyOptionsModel.ID = core.StringPtr("testString")
				getIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetIpsecPolicy(getIpsecPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetIpsecPolicy with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetIpsecPolicyOptions model
				getIpsecPolicyOptionsModel := new(vpcclassicv1.GetIpsecPolicyOptions)
				getIpsecPolicyOptionsModel.ID = core.StringPtr("testString")
				getIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetIpsecPolicy(getIpsecPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetIpsecPolicyOptions model with no property values
				getIpsecPolicyOptionsModelNew := new(vpcclassicv1.GetIpsecPolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetIpsecPolicy(getIpsecPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateIpsecPolicy(updateIpsecPolicyOptions *UpdateIpsecPolicyOptions) - Operation response error`, func() {
		version := "testString"
		updateIpsecPolicyPath := "/ipsec_policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateIpsecPolicyPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateIpsecPolicy with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateIpsecPolicyOptions model
				updateIpsecPolicyOptionsModel := new(vpcclassicv1.UpdateIpsecPolicyOptions)
				updateIpsecPolicyOptionsModel.ID = core.StringPtr("testString")
				updateIpsecPolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				updateIpsecPolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				updateIpsecPolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(3600))
				updateIpsecPolicyOptionsModel.Name = core.StringPtr("my-ipsec-policy")
				updateIpsecPolicyOptionsModel.Pfs = core.StringPtr("disabled")
				updateIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateIpsecPolicy(updateIpsecPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateIpsecPolicy(updateIpsecPolicyOptions *UpdateIpsecPolicyOptions)`, func() {
		version := "testString"
		updateIpsecPolicyPath := "/ipsec_policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateIpsecPolicyPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"authentication_algorithm": "md5", "connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "encapsulation_mode": "tunnel", "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "key_lifetime": 3600, "name": "my-ipsec-policy", "pfs": "disabled", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "transform_protocol": "esp"}`)
				}))
			})
			It(`Invoke UpdateIpsecPolicy successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateIpsecPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateIpsecPolicyOptions model
				updateIpsecPolicyOptionsModel := new(vpcclassicv1.UpdateIpsecPolicyOptions)
				updateIpsecPolicyOptionsModel.ID = core.StringPtr("testString")
				updateIpsecPolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				updateIpsecPolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				updateIpsecPolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(3600))
				updateIpsecPolicyOptionsModel.Name = core.StringPtr("my-ipsec-policy")
				updateIpsecPolicyOptionsModel.Pfs = core.StringPtr("disabled")
				updateIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateIpsecPolicy(updateIpsecPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateIpsecPolicy with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateIpsecPolicyOptions model
				updateIpsecPolicyOptionsModel := new(vpcclassicv1.UpdateIpsecPolicyOptions)
				updateIpsecPolicyOptionsModel.ID = core.StringPtr("testString")
				updateIpsecPolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				updateIpsecPolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				updateIpsecPolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(3600))
				updateIpsecPolicyOptionsModel.Name = core.StringPtr("my-ipsec-policy")
				updateIpsecPolicyOptionsModel.Pfs = core.StringPtr("disabled")
				updateIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateIpsecPolicy(updateIpsecPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateIpsecPolicyOptions model with no property values
				updateIpsecPolicyOptionsModelNew := new(vpcclassicv1.UpdateIpsecPolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateIpsecPolicy(updateIpsecPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListIpsecPolicyConnections(listIpsecPolicyConnectionsOptions *ListIpsecPolicyConnectionsOptions) - Operation response error`, func() {
		version := "testString"
		listIpsecPolicyConnectionsPath := "/ipsec_policies/testString/connections"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listIpsecPolicyConnectionsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListIpsecPolicyConnections with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListIpsecPolicyConnectionsOptions model
				listIpsecPolicyConnectionsOptionsModel := new(vpcclassicv1.ListIpsecPolicyConnectionsOptions)
				listIpsecPolicyConnectionsOptionsModel.ID = core.StringPtr("testString")
				listIpsecPolicyConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListIpsecPolicyConnections(listIpsecPolicyConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListIpsecPolicyConnections(listIpsecPolicyConnectionsOptions *ListIpsecPolicyConnectionsOptions)`, func() {
		version := "testString"
		listIpsecPolicyConnectionsPath := "/ipsec_policies/testString/connections"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listIpsecPolicyConnectionsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"connections": [{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy"}, "ipsec_policy": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy"}, "local_cidrs": ["192.168.1.0/24"], "name": "my-vpn-connection", "peer_address": "169.21.50.5", "peer_cidrs": ["10.45.1.0/24"], "psk": "lkj14b1oi0alcniejkso", "route_mode": "policy", "status": "down"}]}`)
				}))
			})
			It(`Invoke ListIpsecPolicyConnections successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListIpsecPolicyConnections(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListIpsecPolicyConnectionsOptions model
				listIpsecPolicyConnectionsOptionsModel := new(vpcclassicv1.ListIpsecPolicyConnectionsOptions)
				listIpsecPolicyConnectionsOptionsModel.ID = core.StringPtr("testString")
				listIpsecPolicyConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListIpsecPolicyConnections(listIpsecPolicyConnectionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListIpsecPolicyConnections with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListIpsecPolicyConnectionsOptions model
				listIpsecPolicyConnectionsOptionsModel := new(vpcclassicv1.ListIpsecPolicyConnectionsOptions)
				listIpsecPolicyConnectionsOptionsModel.ID = core.StringPtr("testString")
				listIpsecPolicyConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListIpsecPolicyConnections(listIpsecPolicyConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListIpsecPolicyConnectionsOptions model with no property values
				listIpsecPolicyConnectionsOptionsModelNew := new(vpcclassicv1.ListIpsecPolicyConnectionsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListIpsecPolicyConnections(listIpsecPolicyConnectionsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVPNGateways(listVPNGatewaysOptions *ListVPNGatewaysOptions) - Operation response error`, func() {
		version := "testString"
		listVPNGatewaysPath := "/vpn_gateways"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVPNGatewaysPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVPNGateways with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVPNGatewaysOptions model
				listVPNGatewaysOptionsModel := new(vpcclassicv1.ListVPNGatewaysOptions)
				listVPNGatewaysOptionsModel.Start = core.StringPtr("testString")
				listVPNGatewaysOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPNGatewaysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listVPNGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListVPNGateways(listVPNGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListVPNGateways(listVPNGatewaysOptions *ListVPNGatewaysOptions)`, func() {
		version := "testString"
		listVPNGatewaysPath := "/vpn_gateways"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVPNGatewaysPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20"}, "total_count": 132, "vpn_gateways": [{"connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-vpn-gateway", "public_ip": {"address": "192.168.3.4"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}]}`)
				}))
			})
			It(`Invoke ListVPNGateways successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListVPNGateways(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVPNGatewaysOptions model
				listVPNGatewaysOptionsModel := new(vpcclassicv1.ListVPNGatewaysOptions)
				listVPNGatewaysOptionsModel.Start = core.StringPtr("testString")
				listVPNGatewaysOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPNGatewaysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listVPNGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListVPNGateways(listVPNGatewaysOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListVPNGateways with error: Operation request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVPNGatewaysOptions model
				listVPNGatewaysOptionsModel := new(vpcclassicv1.ListVPNGatewaysOptions)
				listVPNGatewaysOptionsModel.Start = core.StringPtr("testString")
				listVPNGatewaysOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPNGatewaysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listVPNGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListVPNGateways(listVPNGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVPNGateway(createVPNGatewayOptions *CreateVPNGatewayOptions) - Operation response error`, func() {
		version := "testString"
		createVPNGatewayPath := "/vpn_gateways"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createVPNGatewayPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateVPNGateway with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcclassicv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the CreateVPNGatewayOptions model
				createVPNGatewayOptionsModel := new(vpcclassicv1.CreateVPNGatewayOptions)
				createVPNGatewayOptionsModel.Subnet = subnetIdentityModel
				createVPNGatewayOptionsModel.Name = core.StringPtr("my-vpn-gateway")
				createVPNGatewayOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createVPNGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateVPNGateway(createVPNGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateVPNGateway(createVPNGatewayOptions *CreateVPNGatewayOptions)`, func() {
		version := "testString"
		createVPNGatewayPath := "/vpn_gateways"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createVPNGatewayPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-vpn-gateway", "public_ip": {"address": "192.168.3.4"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}`)
				}))
			})
			It(`Invoke CreateVPNGateway successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateVPNGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcclassicv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the CreateVPNGatewayOptions model
				createVPNGatewayOptionsModel := new(vpcclassicv1.CreateVPNGatewayOptions)
				createVPNGatewayOptionsModel.Subnet = subnetIdentityModel
				createVPNGatewayOptionsModel.Name = core.StringPtr("my-vpn-gateway")
				createVPNGatewayOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createVPNGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateVPNGateway(createVPNGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateVPNGateway with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcclassicv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the CreateVPNGatewayOptions model
				createVPNGatewayOptionsModel := new(vpcclassicv1.CreateVPNGatewayOptions)
				createVPNGatewayOptionsModel.Subnet = subnetIdentityModel
				createVPNGatewayOptionsModel.Name = core.StringPtr("my-vpn-gateway")
				createVPNGatewayOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createVPNGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateVPNGateway(createVPNGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateVPNGatewayOptions model with no property values
				createVPNGatewayOptionsModelNew := new(vpcclassicv1.CreateVPNGatewayOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateVPNGateway(createVPNGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteVPNGateway(deleteVPNGatewayOptions *DeleteVPNGatewayOptions)`, func() {
		version := "testString"
		deleteVPNGatewayPath := "/vpn_gateways/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteVPNGatewayPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(202)
				}))
			})
			It(`Invoke DeleteVPNGateway successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteVPNGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteVPNGatewayOptions model
				deleteVPNGatewayOptionsModel := new(vpcclassicv1.DeleteVPNGatewayOptions)
				deleteVPNGatewayOptionsModel.ID = core.StringPtr("testString")
				deleteVPNGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteVPNGateway(deleteVPNGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteVPNGateway with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteVPNGatewayOptions model
				deleteVPNGatewayOptionsModel := new(vpcclassicv1.DeleteVPNGatewayOptions)
				deleteVPNGatewayOptionsModel.ID = core.StringPtr("testString")
				deleteVPNGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteVPNGateway(deleteVPNGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteVPNGatewayOptions model with no property values
				deleteVPNGatewayOptionsModelNew := new(vpcclassicv1.DeleteVPNGatewayOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteVPNGateway(deleteVPNGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVPNGateway(getVPNGatewayOptions *GetVPNGatewayOptions) - Operation response error`, func() {
		version := "testString"
		getVPNGatewayPath := "/vpn_gateways/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVPNGatewayPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVPNGateway with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVPNGatewayOptions model
				getVPNGatewayOptionsModel := new(vpcclassicv1.GetVPNGatewayOptions)
				getVPNGatewayOptionsModel.ID = core.StringPtr("testString")
				getVPNGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetVPNGateway(getVPNGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetVPNGateway(getVPNGatewayOptions *GetVPNGatewayOptions)`, func() {
		version := "testString"
		getVPNGatewayPath := "/vpn_gateways/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVPNGatewayPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-vpn-gateway", "public_ip": {"address": "192.168.3.4"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}`)
				}))
			})
			It(`Invoke GetVPNGateway successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetVPNGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVPNGatewayOptions model
				getVPNGatewayOptionsModel := new(vpcclassicv1.GetVPNGatewayOptions)
				getVPNGatewayOptionsModel.ID = core.StringPtr("testString")
				getVPNGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetVPNGateway(getVPNGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetVPNGateway with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVPNGatewayOptions model
				getVPNGatewayOptionsModel := new(vpcclassicv1.GetVPNGatewayOptions)
				getVPNGatewayOptionsModel.ID = core.StringPtr("testString")
				getVPNGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetVPNGateway(getVPNGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVPNGatewayOptions model with no property values
				getVPNGatewayOptionsModelNew := new(vpcclassicv1.GetVPNGatewayOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetVPNGateway(getVPNGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVPNGateway(updateVPNGatewayOptions *UpdateVPNGatewayOptions) - Operation response error`, func() {
		version := "testString"
		updateVPNGatewayPath := "/vpn_gateways/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateVPNGatewayPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateVPNGateway with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateVPNGatewayOptions model
				updateVPNGatewayOptionsModel := new(vpcclassicv1.UpdateVPNGatewayOptions)
				updateVPNGatewayOptionsModel.ID = core.StringPtr("testString")
				updateVPNGatewayOptionsModel.Name = core.StringPtr("my-vpn-gateway")
				updateVPNGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateVPNGateway(updateVPNGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateVPNGateway(updateVPNGatewayOptions *UpdateVPNGatewayOptions)`, func() {
		version := "testString"
		updateVPNGatewayPath := "/vpn_gateways/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateVPNGatewayPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"connections": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection"}], "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-vpn-gateway", "public_ip": {"address": "192.168.3.4"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}`)
				}))
			})
			It(`Invoke UpdateVPNGateway successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateVPNGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateVPNGatewayOptions model
				updateVPNGatewayOptionsModel := new(vpcclassicv1.UpdateVPNGatewayOptions)
				updateVPNGatewayOptionsModel.ID = core.StringPtr("testString")
				updateVPNGatewayOptionsModel.Name = core.StringPtr("my-vpn-gateway")
				updateVPNGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateVPNGateway(updateVPNGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateVPNGateway with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateVPNGatewayOptions model
				updateVPNGatewayOptionsModel := new(vpcclassicv1.UpdateVPNGatewayOptions)
				updateVPNGatewayOptionsModel.ID = core.StringPtr("testString")
				updateVPNGatewayOptionsModel.Name = core.StringPtr("my-vpn-gateway")
				updateVPNGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateVPNGateway(updateVPNGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateVPNGatewayOptions model with no property values
				updateVPNGatewayOptionsModelNew := new(vpcclassicv1.UpdateVPNGatewayOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateVPNGateway(updateVPNGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVPNGatewayConnections(listVPNGatewayConnectionsOptions *ListVPNGatewayConnectionsOptions) - Operation response error`, func() {
		version := "testString"
		listVPNGatewayConnectionsPath := "/vpn_gateways/testString/connections"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVPNGatewayConnectionsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["status"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVPNGatewayConnections with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVPNGatewayConnectionsOptions model
				listVPNGatewayConnectionsOptionsModel := new(vpcclassicv1.ListVPNGatewayConnectionsOptions)
				listVPNGatewayConnectionsOptionsModel.VPNGatewayID = core.StringPtr("testString")
				listVPNGatewayConnectionsOptionsModel.Status = core.StringPtr("testString")
				listVPNGatewayConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListVPNGatewayConnections(listVPNGatewayConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListVPNGatewayConnections(listVPNGatewayConnectionsOptions *ListVPNGatewayConnectionsOptions)`, func() {
		version := "testString"
		listVPNGatewayConnectionsPath := "/vpn_gateways/testString/connections"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVPNGatewayConnectionsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["status"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"connections": [{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy"}, "ipsec_policy": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy"}, "local_cidrs": ["192.168.1.0/24"], "name": "my-vpn-connection", "peer_address": "169.21.50.5", "peer_cidrs": ["10.45.1.0/24"], "psk": "lkj14b1oi0alcniejkso", "route_mode": "policy", "status": "down"}]}`)
				}))
			})
			It(`Invoke ListVPNGatewayConnections successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListVPNGatewayConnections(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVPNGatewayConnectionsOptions model
				listVPNGatewayConnectionsOptionsModel := new(vpcclassicv1.ListVPNGatewayConnectionsOptions)
				listVPNGatewayConnectionsOptionsModel.VPNGatewayID = core.StringPtr("testString")
				listVPNGatewayConnectionsOptionsModel.Status = core.StringPtr("testString")
				listVPNGatewayConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListVPNGatewayConnections(listVPNGatewayConnectionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListVPNGatewayConnections with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVPNGatewayConnectionsOptions model
				listVPNGatewayConnectionsOptionsModel := new(vpcclassicv1.ListVPNGatewayConnectionsOptions)
				listVPNGatewayConnectionsOptionsModel.VPNGatewayID = core.StringPtr("testString")
				listVPNGatewayConnectionsOptionsModel.Status = core.StringPtr("testString")
				listVPNGatewayConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListVPNGatewayConnections(listVPNGatewayConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListVPNGatewayConnectionsOptions model with no property values
				listVPNGatewayConnectionsOptionsModelNew := new(vpcclassicv1.ListVPNGatewayConnectionsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListVPNGatewayConnections(listVPNGatewayConnectionsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVPNGatewayConnection(createVPNGatewayConnectionOptions *CreateVPNGatewayConnectionOptions) - Operation response error`, func() {
		version := "testString"
		createVPNGatewayConnectionPath := "/vpn_gateways/testString/connections"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createVPNGatewayConnectionPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateVPNGatewayConnection with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the IPsecPolicyIdentityByID model
				iPsecPolicyIdentityModel := new(vpcclassicv1.IPsecPolicyIdentityByID)
				iPsecPolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the IkePolicyIdentityByID model
				ikePolicyIdentityModel := new(vpcclassicv1.IkePolicyIdentityByID)
				ikePolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the VPNGatewayConnectionDpdPrototype model
				vpnGatewayConnectionDpdPrototypeModel := new(vpcclassicv1.VPNGatewayConnectionDpdPrototype)
				vpnGatewayConnectionDpdPrototypeModel.Action = core.StringPtr("restart")
				vpnGatewayConnectionDpdPrototypeModel.Interval = core.Int64Ptr(int64(30))
				vpnGatewayConnectionDpdPrototypeModel.Timeout = core.Int64Ptr(int64(120))

				// Construct an instance of the CreateVPNGatewayConnectionOptions model
				createVPNGatewayConnectionOptionsModel := new(vpcclassicv1.CreateVPNGatewayConnectionOptions)
				createVPNGatewayConnectionOptionsModel.VPNGatewayID = core.StringPtr("testString")
				createVPNGatewayConnectionOptionsModel.PeerAddress = core.StringPtr("169.21.50.5")
				createVPNGatewayConnectionOptionsModel.Psk = core.StringPtr("lkj14b1oi0alcniejkso")
				createVPNGatewayConnectionOptionsModel.AdminStateUp = core.BoolPtr(true)
				createVPNGatewayConnectionOptionsModel.DeadPeerDetection = vpnGatewayConnectionDpdPrototypeModel
				createVPNGatewayConnectionOptionsModel.IkePolicy = ikePolicyIdentityModel
				createVPNGatewayConnectionOptionsModel.IpsecPolicy = iPsecPolicyIdentityModel
				createVPNGatewayConnectionOptionsModel.LocalCIDRs = []string{"192.168.1.0/24"}
				createVPNGatewayConnectionOptionsModel.Name = core.StringPtr("my-vpn-connection")
				createVPNGatewayConnectionOptionsModel.PeerCIDRs = []string{"10.45.1.0/24"}
				createVPNGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateVPNGatewayConnection(createVPNGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateVPNGatewayConnection(createVPNGatewayConnectionOptions *CreateVPNGatewayConnectionOptions)`, func() {
		version := "testString"
		createVPNGatewayConnectionPath := "/vpn_gateways/testString/connections"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createVPNGatewayConnectionPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy"}, "ipsec_policy": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy"}, "local_cidrs": ["192.168.1.0/24"], "name": "my-vpn-connection", "peer_address": "169.21.50.5", "peer_cidrs": ["10.45.1.0/24"], "psk": "lkj14b1oi0alcniejkso", "route_mode": "policy", "status": "down"}`)
				}))
			})
			It(`Invoke CreateVPNGatewayConnection successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateVPNGatewayConnection(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the IPsecPolicyIdentityByID model
				iPsecPolicyIdentityModel := new(vpcclassicv1.IPsecPolicyIdentityByID)
				iPsecPolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the IkePolicyIdentityByID model
				ikePolicyIdentityModel := new(vpcclassicv1.IkePolicyIdentityByID)
				ikePolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the VPNGatewayConnectionDpdPrototype model
				vpnGatewayConnectionDpdPrototypeModel := new(vpcclassicv1.VPNGatewayConnectionDpdPrototype)
				vpnGatewayConnectionDpdPrototypeModel.Action = core.StringPtr("restart")
				vpnGatewayConnectionDpdPrototypeModel.Interval = core.Int64Ptr(int64(30))
				vpnGatewayConnectionDpdPrototypeModel.Timeout = core.Int64Ptr(int64(120))

				// Construct an instance of the CreateVPNGatewayConnectionOptions model
				createVPNGatewayConnectionOptionsModel := new(vpcclassicv1.CreateVPNGatewayConnectionOptions)
				createVPNGatewayConnectionOptionsModel.VPNGatewayID = core.StringPtr("testString")
				createVPNGatewayConnectionOptionsModel.PeerAddress = core.StringPtr("169.21.50.5")
				createVPNGatewayConnectionOptionsModel.Psk = core.StringPtr("lkj14b1oi0alcniejkso")
				createVPNGatewayConnectionOptionsModel.AdminStateUp = core.BoolPtr(true)
				createVPNGatewayConnectionOptionsModel.DeadPeerDetection = vpnGatewayConnectionDpdPrototypeModel
				createVPNGatewayConnectionOptionsModel.IkePolicy = ikePolicyIdentityModel
				createVPNGatewayConnectionOptionsModel.IpsecPolicy = iPsecPolicyIdentityModel
				createVPNGatewayConnectionOptionsModel.LocalCIDRs = []string{"192.168.1.0/24"}
				createVPNGatewayConnectionOptionsModel.Name = core.StringPtr("my-vpn-connection")
				createVPNGatewayConnectionOptionsModel.PeerCIDRs = []string{"10.45.1.0/24"}
				createVPNGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateVPNGatewayConnection(createVPNGatewayConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateVPNGatewayConnection with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the IPsecPolicyIdentityByID model
				iPsecPolicyIdentityModel := new(vpcclassicv1.IPsecPolicyIdentityByID)
				iPsecPolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the IkePolicyIdentityByID model
				ikePolicyIdentityModel := new(vpcclassicv1.IkePolicyIdentityByID)
				ikePolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the VPNGatewayConnectionDpdPrototype model
				vpnGatewayConnectionDpdPrototypeModel := new(vpcclassicv1.VPNGatewayConnectionDpdPrototype)
				vpnGatewayConnectionDpdPrototypeModel.Action = core.StringPtr("restart")
				vpnGatewayConnectionDpdPrototypeModel.Interval = core.Int64Ptr(int64(30))
				vpnGatewayConnectionDpdPrototypeModel.Timeout = core.Int64Ptr(int64(120))

				// Construct an instance of the CreateVPNGatewayConnectionOptions model
				createVPNGatewayConnectionOptionsModel := new(vpcclassicv1.CreateVPNGatewayConnectionOptions)
				createVPNGatewayConnectionOptionsModel.VPNGatewayID = core.StringPtr("testString")
				createVPNGatewayConnectionOptionsModel.PeerAddress = core.StringPtr("169.21.50.5")
				createVPNGatewayConnectionOptionsModel.Psk = core.StringPtr("lkj14b1oi0alcniejkso")
				createVPNGatewayConnectionOptionsModel.AdminStateUp = core.BoolPtr(true)
				createVPNGatewayConnectionOptionsModel.DeadPeerDetection = vpnGatewayConnectionDpdPrototypeModel
				createVPNGatewayConnectionOptionsModel.IkePolicy = ikePolicyIdentityModel
				createVPNGatewayConnectionOptionsModel.IpsecPolicy = iPsecPolicyIdentityModel
				createVPNGatewayConnectionOptionsModel.LocalCIDRs = []string{"192.168.1.0/24"}
				createVPNGatewayConnectionOptionsModel.Name = core.StringPtr("my-vpn-connection")
				createVPNGatewayConnectionOptionsModel.PeerCIDRs = []string{"10.45.1.0/24"}
				createVPNGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateVPNGatewayConnection(createVPNGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateVPNGatewayConnectionOptions model with no property values
				createVPNGatewayConnectionOptionsModelNew := new(vpcclassicv1.CreateVPNGatewayConnectionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateVPNGatewayConnection(createVPNGatewayConnectionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteVPNGatewayConnection(deleteVPNGatewayConnectionOptions *DeleteVPNGatewayConnectionOptions)`, func() {
		version := "testString"
		deleteVPNGatewayConnectionPath := "/vpn_gateways/testString/connections/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteVPNGatewayConnectionPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(202)
				}))
			})
			It(`Invoke DeleteVPNGatewayConnection successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteVPNGatewayConnection(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteVPNGatewayConnectionOptions model
				deleteVPNGatewayConnectionOptionsModel := new(vpcclassicv1.DeleteVPNGatewayConnectionOptions)
				deleteVPNGatewayConnectionOptionsModel.VPNGatewayID = core.StringPtr("testString")
				deleteVPNGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				deleteVPNGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteVPNGatewayConnection(deleteVPNGatewayConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteVPNGatewayConnection with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteVPNGatewayConnectionOptions model
				deleteVPNGatewayConnectionOptionsModel := new(vpcclassicv1.DeleteVPNGatewayConnectionOptions)
				deleteVPNGatewayConnectionOptionsModel.VPNGatewayID = core.StringPtr("testString")
				deleteVPNGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				deleteVPNGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteVPNGatewayConnection(deleteVPNGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteVPNGatewayConnectionOptions model with no property values
				deleteVPNGatewayConnectionOptionsModelNew := new(vpcclassicv1.DeleteVPNGatewayConnectionOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteVPNGatewayConnection(deleteVPNGatewayConnectionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVPNGatewayConnection(getVPNGatewayConnectionOptions *GetVPNGatewayConnectionOptions) - Operation response error`, func() {
		version := "testString"
		getVPNGatewayConnectionPath := "/vpn_gateways/testString/connections/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVPNGatewayConnectionPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVPNGatewayConnection with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVPNGatewayConnectionOptions model
				getVPNGatewayConnectionOptionsModel := new(vpcclassicv1.GetVPNGatewayConnectionOptions)
				getVPNGatewayConnectionOptionsModel.VPNGatewayID = core.StringPtr("testString")
				getVPNGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				getVPNGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetVPNGatewayConnection(getVPNGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetVPNGatewayConnection(getVPNGatewayConnectionOptions *GetVPNGatewayConnectionOptions)`, func() {
		version := "testString"
		getVPNGatewayConnectionPath := "/vpn_gateways/testString/connections/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVPNGatewayConnectionPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy"}, "ipsec_policy": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy"}, "local_cidrs": ["192.168.1.0/24"], "name": "my-vpn-connection", "peer_address": "169.21.50.5", "peer_cidrs": ["10.45.1.0/24"], "psk": "lkj14b1oi0alcniejkso", "route_mode": "policy", "status": "down"}`)
				}))
			})
			It(`Invoke GetVPNGatewayConnection successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetVPNGatewayConnection(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVPNGatewayConnectionOptions model
				getVPNGatewayConnectionOptionsModel := new(vpcclassicv1.GetVPNGatewayConnectionOptions)
				getVPNGatewayConnectionOptionsModel.VPNGatewayID = core.StringPtr("testString")
				getVPNGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				getVPNGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetVPNGatewayConnection(getVPNGatewayConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetVPNGatewayConnection with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVPNGatewayConnectionOptions model
				getVPNGatewayConnectionOptionsModel := new(vpcclassicv1.GetVPNGatewayConnectionOptions)
				getVPNGatewayConnectionOptionsModel.VPNGatewayID = core.StringPtr("testString")
				getVPNGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				getVPNGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetVPNGatewayConnection(getVPNGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVPNGatewayConnectionOptions model with no property values
				getVPNGatewayConnectionOptionsModelNew := new(vpcclassicv1.GetVPNGatewayConnectionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetVPNGatewayConnection(getVPNGatewayConnectionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVPNGatewayConnection(updateVPNGatewayConnectionOptions *UpdateVPNGatewayConnectionOptions) - Operation response error`, func() {
		version := "testString"
		updateVPNGatewayConnectionPath := "/vpn_gateways/testString/connections/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateVPNGatewayConnectionPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateVPNGatewayConnection with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the IPsecPolicyIdentityByID model
				iPsecPolicyIdentityModel := new(vpcclassicv1.IPsecPolicyIdentityByID)
				iPsecPolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the IkePolicyIdentityByID model
				ikePolicyIdentityModel := new(vpcclassicv1.IkePolicyIdentityByID)
				ikePolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the VPNGatewayConnectionDpdPrototype model
				vpnGatewayConnectionDpdPrototypeModel := new(vpcclassicv1.VPNGatewayConnectionDpdPrototype)
				vpnGatewayConnectionDpdPrototypeModel.Action = core.StringPtr("restart")
				vpnGatewayConnectionDpdPrototypeModel.Interval = core.Int64Ptr(int64(30))
				vpnGatewayConnectionDpdPrototypeModel.Timeout = core.Int64Ptr(int64(120))

				// Construct an instance of the UpdateVPNGatewayConnectionOptions model
				updateVPNGatewayConnectionOptionsModel := new(vpcclassicv1.UpdateVPNGatewayConnectionOptions)
				updateVPNGatewayConnectionOptionsModel.VPNGatewayID = core.StringPtr("testString")
				updateVPNGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				updateVPNGatewayConnectionOptionsModel.AdminStateUp = core.BoolPtr(true)
				updateVPNGatewayConnectionOptionsModel.DeadPeerDetection = vpnGatewayConnectionDpdPrototypeModel
				updateVPNGatewayConnectionOptionsModel.IkePolicy = ikePolicyIdentityModel
				updateVPNGatewayConnectionOptionsModel.IpsecPolicy = iPsecPolicyIdentityModel
				updateVPNGatewayConnectionOptionsModel.Name = core.StringPtr("my-vpn-connection")
				updateVPNGatewayConnectionOptionsModel.PeerAddress = core.StringPtr("169.21.50.5")
				updateVPNGatewayConnectionOptionsModel.Psk = core.StringPtr("lkj14b1oi0alcniejkso")
				updateVPNGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateVPNGatewayConnection(updateVPNGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateVPNGatewayConnection(updateVPNGatewayConnectionOptions *UpdateVPNGatewayConnectionOptions)`, func() {
		version := "testString"
		updateVPNGatewayConnectionPath := "/vpn_gateways/testString/connections/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateVPNGatewayConnectionPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy"}, "ipsec_policy": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy"}, "local_cidrs": ["192.168.1.0/24"], "name": "my-vpn-connection", "peer_address": "169.21.50.5", "peer_cidrs": ["10.45.1.0/24"], "psk": "lkj14b1oi0alcniejkso", "route_mode": "policy", "status": "down"}`)
				}))
			})
			It(`Invoke UpdateVPNGatewayConnection successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateVPNGatewayConnection(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the IPsecPolicyIdentityByID model
				iPsecPolicyIdentityModel := new(vpcclassicv1.IPsecPolicyIdentityByID)
				iPsecPolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the IkePolicyIdentityByID model
				ikePolicyIdentityModel := new(vpcclassicv1.IkePolicyIdentityByID)
				ikePolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the VPNGatewayConnectionDpdPrototype model
				vpnGatewayConnectionDpdPrototypeModel := new(vpcclassicv1.VPNGatewayConnectionDpdPrototype)
				vpnGatewayConnectionDpdPrototypeModel.Action = core.StringPtr("restart")
				vpnGatewayConnectionDpdPrototypeModel.Interval = core.Int64Ptr(int64(30))
				vpnGatewayConnectionDpdPrototypeModel.Timeout = core.Int64Ptr(int64(120))

				// Construct an instance of the UpdateVPNGatewayConnectionOptions model
				updateVPNGatewayConnectionOptionsModel := new(vpcclassicv1.UpdateVPNGatewayConnectionOptions)
				updateVPNGatewayConnectionOptionsModel.VPNGatewayID = core.StringPtr("testString")
				updateVPNGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				updateVPNGatewayConnectionOptionsModel.AdminStateUp = core.BoolPtr(true)
				updateVPNGatewayConnectionOptionsModel.DeadPeerDetection = vpnGatewayConnectionDpdPrototypeModel
				updateVPNGatewayConnectionOptionsModel.IkePolicy = ikePolicyIdentityModel
				updateVPNGatewayConnectionOptionsModel.IpsecPolicy = iPsecPolicyIdentityModel
				updateVPNGatewayConnectionOptionsModel.Name = core.StringPtr("my-vpn-connection")
				updateVPNGatewayConnectionOptionsModel.PeerAddress = core.StringPtr("169.21.50.5")
				updateVPNGatewayConnectionOptionsModel.Psk = core.StringPtr("lkj14b1oi0alcniejkso")
				updateVPNGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateVPNGatewayConnection(updateVPNGatewayConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateVPNGatewayConnection with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the IPsecPolicyIdentityByID model
				iPsecPolicyIdentityModel := new(vpcclassicv1.IPsecPolicyIdentityByID)
				iPsecPolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the IkePolicyIdentityByID model
				ikePolicyIdentityModel := new(vpcclassicv1.IkePolicyIdentityByID)
				ikePolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the VPNGatewayConnectionDpdPrototype model
				vpnGatewayConnectionDpdPrototypeModel := new(vpcclassicv1.VPNGatewayConnectionDpdPrototype)
				vpnGatewayConnectionDpdPrototypeModel.Action = core.StringPtr("restart")
				vpnGatewayConnectionDpdPrototypeModel.Interval = core.Int64Ptr(int64(30))
				vpnGatewayConnectionDpdPrototypeModel.Timeout = core.Int64Ptr(int64(120))

				// Construct an instance of the UpdateVPNGatewayConnectionOptions model
				updateVPNGatewayConnectionOptionsModel := new(vpcclassicv1.UpdateVPNGatewayConnectionOptions)
				updateVPNGatewayConnectionOptionsModel.VPNGatewayID = core.StringPtr("testString")
				updateVPNGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				updateVPNGatewayConnectionOptionsModel.AdminStateUp = core.BoolPtr(true)
				updateVPNGatewayConnectionOptionsModel.DeadPeerDetection = vpnGatewayConnectionDpdPrototypeModel
				updateVPNGatewayConnectionOptionsModel.IkePolicy = ikePolicyIdentityModel
				updateVPNGatewayConnectionOptionsModel.IpsecPolicy = iPsecPolicyIdentityModel
				updateVPNGatewayConnectionOptionsModel.Name = core.StringPtr("my-vpn-connection")
				updateVPNGatewayConnectionOptionsModel.PeerAddress = core.StringPtr("169.21.50.5")
				updateVPNGatewayConnectionOptionsModel.Psk = core.StringPtr("lkj14b1oi0alcniejkso")
				updateVPNGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateVPNGatewayConnection(updateVPNGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateVPNGatewayConnectionOptions model with no property values
				updateVPNGatewayConnectionOptionsModelNew := new(vpcclassicv1.UpdateVPNGatewayConnectionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateVPNGatewayConnection(updateVPNGatewayConnectionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVPNGatewayConnectionLocalCIDRs(listVPNGatewayConnectionLocalCIDRsOptions *ListVPNGatewayConnectionLocalCIDRsOptions) - Operation response error`, func() {
		version := "testString"
		listVPNGatewayConnectionLocalCIDRsPath := "/vpn_gateways/testString/connections/testString/local_cidrs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVPNGatewayConnectionLocalCIDRsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVPNGatewayConnectionLocalCIDRs with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVPNGatewayConnectionLocalCIDRsOptions model
				listVPNGatewayConnectionLocalCIDRsOptionsModel := new(vpcclassicv1.ListVPNGatewayConnectionLocalCIDRsOptions)
				listVPNGatewayConnectionLocalCIDRsOptionsModel.VPNGatewayID = core.StringPtr("testString")
				listVPNGatewayConnectionLocalCIDRsOptionsModel.ID = core.StringPtr("testString")
				listVPNGatewayConnectionLocalCIDRsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListVPNGatewayConnectionLocalCIDRs(listVPNGatewayConnectionLocalCIDRsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListVPNGatewayConnectionLocalCIDRs(listVPNGatewayConnectionLocalCIDRsOptions *ListVPNGatewayConnectionLocalCIDRsOptions)`, func() {
		version := "testString"
		listVPNGatewayConnectionLocalCIDRsPath := "/vpn_gateways/testString/connections/testString/local_cidrs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVPNGatewayConnectionLocalCIDRsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"local_cidrs": ["192.168.1.0/24"]}`)
				}))
			})
			It(`Invoke ListVPNGatewayConnectionLocalCIDRs successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListVPNGatewayConnectionLocalCIDRs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVPNGatewayConnectionLocalCIDRsOptions model
				listVPNGatewayConnectionLocalCIDRsOptionsModel := new(vpcclassicv1.ListVPNGatewayConnectionLocalCIDRsOptions)
				listVPNGatewayConnectionLocalCIDRsOptionsModel.VPNGatewayID = core.StringPtr("testString")
				listVPNGatewayConnectionLocalCIDRsOptionsModel.ID = core.StringPtr("testString")
				listVPNGatewayConnectionLocalCIDRsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListVPNGatewayConnectionLocalCIDRs(listVPNGatewayConnectionLocalCIDRsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListVPNGatewayConnectionLocalCIDRs with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVPNGatewayConnectionLocalCIDRsOptions model
				listVPNGatewayConnectionLocalCIDRsOptionsModel := new(vpcclassicv1.ListVPNGatewayConnectionLocalCIDRsOptions)
				listVPNGatewayConnectionLocalCIDRsOptionsModel.VPNGatewayID = core.StringPtr("testString")
				listVPNGatewayConnectionLocalCIDRsOptionsModel.ID = core.StringPtr("testString")
				listVPNGatewayConnectionLocalCIDRsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListVPNGatewayConnectionLocalCIDRs(listVPNGatewayConnectionLocalCIDRsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListVPNGatewayConnectionLocalCIDRsOptions model with no property values
				listVPNGatewayConnectionLocalCIDRsOptionsModelNew := new(vpcclassicv1.ListVPNGatewayConnectionLocalCIDRsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListVPNGatewayConnectionLocalCIDRs(listVPNGatewayConnectionLocalCIDRsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`RemoveVPNGatewayConnectionLocalCIDR(removeVPNGatewayConnectionLocalCIDROptions *RemoveVPNGatewayConnectionLocalCIDROptions)`, func() {
		version := "testString"
		removeVPNGatewayConnectionLocalCIDRPath := "/vpn_gateways/testString/connections/testString/local_cidrs/testString/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(removeVPNGatewayConnectionLocalCIDRPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke RemoveVPNGatewayConnectionLocalCIDR successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.RemoveVPNGatewayConnectionLocalCIDR(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the RemoveVPNGatewayConnectionLocalCIDROptions model
				removeVPNGatewayConnectionLocalCIDROptionsModel := new(vpcclassicv1.RemoveVPNGatewayConnectionLocalCIDROptions)
				removeVPNGatewayConnectionLocalCIDROptionsModel.VPNGatewayID = core.StringPtr("testString")
				removeVPNGatewayConnectionLocalCIDROptionsModel.ID = core.StringPtr("testString")
				removeVPNGatewayConnectionLocalCIDROptionsModel.CIDRPrefix = core.StringPtr("testString")
				removeVPNGatewayConnectionLocalCIDROptionsModel.PrefixLength = core.StringPtr("testString")
				removeVPNGatewayConnectionLocalCIDROptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.RemoveVPNGatewayConnectionLocalCIDR(removeVPNGatewayConnectionLocalCIDROptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke RemoveVPNGatewayConnectionLocalCIDR with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the RemoveVPNGatewayConnectionLocalCIDROptions model
				removeVPNGatewayConnectionLocalCIDROptionsModel := new(vpcclassicv1.RemoveVPNGatewayConnectionLocalCIDROptions)
				removeVPNGatewayConnectionLocalCIDROptionsModel.VPNGatewayID = core.StringPtr("testString")
				removeVPNGatewayConnectionLocalCIDROptionsModel.ID = core.StringPtr("testString")
				removeVPNGatewayConnectionLocalCIDROptionsModel.CIDRPrefix = core.StringPtr("testString")
				removeVPNGatewayConnectionLocalCIDROptionsModel.PrefixLength = core.StringPtr("testString")
				removeVPNGatewayConnectionLocalCIDROptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.RemoveVPNGatewayConnectionLocalCIDR(removeVPNGatewayConnectionLocalCIDROptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the RemoveVPNGatewayConnectionLocalCIDROptions model with no property values
				removeVPNGatewayConnectionLocalCIDROptionsModelNew := new(vpcclassicv1.RemoveVPNGatewayConnectionLocalCIDROptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.RemoveVPNGatewayConnectionLocalCIDR(removeVPNGatewayConnectionLocalCIDROptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CheckVPNGatewayConnectionLocalCIDR(checkVPNGatewayConnectionLocalCIDROptions *CheckVPNGatewayConnectionLocalCIDROptions)`, func() {
		version := "testString"
		checkVPNGatewayConnectionLocalCIDRPath := "/vpn_gateways/testString/connections/testString/local_cidrs/testString/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(checkVPNGatewayConnectionLocalCIDRPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke CheckVPNGatewayConnectionLocalCIDR successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.CheckVPNGatewayConnectionLocalCIDR(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the CheckVPNGatewayConnectionLocalCIDROptions model
				checkVPNGatewayConnectionLocalCIDROptionsModel := new(vpcclassicv1.CheckVPNGatewayConnectionLocalCIDROptions)
				checkVPNGatewayConnectionLocalCIDROptionsModel.VPNGatewayID = core.StringPtr("testString")
				checkVPNGatewayConnectionLocalCIDROptionsModel.ID = core.StringPtr("testString")
				checkVPNGatewayConnectionLocalCIDROptionsModel.CIDRPrefix = core.StringPtr("testString")
				checkVPNGatewayConnectionLocalCIDROptionsModel.PrefixLength = core.StringPtr("testString")
				checkVPNGatewayConnectionLocalCIDROptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.CheckVPNGatewayConnectionLocalCIDR(checkVPNGatewayConnectionLocalCIDROptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke CheckVPNGatewayConnectionLocalCIDR with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the CheckVPNGatewayConnectionLocalCIDROptions model
				checkVPNGatewayConnectionLocalCIDROptionsModel := new(vpcclassicv1.CheckVPNGatewayConnectionLocalCIDROptions)
				checkVPNGatewayConnectionLocalCIDROptionsModel.VPNGatewayID = core.StringPtr("testString")
				checkVPNGatewayConnectionLocalCIDROptionsModel.ID = core.StringPtr("testString")
				checkVPNGatewayConnectionLocalCIDROptionsModel.CIDRPrefix = core.StringPtr("testString")
				checkVPNGatewayConnectionLocalCIDROptionsModel.PrefixLength = core.StringPtr("testString")
				checkVPNGatewayConnectionLocalCIDROptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.CheckVPNGatewayConnectionLocalCIDR(checkVPNGatewayConnectionLocalCIDROptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the CheckVPNGatewayConnectionLocalCIDROptions model with no property values
				checkVPNGatewayConnectionLocalCIDROptionsModelNew := new(vpcclassicv1.CheckVPNGatewayConnectionLocalCIDROptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.CheckVPNGatewayConnectionLocalCIDR(checkVPNGatewayConnectionLocalCIDROptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`AddVPNGatewayConnectionLocalCIDR(addVPNGatewayConnectionLocalCIDROptions *AddVPNGatewayConnectionLocalCIDROptions)`, func() {
		version := "testString"
		addVPNGatewayConnectionLocalCIDRPath := "/vpn_gateways/testString/connections/testString/local_cidrs/testString/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(addVPNGatewayConnectionLocalCIDRPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke AddVPNGatewayConnectionLocalCIDR successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.AddVPNGatewayConnectionLocalCIDR(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the AddVPNGatewayConnectionLocalCIDROptions model
				addVPNGatewayConnectionLocalCIDROptionsModel := new(vpcclassicv1.AddVPNGatewayConnectionLocalCIDROptions)
				addVPNGatewayConnectionLocalCIDROptionsModel.VPNGatewayID = core.StringPtr("testString")
				addVPNGatewayConnectionLocalCIDROptionsModel.ID = core.StringPtr("testString")
				addVPNGatewayConnectionLocalCIDROptionsModel.CIDRPrefix = core.StringPtr("testString")
				addVPNGatewayConnectionLocalCIDROptionsModel.PrefixLength = core.StringPtr("testString")
				addVPNGatewayConnectionLocalCIDROptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.AddVPNGatewayConnectionLocalCIDR(addVPNGatewayConnectionLocalCIDROptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke AddVPNGatewayConnectionLocalCIDR with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the AddVPNGatewayConnectionLocalCIDROptions model
				addVPNGatewayConnectionLocalCIDROptionsModel := new(vpcclassicv1.AddVPNGatewayConnectionLocalCIDROptions)
				addVPNGatewayConnectionLocalCIDROptionsModel.VPNGatewayID = core.StringPtr("testString")
				addVPNGatewayConnectionLocalCIDROptionsModel.ID = core.StringPtr("testString")
				addVPNGatewayConnectionLocalCIDROptionsModel.CIDRPrefix = core.StringPtr("testString")
				addVPNGatewayConnectionLocalCIDROptionsModel.PrefixLength = core.StringPtr("testString")
				addVPNGatewayConnectionLocalCIDROptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.AddVPNGatewayConnectionLocalCIDR(addVPNGatewayConnectionLocalCIDROptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the AddVPNGatewayConnectionLocalCIDROptions model with no property values
				addVPNGatewayConnectionLocalCIDROptionsModelNew := new(vpcclassicv1.AddVPNGatewayConnectionLocalCIDROptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.AddVPNGatewayConnectionLocalCIDR(addVPNGatewayConnectionLocalCIDROptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVPNGatewayConnectionPeerCIDRs(listVPNGatewayConnectionPeerCIDRsOptions *ListVPNGatewayConnectionPeerCIDRsOptions) - Operation response error`, func() {
		version := "testString"
		listVPNGatewayConnectionPeerCIDRsPath := "/vpn_gateways/testString/connections/testString/peer_cidrs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVPNGatewayConnectionPeerCIDRsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVPNGatewayConnectionPeerCIDRs with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVPNGatewayConnectionPeerCIDRsOptions model
				listVPNGatewayConnectionPeerCIDRsOptionsModel := new(vpcclassicv1.ListVPNGatewayConnectionPeerCIDRsOptions)
				listVPNGatewayConnectionPeerCIDRsOptionsModel.VPNGatewayID = core.StringPtr("testString")
				listVPNGatewayConnectionPeerCIDRsOptionsModel.ID = core.StringPtr("testString")
				listVPNGatewayConnectionPeerCIDRsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListVPNGatewayConnectionPeerCIDRs(listVPNGatewayConnectionPeerCIDRsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListVPNGatewayConnectionPeerCIDRs(listVPNGatewayConnectionPeerCIDRsOptions *ListVPNGatewayConnectionPeerCIDRsOptions)`, func() {
		version := "testString"
		listVPNGatewayConnectionPeerCIDRsPath := "/vpn_gateways/testString/connections/testString/peer_cidrs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVPNGatewayConnectionPeerCIDRsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"peer_cidrs": ["10.45.1.0/24"]}`)
				}))
			})
			It(`Invoke ListVPNGatewayConnectionPeerCIDRs successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListVPNGatewayConnectionPeerCIDRs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVPNGatewayConnectionPeerCIDRsOptions model
				listVPNGatewayConnectionPeerCIDRsOptionsModel := new(vpcclassicv1.ListVPNGatewayConnectionPeerCIDRsOptions)
				listVPNGatewayConnectionPeerCIDRsOptionsModel.VPNGatewayID = core.StringPtr("testString")
				listVPNGatewayConnectionPeerCIDRsOptionsModel.ID = core.StringPtr("testString")
				listVPNGatewayConnectionPeerCIDRsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListVPNGatewayConnectionPeerCIDRs(listVPNGatewayConnectionPeerCIDRsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListVPNGatewayConnectionPeerCIDRs with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVPNGatewayConnectionPeerCIDRsOptions model
				listVPNGatewayConnectionPeerCIDRsOptionsModel := new(vpcclassicv1.ListVPNGatewayConnectionPeerCIDRsOptions)
				listVPNGatewayConnectionPeerCIDRsOptionsModel.VPNGatewayID = core.StringPtr("testString")
				listVPNGatewayConnectionPeerCIDRsOptionsModel.ID = core.StringPtr("testString")
				listVPNGatewayConnectionPeerCIDRsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListVPNGatewayConnectionPeerCIDRs(listVPNGatewayConnectionPeerCIDRsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListVPNGatewayConnectionPeerCIDRsOptions model with no property values
				listVPNGatewayConnectionPeerCIDRsOptionsModelNew := new(vpcclassicv1.ListVPNGatewayConnectionPeerCIDRsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.ListVPNGatewayConnectionPeerCIDRs(listVPNGatewayConnectionPeerCIDRsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`RemoveVPNGatewayConnectionPeerCIDR(removeVPNGatewayConnectionPeerCIDROptions *RemoveVPNGatewayConnectionPeerCIDROptions)`, func() {
		version := "testString"
		removeVPNGatewayConnectionPeerCIDRPath := "/vpn_gateways/testString/connections/testString/peer_cidrs/testString/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(removeVPNGatewayConnectionPeerCIDRPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke RemoveVPNGatewayConnectionPeerCIDR successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.RemoveVPNGatewayConnectionPeerCIDR(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the RemoveVPNGatewayConnectionPeerCIDROptions model
				removeVPNGatewayConnectionPeerCIDROptionsModel := new(vpcclassicv1.RemoveVPNGatewayConnectionPeerCIDROptions)
				removeVPNGatewayConnectionPeerCIDROptionsModel.VPNGatewayID = core.StringPtr("testString")
				removeVPNGatewayConnectionPeerCIDROptionsModel.ID = core.StringPtr("testString")
				removeVPNGatewayConnectionPeerCIDROptionsModel.CIDRPrefix = core.StringPtr("testString")
				removeVPNGatewayConnectionPeerCIDROptionsModel.PrefixLength = core.StringPtr("testString")
				removeVPNGatewayConnectionPeerCIDROptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.RemoveVPNGatewayConnectionPeerCIDR(removeVPNGatewayConnectionPeerCIDROptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke RemoveVPNGatewayConnectionPeerCIDR with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the RemoveVPNGatewayConnectionPeerCIDROptions model
				removeVPNGatewayConnectionPeerCIDROptionsModel := new(vpcclassicv1.RemoveVPNGatewayConnectionPeerCIDROptions)
				removeVPNGatewayConnectionPeerCIDROptionsModel.VPNGatewayID = core.StringPtr("testString")
				removeVPNGatewayConnectionPeerCIDROptionsModel.ID = core.StringPtr("testString")
				removeVPNGatewayConnectionPeerCIDROptionsModel.CIDRPrefix = core.StringPtr("testString")
				removeVPNGatewayConnectionPeerCIDROptionsModel.PrefixLength = core.StringPtr("testString")
				removeVPNGatewayConnectionPeerCIDROptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.RemoveVPNGatewayConnectionPeerCIDR(removeVPNGatewayConnectionPeerCIDROptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the RemoveVPNGatewayConnectionPeerCIDROptions model with no property values
				removeVPNGatewayConnectionPeerCIDROptionsModelNew := new(vpcclassicv1.RemoveVPNGatewayConnectionPeerCIDROptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.RemoveVPNGatewayConnectionPeerCIDR(removeVPNGatewayConnectionPeerCIDROptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CheckVPNGatewayConnectionPeerCIDR(checkVPNGatewayConnectionPeerCIDROptions *CheckVPNGatewayConnectionPeerCIDROptions)`, func() {
		version := "testString"
		checkVPNGatewayConnectionPeerCIDRPath := "/vpn_gateways/testString/connections/testString/peer_cidrs/testString/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(checkVPNGatewayConnectionPeerCIDRPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke CheckVPNGatewayConnectionPeerCIDR successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.CheckVPNGatewayConnectionPeerCIDR(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the CheckVPNGatewayConnectionPeerCIDROptions model
				checkVPNGatewayConnectionPeerCIDROptionsModel := new(vpcclassicv1.CheckVPNGatewayConnectionPeerCIDROptions)
				checkVPNGatewayConnectionPeerCIDROptionsModel.VPNGatewayID = core.StringPtr("testString")
				checkVPNGatewayConnectionPeerCIDROptionsModel.ID = core.StringPtr("testString")
				checkVPNGatewayConnectionPeerCIDROptionsModel.CIDRPrefix = core.StringPtr("testString")
				checkVPNGatewayConnectionPeerCIDROptionsModel.PrefixLength = core.StringPtr("testString")
				checkVPNGatewayConnectionPeerCIDROptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.CheckVPNGatewayConnectionPeerCIDR(checkVPNGatewayConnectionPeerCIDROptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke CheckVPNGatewayConnectionPeerCIDR with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the CheckVPNGatewayConnectionPeerCIDROptions model
				checkVPNGatewayConnectionPeerCIDROptionsModel := new(vpcclassicv1.CheckVPNGatewayConnectionPeerCIDROptions)
				checkVPNGatewayConnectionPeerCIDROptionsModel.VPNGatewayID = core.StringPtr("testString")
				checkVPNGatewayConnectionPeerCIDROptionsModel.ID = core.StringPtr("testString")
				checkVPNGatewayConnectionPeerCIDROptionsModel.CIDRPrefix = core.StringPtr("testString")
				checkVPNGatewayConnectionPeerCIDROptionsModel.PrefixLength = core.StringPtr("testString")
				checkVPNGatewayConnectionPeerCIDROptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.CheckVPNGatewayConnectionPeerCIDR(checkVPNGatewayConnectionPeerCIDROptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the CheckVPNGatewayConnectionPeerCIDROptions model with no property values
				checkVPNGatewayConnectionPeerCIDROptionsModelNew := new(vpcclassicv1.CheckVPNGatewayConnectionPeerCIDROptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.CheckVPNGatewayConnectionPeerCIDR(checkVPNGatewayConnectionPeerCIDROptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`AddVPNGatewayConnectionPeerCIDR(addVPNGatewayConnectionPeerCIDROptions *AddVPNGatewayConnectionPeerCIDROptions)`, func() {
		version := "testString"
		addVPNGatewayConnectionPeerCIDRPath := "/vpn_gateways/testString/connections/testString/peer_cidrs/testString/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(addVPNGatewayConnectionPeerCIDRPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke AddVPNGatewayConnectionPeerCIDR successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.AddVPNGatewayConnectionPeerCIDR(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the AddVPNGatewayConnectionPeerCIDROptions model
				addVPNGatewayConnectionPeerCIDROptionsModel := new(vpcclassicv1.AddVPNGatewayConnectionPeerCIDROptions)
				addVPNGatewayConnectionPeerCIDROptionsModel.VPNGatewayID = core.StringPtr("testString")
				addVPNGatewayConnectionPeerCIDROptionsModel.ID = core.StringPtr("testString")
				addVPNGatewayConnectionPeerCIDROptionsModel.CIDRPrefix = core.StringPtr("testString")
				addVPNGatewayConnectionPeerCIDROptionsModel.PrefixLength = core.StringPtr("testString")
				addVPNGatewayConnectionPeerCIDROptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.AddVPNGatewayConnectionPeerCIDR(addVPNGatewayConnectionPeerCIDROptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke AddVPNGatewayConnectionPeerCIDR with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the AddVPNGatewayConnectionPeerCIDROptions model
				addVPNGatewayConnectionPeerCIDROptionsModel := new(vpcclassicv1.AddVPNGatewayConnectionPeerCIDROptions)
				addVPNGatewayConnectionPeerCIDROptionsModel.VPNGatewayID = core.StringPtr("testString")
				addVPNGatewayConnectionPeerCIDROptionsModel.ID = core.StringPtr("testString")
				addVPNGatewayConnectionPeerCIDROptionsModel.CIDRPrefix = core.StringPtr("testString")
				addVPNGatewayConnectionPeerCIDROptionsModel.PrefixLength = core.StringPtr("testString")
				addVPNGatewayConnectionPeerCIDROptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.AddVPNGatewayConnectionPeerCIDR(addVPNGatewayConnectionPeerCIDROptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the AddVPNGatewayConnectionPeerCIDROptions model with no property values
				addVPNGatewayConnectionPeerCIDROptionsModelNew := new(vpcclassicv1.AddVPNGatewayConnectionPeerCIDROptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.AddVPNGatewayConnectionPeerCIDR(addVPNGatewayConnectionPeerCIDROptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			Expect(testService).ToNot(BeNil())
			Expect(testServiceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				URL:     "{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				URL:     "https://vpcclassicv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{})
			Expect(testService).To(BeNil())
			Expect(testServiceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_URL":       "https://vpcclassicv1/api",
				"VPC_CLASSIC_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					URL:     "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
					Version: core.StringPtr(version),
				})
				err := testService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(testService).ToNot(BeNil())
				Expect(testServiceErr).To(BeNil())
				Expect(testService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_URL":       "https://vpcclassicv1/api",
				"VPC_CLASSIC_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_CLASSIC_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			testService, testServiceErr := vpcclassicv1.NewVpcClassicV1UsingExternalConfig(&vpcclassicv1.VpcClassicV1Options{
				URL:     "{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(testService).To(BeNil())
				Expect(testServiceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`ListVolumeProfiles(listVolumeProfilesOptions *ListVolumeProfilesOptions) - Operation response error`, func() {
		version := "testString"
		listVolumeProfilesPath := "/volume/profiles"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVolumeProfilesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVolumeProfiles with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVolumeProfilesOptions model
				listVolumeProfilesOptionsModel := new(vpcclassicv1.ListVolumeProfilesOptions)
				listVolumeProfilesOptionsModel.Start = core.StringPtr("testString")
				listVolumeProfilesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVolumeProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListVolumeProfiles(listVolumeProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListVolumeProfiles(listVolumeProfilesOptions *ListVolumeProfilesOptions)`, func() {
		version := "testString"
		listVolumeProfilesPath := "/volume/profiles"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVolumeProfilesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "profiles": [{"family": "tiered", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}], "total_count": 132}`)
				}))
			})
			It(`Invoke ListVolumeProfiles successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListVolumeProfiles(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVolumeProfilesOptions model
				listVolumeProfilesOptionsModel := new(vpcclassicv1.ListVolumeProfilesOptions)
				listVolumeProfilesOptionsModel.Start = core.StringPtr("testString")
				listVolumeProfilesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVolumeProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListVolumeProfiles(listVolumeProfilesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListVolumeProfiles with error: Operation request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVolumeProfilesOptions model
				listVolumeProfilesOptionsModel := new(vpcclassicv1.ListVolumeProfilesOptions)
				listVolumeProfilesOptionsModel.Start = core.StringPtr("testString")
				listVolumeProfilesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVolumeProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListVolumeProfiles(listVolumeProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVolumeProfile(getVolumeProfileOptions *GetVolumeProfileOptions) - Operation response error`, func() {
		version := "testString"
		getVolumeProfilePath := "/volume/profiles/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVolumeProfilePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVolumeProfile with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVolumeProfileOptions model
				getVolumeProfileOptionsModel := new(vpcclassicv1.GetVolumeProfileOptions)
				getVolumeProfileOptionsModel.Name = core.StringPtr("testString")
				getVolumeProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetVolumeProfile(getVolumeProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetVolumeProfile(getVolumeProfileOptions *GetVolumeProfileOptions)`, func() {
		version := "testString"
		getVolumeProfilePath := "/volume/profiles/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVolumeProfilePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"family": "tiered", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}`)
				}))
			})
			It(`Invoke GetVolumeProfile successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetVolumeProfile(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVolumeProfileOptions model
				getVolumeProfileOptionsModel := new(vpcclassicv1.GetVolumeProfileOptions)
				getVolumeProfileOptionsModel.Name = core.StringPtr("testString")
				getVolumeProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetVolumeProfile(getVolumeProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetVolumeProfile with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVolumeProfileOptions model
				getVolumeProfileOptionsModel := new(vpcclassicv1.GetVolumeProfileOptions)
				getVolumeProfileOptionsModel.Name = core.StringPtr("testString")
				getVolumeProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetVolumeProfile(getVolumeProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVolumeProfileOptions model with no property values
				getVolumeProfileOptionsModelNew := new(vpcclassicv1.GetVolumeProfileOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetVolumeProfile(getVolumeProfileOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVolumes(listVolumesOptions *ListVolumesOptions) - Operation response error`, func() {
		version := "testString"
		listVolumesPath := "/volumes"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVolumesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["zone.name"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVolumes with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVolumesOptions model
				listVolumesOptionsModel := new(vpcclassicv1.ListVolumesOptions)
				listVolumesOptionsModel.Start = core.StringPtr("testString")
				listVolumesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVolumesOptionsModel.Name = core.StringPtr("testString")
				listVolumesOptionsModel.ZoneName = core.StringPtr("testString")
				listVolumesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.ListVolumes(listVolumesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListVolumes(listVolumesOptions *ListVolumesOptions)`, func() {
		version := "testString"
		listVolumesPath := "/volumes"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(listVolumesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["zone.name"]).To(Equal([]string{"testString"}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volumes?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volumes?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "volumes": [{"capacity": 100, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "encryption": "provider_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "iops": 10000, "name": "my-volume", "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "status": "available", "volume_attachments": [{"device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "instance": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "name": "my-volume-attachment", "type": "boot"}], "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}]}`)
				}))
			})
			It(`Invoke ListVolumes successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.ListVolumes(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVolumesOptions model
				listVolumesOptionsModel := new(vpcclassicv1.ListVolumesOptions)
				listVolumesOptionsModel.Start = core.StringPtr("testString")
				listVolumesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVolumesOptionsModel.Name = core.StringPtr("testString")
				listVolumesOptionsModel.ZoneName = core.StringPtr("testString")
				listVolumesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.ListVolumes(listVolumesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListVolumes with error: Operation request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the ListVolumesOptions model
				listVolumesOptionsModel := new(vpcclassicv1.ListVolumesOptions)
				listVolumesOptionsModel.Start = core.StringPtr("testString")
				listVolumesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVolumesOptionsModel.Name = core.StringPtr("testString")
				listVolumesOptionsModel.ZoneName = core.StringPtr("testString")
				listVolumesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.ListVolumes(listVolumesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVolume(createVolumeOptions *CreateVolumeOptions) - Operation response error`, func() {
		version := "testString"
		createVolumePath := "/volumes"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createVolumePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateVolume with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcclassicv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcclassicv1.VolumeProfileIdentityByName)
				volumeProfileIdentityModel.Name = core.StringPtr("general-purpose")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcclassicv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the VolumePrototypeVolumeByCapacity model
				volumePrototypeModel := new(vpcclassicv1.VolumePrototypeVolumeByCapacity)
				volumePrototypeModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeModel.Iops = core.Int64Ptr(int64(10000))
				volumePrototypeModel.Name = core.StringPtr("my-volume")
				volumePrototypeModel.Profile = volumeProfileIdentityModel
				volumePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				volumePrototypeModel.Zone = zoneIdentityModel
				volumePrototypeModel.Capacity = core.Int64Ptr(int64(100))

				// Construct an instance of the CreateVolumeOptions model
				createVolumeOptionsModel := new(vpcclassicv1.CreateVolumeOptions)
				createVolumeOptionsModel.VolumePrototype = volumePrototypeModel
				createVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.CreateVolume(createVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateVolume(createVolumeOptions *CreateVolumeOptions)`, func() {
		version := "testString"
		createVolumePath := "/volumes"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(createVolumePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `{"capacity": 100, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "encryption": "provider_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "iops": 10000, "name": "my-volume", "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "status": "available", "volume_attachments": [{"device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "instance": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "name": "my-volume-attachment", "type": "boot"}], "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreateVolume successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.CreateVolume(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcclassicv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcclassicv1.VolumeProfileIdentityByName)
				volumeProfileIdentityModel.Name = core.StringPtr("general-purpose")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcclassicv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the VolumePrototypeVolumeByCapacity model
				volumePrototypeModel := new(vpcclassicv1.VolumePrototypeVolumeByCapacity)
				volumePrototypeModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeModel.Iops = core.Int64Ptr(int64(10000))
				volumePrototypeModel.Name = core.StringPtr("my-volume")
				volumePrototypeModel.Profile = volumeProfileIdentityModel
				volumePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				volumePrototypeModel.Zone = zoneIdentityModel
				volumePrototypeModel.Capacity = core.Int64Ptr(int64(100))

				// Construct an instance of the CreateVolumeOptions model
				createVolumeOptionsModel := new(vpcclassicv1.CreateVolumeOptions)
				createVolumeOptionsModel.VolumePrototype = volumePrototypeModel
				createVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.CreateVolume(createVolumeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateVolume with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcclassicv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcclassicv1.VolumeProfileIdentityByName)
				volumeProfileIdentityModel.Name = core.StringPtr("general-purpose")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcclassicv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the VolumePrototypeVolumeByCapacity model
				volumePrototypeModel := new(vpcclassicv1.VolumePrototypeVolumeByCapacity)
				volumePrototypeModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeModel.Iops = core.Int64Ptr(int64(10000))
				volumePrototypeModel.Name = core.StringPtr("my-volume")
				volumePrototypeModel.Profile = volumeProfileIdentityModel
				volumePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				volumePrototypeModel.Zone = zoneIdentityModel
				volumePrototypeModel.Capacity = core.Int64Ptr(int64(100))

				// Construct an instance of the CreateVolumeOptions model
				createVolumeOptionsModel := new(vpcclassicv1.CreateVolumeOptions)
				createVolumeOptionsModel.VolumePrototype = volumePrototypeModel
				createVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.CreateVolume(createVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateVolumeOptions model with no property values
				createVolumeOptionsModelNew := new(vpcclassicv1.CreateVolumeOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.CreateVolume(createVolumeOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteVolume(deleteVolumeOptions *DeleteVolumeOptions)`, func() {
		version := "testString"
		deleteVolumePath := "/volumes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(deleteVolumePath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteVolume successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := testService.DeleteVolume(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteVolumeOptions model
				deleteVolumeOptionsModel := new(vpcclassicv1.DeleteVolumeOptions)
				deleteVolumeOptionsModel.ID = core.StringPtr("testString")
				deleteVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = testService.DeleteVolume(deleteVolumeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteVolume with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the DeleteVolumeOptions model
				deleteVolumeOptionsModel := new(vpcclassicv1.DeleteVolumeOptions)
				deleteVolumeOptionsModel.ID = core.StringPtr("testString")
				deleteVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := testService.DeleteVolume(deleteVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteVolumeOptions model with no property values
				deleteVolumeOptionsModelNew := new(vpcclassicv1.DeleteVolumeOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = testService.DeleteVolume(deleteVolumeOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVolume(getVolumeOptions *GetVolumeOptions) - Operation response error`, func() {
		version := "testString"
		getVolumePath := "/volumes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVolumePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVolume with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVolumeOptions model
				getVolumeOptionsModel := new(vpcclassicv1.GetVolumeOptions)
				getVolumeOptionsModel.ID = core.StringPtr("testString")
				getVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.GetVolume(getVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetVolume(getVolumeOptions *GetVolumeOptions)`, func() {
		version := "testString"
		getVolumePath := "/volumes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(getVolumePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"capacity": 100, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "encryption": "provider_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "iops": 10000, "name": "my-volume", "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "status": "available", "volume_attachments": [{"device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "instance": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "name": "my-volume-attachment", "type": "boot"}], "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetVolume successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.GetVolume(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVolumeOptions model
				getVolumeOptionsModel := new(vpcclassicv1.GetVolumeOptions)
				getVolumeOptionsModel.ID = core.StringPtr("testString")
				getVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.GetVolume(getVolumeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetVolume with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the GetVolumeOptions model
				getVolumeOptionsModel := new(vpcclassicv1.GetVolumeOptions)
				getVolumeOptionsModel.ID = core.StringPtr("testString")
				getVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.GetVolume(getVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVolumeOptions model with no property values
				getVolumeOptionsModelNew := new(vpcclassicv1.GetVolumeOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.GetVolume(getVolumeOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVolume(updateVolumeOptions *UpdateVolumeOptions) - Operation response error`, func() {
		version := "testString"
		updateVolumePath := "/volumes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateVolumePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateVolume with error: Operation response processing error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateVolumeOptions model
				updateVolumeOptionsModel := new(vpcclassicv1.UpdateVolumeOptions)
				updateVolumeOptionsModel.ID = core.StringPtr("testString")
				updateVolumeOptionsModel.Name = core.StringPtr("my-volume")
				updateVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := testService.UpdateVolume(updateVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateVolume(updateVolumeOptions *UpdateVolumeOptions)`, func() {
		version := "testString"
		updateVolumePath := "/volumes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.Path).To(Equal(updateVolumePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))

					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(1))}))

					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `{"capacity": 100, "created_at": "2019-01-01T12:00:00", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "encryption": "provider_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "iops": 10000, "name": "my-volume", "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345"}, "status": "available", "volume_attachments": [{"device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "instance": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "name": "my-volume-attachment", "type": "boot"}], "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateVolume successfully`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := testService.UpdateVolume(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateVolumeOptions model
				updateVolumeOptionsModel := new(vpcclassicv1.UpdateVolumeOptions)
				updateVolumeOptionsModel.ID = core.StringPtr("testString")
				updateVolumeOptionsModel.Name = core.StringPtr("my-volume")
				updateVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = testService.UpdateVolume(updateVolumeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateVolume with error: Operation validation and request error`, func() {
				testService, testServiceErr := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(testServiceErr).To(BeNil())
				Expect(testService).ToNot(BeNil())

				// Construct an instance of the UpdateVolumeOptions model
				updateVolumeOptionsModel := new(vpcclassicv1.UpdateVolumeOptions)
				updateVolumeOptionsModel.ID = core.StringPtr("testString")
				updateVolumeOptionsModel.Name = core.StringPtr("my-volume")
				updateVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := testService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := testService.UpdateVolume(updateVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateVolumeOptions model with no property values
				updateVolumeOptionsModelNew := new(vpcclassicv1.UpdateVolumeOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = testService.UpdateVolume(updateVolumeOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Model constructor tests`, func() {
		Context(`Using a service client instance`, func() {
			version := "testString"
			testService, _ := vpcclassicv1.NewVpcClassicV1(&vpcclassicv1.VpcClassicV1Options{
				URL:           "http://vpcclassicv1modelgenerator.com",
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			It(`Invoke NewAddInstanceNetworkInterfaceFloatingIPOptions successfully`, func() {
				// Construct an instance of the AddInstanceNetworkInterfaceFloatingIPOptions model
				instanceID := "testString"
				networkInterfaceID := "testString"
				id := "testString"
				addInstanceNetworkInterfaceFloatingIPOptionsModel := testService.NewAddInstanceNetworkInterfaceFloatingIPOptions(instanceID, networkInterfaceID, id)
				addInstanceNetworkInterfaceFloatingIPOptionsModel.SetInstanceID("testString")
				addInstanceNetworkInterfaceFloatingIPOptionsModel.SetNetworkInterfaceID("testString")
				addInstanceNetworkInterfaceFloatingIPOptionsModel.SetID("testString")
				addInstanceNetworkInterfaceFloatingIPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(addInstanceNetworkInterfaceFloatingIPOptionsModel).ToNot(BeNil())
				Expect(addInstanceNetworkInterfaceFloatingIPOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(addInstanceNetworkInterfaceFloatingIPOptionsModel.NetworkInterfaceID).To(Equal(core.StringPtr("testString")))
				Expect(addInstanceNetworkInterfaceFloatingIPOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(addInstanceNetworkInterfaceFloatingIPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewAddSecurityGroupNetworkInterfaceOptions successfully`, func() {
				// Construct an instance of the AddSecurityGroupNetworkInterfaceOptions model
				securityGroupID := "testString"
				id := "testString"
				addSecurityGroupNetworkInterfaceOptionsModel := testService.NewAddSecurityGroupNetworkInterfaceOptions(securityGroupID, id)
				addSecurityGroupNetworkInterfaceOptionsModel.SetSecurityGroupID("testString")
				addSecurityGroupNetworkInterfaceOptionsModel.SetID("testString")
				addSecurityGroupNetworkInterfaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(addSecurityGroupNetworkInterfaceOptionsModel).ToNot(BeNil())
				Expect(addSecurityGroupNetworkInterfaceOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(addSecurityGroupNetworkInterfaceOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(addSecurityGroupNetworkInterfaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewAddVPNGatewayConnectionLocalCIDROptions successfully`, func() {
				// Construct an instance of the AddVPNGatewayConnectionLocalCIDROptions model
				vpnGatewayID := "testString"
				id := "testString"
				cidrPrefix := "testString"
				prefixLength := "testString"
				addVPNGatewayConnectionLocalCIDROptionsModel := testService.NewAddVPNGatewayConnectionLocalCIDROptions(vpnGatewayID, id, cidrPrefix, prefixLength)
				addVPNGatewayConnectionLocalCIDROptionsModel.SetVPNGatewayID("testString")
				addVPNGatewayConnectionLocalCIDROptionsModel.SetID("testString")
				addVPNGatewayConnectionLocalCIDROptionsModel.SetCIDRPrefix("testString")
				addVPNGatewayConnectionLocalCIDROptionsModel.SetPrefixLength("testString")
				addVPNGatewayConnectionLocalCIDROptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(addVPNGatewayConnectionLocalCIDROptionsModel).ToNot(BeNil())
				Expect(addVPNGatewayConnectionLocalCIDROptionsModel.VPNGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(addVPNGatewayConnectionLocalCIDROptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(addVPNGatewayConnectionLocalCIDROptionsModel.CIDRPrefix).To(Equal(core.StringPtr("testString")))
				Expect(addVPNGatewayConnectionLocalCIDROptionsModel.PrefixLength).To(Equal(core.StringPtr("testString")))
				Expect(addVPNGatewayConnectionLocalCIDROptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewAddVPNGatewayConnectionPeerCIDROptions successfully`, func() {
				// Construct an instance of the AddVPNGatewayConnectionPeerCIDROptions model
				vpnGatewayID := "testString"
				id := "testString"
				cidrPrefix := "testString"
				prefixLength := "testString"
				addVPNGatewayConnectionPeerCIDROptionsModel := testService.NewAddVPNGatewayConnectionPeerCIDROptions(vpnGatewayID, id, cidrPrefix, prefixLength)
				addVPNGatewayConnectionPeerCIDROptionsModel.SetVPNGatewayID("testString")
				addVPNGatewayConnectionPeerCIDROptionsModel.SetID("testString")
				addVPNGatewayConnectionPeerCIDROptionsModel.SetCIDRPrefix("testString")
				addVPNGatewayConnectionPeerCIDROptionsModel.SetPrefixLength("testString")
				addVPNGatewayConnectionPeerCIDROptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(addVPNGatewayConnectionPeerCIDROptionsModel).ToNot(BeNil())
				Expect(addVPNGatewayConnectionPeerCIDROptionsModel.VPNGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(addVPNGatewayConnectionPeerCIDROptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(addVPNGatewayConnectionPeerCIDROptionsModel.CIDRPrefix).To(Equal(core.StringPtr("testString")))
				Expect(addVPNGatewayConnectionPeerCIDROptionsModel.PrefixLength).To(Equal(core.StringPtr("testString")))
				Expect(addVPNGatewayConnectionPeerCIDROptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCheckVPNGatewayConnectionLocalCIDROptions successfully`, func() {
				// Construct an instance of the CheckVPNGatewayConnectionLocalCIDROptions model
				vpnGatewayID := "testString"
				id := "testString"
				cidrPrefix := "testString"
				prefixLength := "testString"
				checkVPNGatewayConnectionLocalCIDROptionsModel := testService.NewCheckVPNGatewayConnectionLocalCIDROptions(vpnGatewayID, id, cidrPrefix, prefixLength)
				checkVPNGatewayConnectionLocalCIDROptionsModel.SetVPNGatewayID("testString")
				checkVPNGatewayConnectionLocalCIDROptionsModel.SetID("testString")
				checkVPNGatewayConnectionLocalCIDROptionsModel.SetCIDRPrefix("testString")
				checkVPNGatewayConnectionLocalCIDROptionsModel.SetPrefixLength("testString")
				checkVPNGatewayConnectionLocalCIDROptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(checkVPNGatewayConnectionLocalCIDROptionsModel).ToNot(BeNil())
				Expect(checkVPNGatewayConnectionLocalCIDROptionsModel.VPNGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(checkVPNGatewayConnectionLocalCIDROptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(checkVPNGatewayConnectionLocalCIDROptionsModel.CIDRPrefix).To(Equal(core.StringPtr("testString")))
				Expect(checkVPNGatewayConnectionLocalCIDROptionsModel.PrefixLength).To(Equal(core.StringPtr("testString")))
				Expect(checkVPNGatewayConnectionLocalCIDROptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCheckVPNGatewayConnectionPeerCIDROptions successfully`, func() {
				// Construct an instance of the CheckVPNGatewayConnectionPeerCIDROptions model
				vpnGatewayID := "testString"
				id := "testString"
				cidrPrefix := "testString"
				prefixLength := "testString"
				checkVPNGatewayConnectionPeerCIDROptionsModel := testService.NewCheckVPNGatewayConnectionPeerCIDROptions(vpnGatewayID, id, cidrPrefix, prefixLength)
				checkVPNGatewayConnectionPeerCIDROptionsModel.SetVPNGatewayID("testString")
				checkVPNGatewayConnectionPeerCIDROptionsModel.SetID("testString")
				checkVPNGatewayConnectionPeerCIDROptionsModel.SetCIDRPrefix("testString")
				checkVPNGatewayConnectionPeerCIDROptionsModel.SetPrefixLength("testString")
				checkVPNGatewayConnectionPeerCIDROptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(checkVPNGatewayConnectionPeerCIDROptionsModel).ToNot(BeNil())
				Expect(checkVPNGatewayConnectionPeerCIDROptionsModel.VPNGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(checkVPNGatewayConnectionPeerCIDROptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(checkVPNGatewayConnectionPeerCIDROptionsModel.CIDRPrefix).To(Equal(core.StringPtr("testString")))
				Expect(checkVPNGatewayConnectionPeerCIDROptionsModel.PrefixLength).To(Equal(core.StringPtr("testString")))
				Expect(checkVPNGatewayConnectionPeerCIDROptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateFloatingIPOptions successfully`, func() {
				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcclassicv1.ZoneIdentityByName)
				Expect(zoneIdentityModel).ToNot(BeNil())
				zoneIdentityModel.Name = core.StringPtr("us-south-1")
				Expect(zoneIdentityModel.Name).To(Equal(core.StringPtr("us-south-1")))

				// Construct an instance of the FloatingIPPrototypeFloatingIPByZone model
				floatingIPPrototypeModel := new(vpcclassicv1.FloatingIPPrototypeFloatingIPByZone)
				Expect(floatingIPPrototypeModel).ToNot(BeNil())
				floatingIPPrototypeModel.Name = core.StringPtr("my-floating-ip")
				floatingIPPrototypeModel.Zone = zoneIdentityModel
				Expect(floatingIPPrototypeModel.Name).To(Equal(core.StringPtr("my-floating-ip")))
				Expect(floatingIPPrototypeModel.Zone).To(Equal(zoneIdentityModel))

				// Construct an instance of the CreateFloatingIPOptions model
				var floatingIPPrototype vpcclassicv1.FloatingIPPrototypeIntf = nil
				createFloatingIPOptionsModel := testService.NewCreateFloatingIPOptions(floatingIPPrototype)
				createFloatingIPOptionsModel.SetFloatingIPPrototype(floatingIPPrototypeModel)
				createFloatingIPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createFloatingIPOptionsModel).ToNot(BeNil())
				Expect(createFloatingIPOptionsModel.FloatingIPPrototype).To(Equal(floatingIPPrototypeModel))
				Expect(createFloatingIPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateIkePolicyOptions successfully`, func() {
				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the CreateIkePolicyOptions model
				createIkePolicyOptionsAuthenticationAlgorithm := "md5"
				createIkePolicyOptionsDhGroup := int64(2)
				createIkePolicyOptionsEncryptionAlgorithm := "triple_des"
				createIkePolicyOptionsIkeVersion := int64(1)
				createIkePolicyOptionsModel := testService.NewCreateIkePolicyOptions(createIkePolicyOptionsAuthenticationAlgorithm, createIkePolicyOptionsDhGroup, createIkePolicyOptionsEncryptionAlgorithm, createIkePolicyOptionsIkeVersion)
				createIkePolicyOptionsModel.SetAuthenticationAlgorithm("md5")
				createIkePolicyOptionsModel.SetDhGroup(int64(2))
				createIkePolicyOptionsModel.SetEncryptionAlgorithm("triple_des")
				createIkePolicyOptionsModel.SetIkeVersion(int64(1))
				createIkePolicyOptionsModel.SetKeyLifetime(int64(28800))
				createIkePolicyOptionsModel.SetName("my-ike-policy")
				createIkePolicyOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createIkePolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createIkePolicyOptionsModel).ToNot(BeNil())
				Expect(createIkePolicyOptionsModel.AuthenticationAlgorithm).To(Equal(core.StringPtr("md5")))
				Expect(createIkePolicyOptionsModel.DhGroup).To(Equal(core.Int64Ptr(int64(2))))
				Expect(createIkePolicyOptionsModel.EncryptionAlgorithm).To(Equal(core.StringPtr("triple_des")))
				Expect(createIkePolicyOptionsModel.IkeVersion).To(Equal(core.Int64Ptr(int64(1))))
				Expect(createIkePolicyOptionsModel.KeyLifetime).To(Equal(core.Int64Ptr(int64(28800))))
				Expect(createIkePolicyOptionsModel.Name).To(Equal(core.StringPtr("my-ike-policy")))
				Expect(createIkePolicyOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createIkePolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateImageOptions successfully`, func() {
				// Construct an instance of the ImageFilePrototype model
				imageFilePrototypeModel := new(vpcclassicv1.ImageFilePrototype)
				Expect(imageFilePrototypeModel).ToNot(BeNil())
				imageFilePrototypeModel.Href = core.StringPtr("cos://us-south/custom-image-vpc-bucket/customImage-0.vhd")
				Expect(imageFilePrototypeModel.Href).To(Equal(core.StringPtr("cos://us-south/custom-image-vpc-bucket/customImage-0.vhd")))

				// Construct an instance of the OperatingSystemIdentityByName model
				operatingSystemIdentityModel := new(vpcclassicv1.OperatingSystemIdentityByName)
				Expect(operatingSystemIdentityModel).ToNot(BeNil())
				operatingSystemIdentityModel.Name = core.StringPtr("ubuntu-16-amd64")
				Expect(operatingSystemIdentityModel.Name).To(Equal(core.StringPtr("ubuntu-16-amd64")))

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the ImagePrototypeImageByFile model
				imagePrototypeModel := new(vpcclassicv1.ImagePrototypeImageByFile)
				Expect(imagePrototypeModel).ToNot(BeNil())
				imagePrototypeModel.Name = core.StringPtr("my-image")
				imagePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				imagePrototypeModel.File = imageFilePrototypeModel
				imagePrototypeModel.OperatingSystem = operatingSystemIdentityModel
				Expect(imagePrototypeModel.Name).To(Equal(core.StringPtr("my-image")))
				Expect(imagePrototypeModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(imagePrototypeModel.File).To(Equal(imageFilePrototypeModel))
				Expect(imagePrototypeModel.OperatingSystem).To(Equal(operatingSystemIdentityModel))

				// Construct an instance of the CreateImageOptions model
				var imagePrototype vpcclassicv1.ImagePrototypeIntf = nil
				createImageOptionsModel := testService.NewCreateImageOptions(imagePrototype)
				createImageOptionsModel.SetImagePrototype(imagePrototypeModel)
				createImageOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createImageOptionsModel).ToNot(BeNil())
				Expect(createImageOptionsModel.ImagePrototype).To(Equal(imagePrototypeModel))
				Expect(createImageOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateInstanceActionOptions successfully`, func() {
				// Construct an instance of the CreateInstanceActionOptions model
				instanceID := "testString"
				createInstanceActionOptionsType := "reboot"
				createInstanceActionOptionsModel := testService.NewCreateInstanceActionOptions(instanceID, createInstanceActionOptionsType)
				createInstanceActionOptionsModel.SetInstanceID("testString")
				createInstanceActionOptionsModel.SetType("reboot")
				createInstanceActionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createInstanceActionOptionsModel).ToNot(BeNil())
				Expect(createInstanceActionOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(createInstanceActionOptionsModel.Type).To(Equal(core.StringPtr("reboot")))
				Expect(createInstanceActionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateInstanceOptions successfully`, func() {
				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcclassicv1.EncryptionKeyIdentityByCRN)
				Expect(encryptionKeyIdentityModel).ToNot(BeNil())
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")
				Expect(encryptionKeyIdentityModel.CRN).To(Equal(core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")))

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcclassicv1.VolumeProfileIdentityByName)
				Expect(volumeProfileIdentityModel).ToNot(BeNil())
				volumeProfileIdentityModel.Name = core.StringPtr("general-purpose")
				Expect(volumeProfileIdentityModel.Name).To(Equal(core.StringPtr("general-purpose")))

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcclassicv1.SecurityGroupIdentityByID)
				Expect(securityGroupIdentityModel).ToNot(BeNil())
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")
				Expect(securityGroupIdentityModel.ID).To(Equal(core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")))

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcclassicv1.SubnetIdentityByID)
				Expect(subnetIdentityModel).ToNot(BeNil())
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
				Expect(subnetIdentityModel.ID).To(Equal(core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")))

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContextVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity model
				volumeAttachmentPrototypeInstanceContextVolumeModel := new(vpcclassicv1.VolumeAttachmentPrototypeInstanceContextVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity)
				Expect(volumeAttachmentPrototypeInstanceContextVolumeModel).ToNot(BeNil())
				volumeAttachmentPrototypeInstanceContextVolumeModel.EncryptionKey = encryptionKeyIdentityModel
				volumeAttachmentPrototypeInstanceContextVolumeModel.Iops = core.Int64Ptr(int64(10000))
				volumeAttachmentPrototypeInstanceContextVolumeModel.Name = core.StringPtr("my-volume")
				volumeAttachmentPrototypeInstanceContextVolumeModel.Profile = volumeProfileIdentityModel
				volumeAttachmentPrototypeInstanceContextVolumeModel.Capacity = core.Int64Ptr(int64(100))
				Expect(volumeAttachmentPrototypeInstanceContextVolumeModel.EncryptionKey).To(Equal(encryptionKeyIdentityModel))
				Expect(volumeAttachmentPrototypeInstanceContextVolumeModel.Iops).To(Equal(core.Int64Ptr(int64(10000))))
				Expect(volumeAttachmentPrototypeInstanceContextVolumeModel.Name).To(Equal(core.StringPtr("my-volume")))
				Expect(volumeAttachmentPrototypeInstanceContextVolumeModel.Profile).To(Equal(volumeProfileIdentityModel))
				Expect(volumeAttachmentPrototypeInstanceContextVolumeModel.Capacity).To(Equal(core.Int64Ptr(int64(100))))

				// Construct an instance of the VolumePrototypeInstanceByImageContext model
				volumePrototypeInstanceByImageContextModel := new(vpcclassicv1.VolumePrototypeInstanceByImageContext)
				Expect(volumePrototypeInstanceByImageContextModel).ToNot(BeNil())
				volumePrototypeInstanceByImageContextModel.Capacity = core.Int64Ptr(int64(100))
				volumePrototypeInstanceByImageContextModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeInstanceByImageContextModel.Iops = core.Int64Ptr(int64(10000))
				volumePrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume")
				volumePrototypeInstanceByImageContextModel.Profile = volumeProfileIdentityModel
				Expect(volumePrototypeInstanceByImageContextModel.Capacity).To(Equal(core.Int64Ptr(int64(100))))
				Expect(volumePrototypeInstanceByImageContextModel.EncryptionKey).To(Equal(encryptionKeyIdentityModel))
				Expect(volumePrototypeInstanceByImageContextModel.Iops).To(Equal(core.Int64Ptr(int64(10000))))
				Expect(volumePrototypeInstanceByImageContextModel.Name).To(Equal(core.StringPtr("my-volume")))
				Expect(volumePrototypeInstanceByImageContextModel.Profile).To(Equal(volumeProfileIdentityModel))

				// Construct an instance of the ImageIdentityByID model
				imageIdentityModel := new(vpcclassicv1.ImageIdentityByID)
				Expect(imageIdentityModel).ToNot(BeNil())
				imageIdentityModel.ID = core.StringPtr("72b27b5c-f4b0-48bb-b954-5becc7c1dcb8")
				Expect(imageIdentityModel.ID).To(Equal(core.StringPtr("72b27b5c-f4b0-48bb-b954-5becc7c1dcb8")))

				// Construct an instance of the InstanceProfileIdentityByName model
				instanceProfileIdentityModel := new(vpcclassicv1.InstanceProfileIdentityByName)
				Expect(instanceProfileIdentityModel).ToNot(BeNil())
				instanceProfileIdentityModel.Name = core.StringPtr("bc1-4x16")
				Expect(instanceProfileIdentityModel.Name).To(Equal(core.StringPtr("bc1-4x16")))

				// Construct an instance of the KeyIdentityByID model
				keyIdentityModel := new(vpcclassicv1.KeyIdentityByID)
				Expect(keyIdentityModel).ToNot(BeNil())
				keyIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")
				Expect(keyIdentityModel.ID).To(Equal(core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")))

				// Construct an instance of the NetworkInterfacePrototype model
				networkInterfacePrototypeModel := new(vpcclassicv1.NetworkInterfacePrototype)
				Expect(networkInterfacePrototypeModel).ToNot(BeNil())
				networkInterfacePrototypeModel.Name = core.StringPtr("my-network-interface")
				networkInterfacePrototypeModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				networkInterfacePrototypeModel.SecurityGroups = []vpcclassicv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				networkInterfacePrototypeModel.Subnet = subnetIdentityModel
				Expect(networkInterfacePrototypeModel.Name).To(Equal(core.StringPtr("my-network-interface")))
				Expect(networkInterfacePrototypeModel.PrimaryIpv4Address).To(Equal(core.StringPtr("10.0.0.5")))
				Expect(networkInterfacePrototypeModel.SecurityGroups).To(Equal([]vpcclassicv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}))
				Expect(networkInterfacePrototypeModel.Subnet).To(Equal(subnetIdentityModel))

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcclassicv1.VPCIdentityByID)
				Expect(vpcIdentityModel).ToNot(BeNil())
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")
				Expect(vpcIdentityModel.ID).To(Equal(core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")))

				// Construct an instance of the VolumeAttachmentPrototypeInstanceByImageContext model
				volumeAttachmentPrototypeInstanceByImageContextModel := new(vpcclassicv1.VolumeAttachmentPrototypeInstanceByImageContext)
				Expect(volumeAttachmentPrototypeInstanceByImageContextModel).ToNot(BeNil())
				volumeAttachmentPrototypeInstanceByImageContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceByImageContextModel.Volume = volumePrototypeInstanceByImageContextModel
				Expect(volumeAttachmentPrototypeInstanceByImageContextModel.DeleteVolumeOnInstanceDelete).To(Equal(core.BoolPtr(true)))
				Expect(volumeAttachmentPrototypeInstanceByImageContextModel.Name).To(Equal(core.StringPtr("my-volume-attachment")))
				Expect(volumeAttachmentPrototypeInstanceByImageContextModel.Volume).To(Equal(volumePrototypeInstanceByImageContextModel))

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContext model
				volumeAttachmentPrototypeInstanceContextModel := new(vpcclassicv1.VolumeAttachmentPrototypeInstanceContext)
				Expect(volumeAttachmentPrototypeInstanceContextModel).ToNot(BeNil())
				volumeAttachmentPrototypeInstanceContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceContextModel.Volume = volumeAttachmentPrototypeInstanceContextVolumeModel
				Expect(volumeAttachmentPrototypeInstanceContextModel.DeleteVolumeOnInstanceDelete).To(Equal(core.BoolPtr(true)))
				Expect(volumeAttachmentPrototypeInstanceContextModel.Name).To(Equal(core.StringPtr("my-volume-attachment")))
				Expect(volumeAttachmentPrototypeInstanceContextModel.Volume).To(Equal(volumeAttachmentPrototypeInstanceContextVolumeModel))

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcclassicv1.ZoneIdentityByName)
				Expect(zoneIdentityModel).ToNot(BeNil())
				zoneIdentityModel.Name = core.StringPtr("us-south-1")
				Expect(zoneIdentityModel.Name).To(Equal(core.StringPtr("us-south-1")))

				// Construct an instance of the InstancePrototypeInstanceByImage model
				instancePrototypeModel := new(vpcclassicv1.InstancePrototypeInstanceByImage)
				Expect(instancePrototypeModel).ToNot(BeNil())
				instancePrototypeModel.Keys = []vpcclassicv1.KeyIdentityIntf{keyIdentityModel}
				instancePrototypeModel.Name = core.StringPtr("my-instance")
				instancePrototypeModel.NetworkInterfaces = []vpcclassicv1.NetworkInterfacePrototype{*networkInterfacePrototypeModel}
				instancePrototypeModel.Profile = instanceProfileIdentityModel
				instancePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				instancePrototypeModel.UserData = core.StringPtr("testString")
				instancePrototypeModel.VolumeAttachments = []vpcclassicv1.VolumeAttachmentPrototypeInstanceContext{*volumeAttachmentPrototypeInstanceContextModel}
				instancePrototypeModel.VPC = vpcIdentityModel
				instancePrototypeModel.BootVolumeAttachment = volumeAttachmentPrototypeInstanceByImageContextModel
				instancePrototypeModel.Image = imageIdentityModel
				instancePrototypeModel.PrimaryNetworkInterface = networkInterfacePrototypeModel
				instancePrototypeModel.Zone = zoneIdentityModel
				Expect(instancePrototypeModel.Keys).To(Equal([]vpcclassicv1.KeyIdentityIntf{keyIdentityModel}))
				Expect(instancePrototypeModel.Name).To(Equal(core.StringPtr("my-instance")))
				Expect(instancePrototypeModel.NetworkInterfaces).To(Equal([]vpcclassicv1.NetworkInterfacePrototype{*networkInterfacePrototypeModel}))
				Expect(instancePrototypeModel.Profile).To(Equal(instanceProfileIdentityModel))
				Expect(instancePrototypeModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(instancePrototypeModel.UserData).To(Equal(core.StringPtr("testString")))
				Expect(instancePrototypeModel.VolumeAttachments).To(Equal([]vpcclassicv1.VolumeAttachmentPrototypeInstanceContext{*volumeAttachmentPrototypeInstanceContextModel}))
				Expect(instancePrototypeModel.VPC).To(Equal(vpcIdentityModel))
				Expect(instancePrototypeModel.BootVolumeAttachment).To(Equal(volumeAttachmentPrototypeInstanceByImageContextModel))
				Expect(instancePrototypeModel.Image).To(Equal(imageIdentityModel))
				Expect(instancePrototypeModel.PrimaryNetworkInterface).To(Equal(networkInterfacePrototypeModel))
				Expect(instancePrototypeModel.Zone).To(Equal(zoneIdentityModel))

				// Construct an instance of the CreateInstanceOptions model
				var instancePrototype vpcclassicv1.InstancePrototypeIntf = nil
				createInstanceOptionsModel := testService.NewCreateInstanceOptions(instancePrototype)
				createInstanceOptionsModel.SetInstancePrototype(instancePrototypeModel)
				createInstanceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createInstanceOptionsModel).ToNot(BeNil())
				Expect(createInstanceOptionsModel.InstancePrototype).To(Equal(instancePrototypeModel))
				Expect(createInstanceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateInstanceVolumeAttachmentOptions successfully`, func() {
				// Construct an instance of the VolumeIdentityByID model
				volumeIdentityModel := new(vpcclassicv1.VolumeIdentityByID)
				Expect(volumeIdentityModel).ToNot(BeNil())
				volumeIdentityModel.ID = core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")
				Expect(volumeIdentityModel.ID).To(Equal(core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")))

				// Construct an instance of the CreateInstanceVolumeAttachmentOptions model
				instanceID := "testString"
				var createInstanceVolumeAttachmentOptionsVolume vpcclassicv1.VolumeIdentityIntf = nil
				createInstanceVolumeAttachmentOptionsModel := testService.NewCreateInstanceVolumeAttachmentOptions(instanceID, createInstanceVolumeAttachmentOptionsVolume)
				createInstanceVolumeAttachmentOptionsModel.SetInstanceID("testString")
				createInstanceVolumeAttachmentOptionsModel.SetVolume(volumeIdentityModel)
				createInstanceVolumeAttachmentOptionsModel.SetDeleteVolumeOnInstanceDelete(true)
				createInstanceVolumeAttachmentOptionsModel.SetName("my-volume-attachment")
				createInstanceVolumeAttachmentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createInstanceVolumeAttachmentOptionsModel).ToNot(BeNil())
				Expect(createInstanceVolumeAttachmentOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(createInstanceVolumeAttachmentOptionsModel.Volume).To(Equal(volumeIdentityModel))
				Expect(createInstanceVolumeAttachmentOptionsModel.DeleteVolumeOnInstanceDelete).To(Equal(core.BoolPtr(true)))
				Expect(createInstanceVolumeAttachmentOptionsModel.Name).To(Equal(core.StringPtr("my-volume-attachment")))
				Expect(createInstanceVolumeAttachmentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateIpsecPolicyOptions successfully`, func() {
				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the CreateIpsecPolicyOptions model
				createIpsecPolicyOptionsAuthenticationAlgorithm := "md5"
				createIpsecPolicyOptionsEncryptionAlgorithm := "triple_des"
				createIpsecPolicyOptionsPfs := "disabled"
				createIpsecPolicyOptionsModel := testService.NewCreateIpsecPolicyOptions(createIpsecPolicyOptionsAuthenticationAlgorithm, createIpsecPolicyOptionsEncryptionAlgorithm, createIpsecPolicyOptionsPfs)
				createIpsecPolicyOptionsModel.SetAuthenticationAlgorithm("md5")
				createIpsecPolicyOptionsModel.SetEncryptionAlgorithm("triple_des")
				createIpsecPolicyOptionsModel.SetPfs("disabled")
				createIpsecPolicyOptionsModel.SetKeyLifetime(int64(3600))
				createIpsecPolicyOptionsModel.SetName("my-ipsec-policy")
				createIpsecPolicyOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createIpsecPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createIpsecPolicyOptionsModel).ToNot(BeNil())
				Expect(createIpsecPolicyOptionsModel.AuthenticationAlgorithm).To(Equal(core.StringPtr("md5")))
				Expect(createIpsecPolicyOptionsModel.EncryptionAlgorithm).To(Equal(core.StringPtr("triple_des")))
				Expect(createIpsecPolicyOptionsModel.Pfs).To(Equal(core.StringPtr("disabled")))
				Expect(createIpsecPolicyOptionsModel.KeyLifetime).To(Equal(core.Int64Ptr(int64(3600))))
				Expect(createIpsecPolicyOptionsModel.Name).To(Equal(core.StringPtr("my-ipsec-policy")))
				Expect(createIpsecPolicyOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createIpsecPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateKeyOptions successfully`, func() {
				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the CreateKeyOptions model
				createKeyOptionsPublicKey := "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En"
				createKeyOptionsModel := testService.NewCreateKeyOptions(createKeyOptionsPublicKey)
				createKeyOptionsModel.SetPublicKey("AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En")
				createKeyOptionsModel.SetName("my-key")
				createKeyOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createKeyOptionsModel.SetType("rsa")
				createKeyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createKeyOptionsModel).ToNot(BeNil())
				Expect(createKeyOptionsModel.PublicKey).To(Equal(core.StringPtr("AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En")))
				Expect(createKeyOptionsModel.Name).To(Equal(core.StringPtr("my-key")))
				Expect(createKeyOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createKeyOptionsModel.Type).To(Equal(core.StringPtr("rsa")))
				Expect(createKeyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateLoadBalancerListenerOptions successfully`, func() {
				// Construct an instance of the LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyPrototypeTargetModel := new(vpcclassicv1.LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				Expect(loadBalancerListenerPolicyPrototypeTargetModel).ToNot(BeNil())
				loadBalancerListenerPolicyPrototypeTargetModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")
				Expect(loadBalancerListenerPolicyPrototypeTargetModel.ID).To(Equal(core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")))

				// Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
				loadBalancerListenerPolicyRulePrototypeModel := new(vpcclassicv1.LoadBalancerListenerPolicyRulePrototype)
				Expect(loadBalancerListenerPolicyRulePrototypeModel).ToNot(BeNil())
				loadBalancerListenerPolicyRulePrototypeModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePrototypeModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePrototypeModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePrototypeModel.Value = core.StringPtr("testString")
				Expect(loadBalancerListenerPolicyRulePrototypeModel.Condition).To(Equal(core.StringPtr("contains")))
				Expect(loadBalancerListenerPolicyRulePrototypeModel.Field).To(Equal(core.StringPtr("MY-APP-HEADER")))
				Expect(loadBalancerListenerPolicyRulePrototypeModel.Type).To(Equal(core.StringPtr("header")))
				Expect(loadBalancerListenerPolicyRulePrototypeModel.Value).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CertificateInstanceIdentityByCRN model
				certificateInstanceIdentityModel := new(vpcclassicv1.CertificateInstanceIdentityByCRN)
				Expect(certificateInstanceIdentityModel).ToNot(BeNil())
				certificateInstanceIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")
				Expect(certificateInstanceIdentityModel.CRN).To(Equal(core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")))

				// Construct an instance of the LoadBalancerListenerPolicyPrototype model
				loadBalancerListenerPolicyPrototypeModel := new(vpcclassicv1.LoadBalancerListenerPolicyPrototype)
				Expect(loadBalancerListenerPolicyPrototypeModel).ToNot(BeNil())
				loadBalancerListenerPolicyPrototypeModel.Action = core.StringPtr("forward")
				loadBalancerListenerPolicyPrototypeModel.Name = core.StringPtr("my-policy")
				loadBalancerListenerPolicyPrototypeModel.Priority = core.Int64Ptr(int64(5))
				loadBalancerListenerPolicyPrototypeModel.Rules = []vpcclassicv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}
				loadBalancerListenerPolicyPrototypeModel.Target = loadBalancerListenerPolicyPrototypeTargetModel
				Expect(loadBalancerListenerPolicyPrototypeModel.Action).To(Equal(core.StringPtr("forward")))
				Expect(loadBalancerListenerPolicyPrototypeModel.Name).To(Equal(core.StringPtr("my-policy")))
				Expect(loadBalancerListenerPolicyPrototypeModel.Priority).To(Equal(core.Int64Ptr(int64(5))))
				Expect(loadBalancerListenerPolicyPrototypeModel.Rules).To(Equal([]vpcclassicv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}))
				Expect(loadBalancerListenerPolicyPrototypeModel.Target).To(Equal(loadBalancerListenerPolicyPrototypeTargetModel))

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcclassicv1.LoadBalancerPoolIdentityByID)
				Expect(loadBalancerPoolIdentityModel).ToNot(BeNil())
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")
				Expect(loadBalancerPoolIdentityModel.ID).To(Equal(core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")))

				// Construct an instance of the CreateLoadBalancerListenerOptions model
				loadBalancerID := "testString"
				createLoadBalancerListenerOptionsPort := int64(443)
				createLoadBalancerListenerOptionsProtocol := "http"
				createLoadBalancerListenerOptionsModel := testService.NewCreateLoadBalancerListenerOptions(loadBalancerID, createLoadBalancerListenerOptionsPort, createLoadBalancerListenerOptionsProtocol)
				createLoadBalancerListenerOptionsModel.SetLoadBalancerID("testString")
				createLoadBalancerListenerOptionsModel.SetPort(int64(443))
				createLoadBalancerListenerOptionsModel.SetProtocol("http")
				createLoadBalancerListenerOptionsModel.SetCertificateInstance(certificateInstanceIdentityModel)
				createLoadBalancerListenerOptionsModel.SetConnectionLimit(int64(2000))
				createLoadBalancerListenerOptionsModel.SetDefaultPool(loadBalancerPoolIdentityModel)
				createLoadBalancerListenerOptionsModel.SetPolicies([]vpcclassicv1.LoadBalancerListenerPolicyPrototype{*loadBalancerListenerPolicyPrototypeModel})
				createLoadBalancerListenerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createLoadBalancerListenerOptionsModel).ToNot(BeNil())
				Expect(createLoadBalancerListenerOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(createLoadBalancerListenerOptionsModel.Port).To(Equal(core.Int64Ptr(int64(443))))
				Expect(createLoadBalancerListenerOptionsModel.Protocol).To(Equal(core.StringPtr("http")))
				Expect(createLoadBalancerListenerOptionsModel.CertificateInstance).To(Equal(certificateInstanceIdentityModel))
				Expect(createLoadBalancerListenerOptionsModel.ConnectionLimit).To(Equal(core.Int64Ptr(int64(2000))))
				Expect(createLoadBalancerListenerOptionsModel.DefaultPool).To(Equal(loadBalancerPoolIdentityModel))
				Expect(createLoadBalancerListenerOptionsModel.Policies).To(Equal([]vpcclassicv1.LoadBalancerListenerPolicyPrototype{*loadBalancerListenerPolicyPrototypeModel}))
				Expect(createLoadBalancerListenerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateLoadBalancerListenerPolicyOptions successfully`, func() {
				// Construct an instance of the LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyPrototypeTargetModel := new(vpcclassicv1.LoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				Expect(loadBalancerListenerPolicyPrototypeTargetModel).ToNot(BeNil())
				loadBalancerListenerPolicyPrototypeTargetModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")
				Expect(loadBalancerListenerPolicyPrototypeTargetModel.ID).To(Equal(core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")))

				// Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
				loadBalancerListenerPolicyRulePrototypeModel := new(vpcclassicv1.LoadBalancerListenerPolicyRulePrototype)
				Expect(loadBalancerListenerPolicyRulePrototypeModel).ToNot(BeNil())
				loadBalancerListenerPolicyRulePrototypeModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePrototypeModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePrototypeModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePrototypeModel.Value = core.StringPtr("testString")
				Expect(loadBalancerListenerPolicyRulePrototypeModel.Condition).To(Equal(core.StringPtr("contains")))
				Expect(loadBalancerListenerPolicyRulePrototypeModel.Field).To(Equal(core.StringPtr("MY-APP-HEADER")))
				Expect(loadBalancerListenerPolicyRulePrototypeModel.Type).To(Equal(core.StringPtr("header")))
				Expect(loadBalancerListenerPolicyRulePrototypeModel.Value).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CreateLoadBalancerListenerPolicyOptions model
				loadBalancerID := "testString"
				listenerID := "testString"
				createLoadBalancerListenerPolicyOptionsAction := "forward"
				createLoadBalancerListenerPolicyOptionsPriority := int64(5)
				createLoadBalancerListenerPolicyOptionsModel := testService.NewCreateLoadBalancerListenerPolicyOptions(loadBalancerID, listenerID, createLoadBalancerListenerPolicyOptionsAction, createLoadBalancerListenerPolicyOptionsPriority)
				createLoadBalancerListenerPolicyOptionsModel.SetLoadBalancerID("testString")
				createLoadBalancerListenerPolicyOptionsModel.SetListenerID("testString")
				createLoadBalancerListenerPolicyOptionsModel.SetAction("forward")
				createLoadBalancerListenerPolicyOptionsModel.SetPriority(int64(5))
				createLoadBalancerListenerPolicyOptionsModel.SetName("my-policy")
				createLoadBalancerListenerPolicyOptionsModel.SetRules([]vpcclassicv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel})
				createLoadBalancerListenerPolicyOptionsModel.SetTarget(loadBalancerListenerPolicyPrototypeTargetModel)
				createLoadBalancerListenerPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createLoadBalancerListenerPolicyOptionsModel).ToNot(BeNil())
				Expect(createLoadBalancerListenerPolicyOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(createLoadBalancerListenerPolicyOptionsModel.ListenerID).To(Equal(core.StringPtr("testString")))
				Expect(createLoadBalancerListenerPolicyOptionsModel.Action).To(Equal(core.StringPtr("forward")))
				Expect(createLoadBalancerListenerPolicyOptionsModel.Priority).To(Equal(core.Int64Ptr(int64(5))))
				Expect(createLoadBalancerListenerPolicyOptionsModel.Name).To(Equal(core.StringPtr("my-policy")))
				Expect(createLoadBalancerListenerPolicyOptionsModel.Rules).To(Equal([]vpcclassicv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}))
				Expect(createLoadBalancerListenerPolicyOptionsModel.Target).To(Equal(loadBalancerListenerPolicyPrototypeTargetModel))
				Expect(createLoadBalancerListenerPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateLoadBalancerListenerPolicyRuleOptions successfully`, func() {
				// Construct an instance of the CreateLoadBalancerListenerPolicyRuleOptions model
				loadBalancerID := "testString"
				listenerID := "testString"
				policyID := "testString"
				createLoadBalancerListenerPolicyRuleOptionsCondition := "contains"
				createLoadBalancerListenerPolicyRuleOptionsType := "header"
				createLoadBalancerListenerPolicyRuleOptionsValue := "testString"
				createLoadBalancerListenerPolicyRuleOptionsModel := testService.NewCreateLoadBalancerListenerPolicyRuleOptions(loadBalancerID, listenerID, policyID, createLoadBalancerListenerPolicyRuleOptionsCondition, createLoadBalancerListenerPolicyRuleOptionsType, createLoadBalancerListenerPolicyRuleOptionsValue)
				createLoadBalancerListenerPolicyRuleOptionsModel.SetLoadBalancerID("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.SetListenerID("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.SetPolicyID("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.SetCondition("contains")
				createLoadBalancerListenerPolicyRuleOptionsModel.SetType("header")
				createLoadBalancerListenerPolicyRuleOptionsModel.SetValue("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.SetField("MY-APP-HEADER")
				createLoadBalancerListenerPolicyRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createLoadBalancerListenerPolicyRuleOptionsModel).ToNot(BeNil())
				Expect(createLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(createLoadBalancerListenerPolicyRuleOptionsModel.ListenerID).To(Equal(core.StringPtr("testString")))
				Expect(createLoadBalancerListenerPolicyRuleOptionsModel.PolicyID).To(Equal(core.StringPtr("testString")))
				Expect(createLoadBalancerListenerPolicyRuleOptionsModel.Condition).To(Equal(core.StringPtr("contains")))
				Expect(createLoadBalancerListenerPolicyRuleOptionsModel.Type).To(Equal(core.StringPtr("header")))
				Expect(createLoadBalancerListenerPolicyRuleOptionsModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(createLoadBalancerListenerPolicyRuleOptionsModel.Field).To(Equal(core.StringPtr("MY-APP-HEADER")))
				Expect(createLoadBalancerListenerPolicyRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateLoadBalancerOptions successfully`, func() {
				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeIP model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberTargetPrototypeIP)
				Expect(loadBalancerPoolMemberTargetPrototypeModel).ToNot(BeNil())
				loadBalancerPoolMemberTargetPrototypeModel.Address = core.StringPtr("192.168.3.4")
				Expect(loadBalancerPoolMemberTargetPrototypeModel.Address).To(Equal(core.StringPtr("192.168.3.4")))

				// Construct an instance of the LoadBalancerPoolHealthMonitorPrototype model
				loadBalancerPoolHealthMonitorPrototypeModel := new(vpcclassicv1.LoadBalancerPoolHealthMonitorPrototype)
				Expect(loadBalancerPoolHealthMonitorPrototypeModel).ToNot(BeNil())
				loadBalancerPoolHealthMonitorPrototypeModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPrototypeModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Type = core.StringPtr("http")
				loadBalancerPoolHealthMonitorPrototypeModel.URLPath = core.StringPtr("/")
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.Delay).To(Equal(core.Int64Ptr(int64(5))))
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries).To(Equal(core.Int64Ptr(int64(2))))
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.Port).To(Equal(core.Int64Ptr(int64(22))))
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.Timeout).To(Equal(core.Int64Ptr(int64(2))))
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.Type).To(Equal(core.StringPtr("http")))
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.URLPath).To(Equal(core.StringPtr("/")))

				// Construct an instance of the LoadBalancerPoolIdentityByName model
				loadBalancerPoolIdentityByNameModel := new(vpcclassicv1.LoadBalancerPoolIdentityByName)
				Expect(loadBalancerPoolIdentityByNameModel).ToNot(BeNil())
				loadBalancerPoolIdentityByNameModel.Name = core.StringPtr("my-load-balancer-pool")
				Expect(loadBalancerPoolIdentityByNameModel.Name).To(Equal(core.StringPtr("my-load-balancer-pool")))

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberPrototype)
				Expect(loadBalancerPoolMemberPrototypeModel).ToNot(BeNil())
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))
				Expect(loadBalancerPoolMemberPrototypeModel.Port).To(Equal(core.Int64Ptr(int64(80))))
				Expect(loadBalancerPoolMemberPrototypeModel.Target).To(Equal(loadBalancerPoolMemberTargetPrototypeModel))
				Expect(loadBalancerPoolMemberPrototypeModel.Weight).To(Equal(core.Int64Ptr(int64(50))))

				// Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
				loadBalancerPoolSessionPersistencePrototypeModel := new(vpcclassicv1.LoadBalancerPoolSessionPersistencePrototype)
				Expect(loadBalancerPoolSessionPersistencePrototypeModel).ToNot(BeNil())
				loadBalancerPoolSessionPersistencePrototypeModel.Type = core.StringPtr("source_ip")
				Expect(loadBalancerPoolSessionPersistencePrototypeModel.Type).To(Equal(core.StringPtr("source_ip")))

				// Construct an instance of the LoadBalancerListenerPrototypeLoadBalancerContext model
				loadBalancerListenerPrototypeLoadBalancerContextModel := new(vpcclassicv1.LoadBalancerListenerPrototypeLoadBalancerContext)
				Expect(loadBalancerListenerPrototypeLoadBalancerContextModel).ToNot(BeNil())
				loadBalancerListenerPrototypeLoadBalancerContextModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				loadBalancerListenerPrototypeLoadBalancerContextModel.DefaultPool = loadBalancerPoolIdentityByNameModel
				loadBalancerListenerPrototypeLoadBalancerContextModel.Port = core.Int64Ptr(int64(443))
				loadBalancerListenerPrototypeLoadBalancerContextModel.Protocol = core.StringPtr("http")
				Expect(loadBalancerListenerPrototypeLoadBalancerContextModel.ConnectionLimit).To(Equal(core.Int64Ptr(int64(2000))))
				Expect(loadBalancerListenerPrototypeLoadBalancerContextModel.DefaultPool).To(Equal(loadBalancerPoolIdentityByNameModel))
				Expect(loadBalancerListenerPrototypeLoadBalancerContextModel.Port).To(Equal(core.Int64Ptr(int64(443))))
				Expect(loadBalancerListenerPrototypeLoadBalancerContextModel.Protocol).To(Equal(core.StringPtr("http")))

				// Construct an instance of the LoadBalancerPoolPrototype model
				loadBalancerPoolPrototypeModel := new(vpcclassicv1.LoadBalancerPoolPrototype)
				Expect(loadBalancerPoolPrototypeModel).ToNot(BeNil())
				loadBalancerPoolPrototypeModel.Algorithm = core.StringPtr("least_connections")
				loadBalancerPoolPrototypeModel.HealthMonitor = loadBalancerPoolHealthMonitorPrototypeModel
				loadBalancerPoolPrototypeModel.Members = []vpcclassicv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				loadBalancerPoolPrototypeModel.Name = core.StringPtr("my-load-balancer-pool")
				loadBalancerPoolPrototypeModel.Protocol = core.StringPtr("http")
				loadBalancerPoolPrototypeModel.SessionPersistence = loadBalancerPoolSessionPersistencePrototypeModel
				Expect(loadBalancerPoolPrototypeModel.Algorithm).To(Equal(core.StringPtr("least_connections")))
				Expect(loadBalancerPoolPrototypeModel.HealthMonitor).To(Equal(loadBalancerPoolHealthMonitorPrototypeModel))
				Expect(loadBalancerPoolPrototypeModel.Members).To(Equal([]vpcclassicv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}))
				Expect(loadBalancerPoolPrototypeModel.Name).To(Equal(core.StringPtr("my-load-balancer-pool")))
				Expect(loadBalancerPoolPrototypeModel.Protocol).To(Equal(core.StringPtr("http")))
				Expect(loadBalancerPoolPrototypeModel.SessionPersistence).To(Equal(loadBalancerPoolSessionPersistencePrototypeModel))

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcclassicv1.SubnetIdentityByID)
				Expect(subnetIdentityModel).ToNot(BeNil())
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
				Expect(subnetIdentityModel.ID).To(Equal(core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")))

				// Construct an instance of the CreateLoadBalancerOptions model
				createLoadBalancerOptionsIsPublic := true
				createLoadBalancerOptionsSubnets := []vpcclassicv1.SubnetIdentityIntf{}
				createLoadBalancerOptionsModel := testService.NewCreateLoadBalancerOptions(createLoadBalancerOptionsIsPublic, createLoadBalancerOptionsSubnets)
				createLoadBalancerOptionsModel.SetIsPublic(true)
				createLoadBalancerOptionsModel.SetSubnets([]vpcclassicv1.SubnetIdentityIntf{subnetIdentityModel})
				createLoadBalancerOptionsModel.SetListeners([]vpcclassicv1.LoadBalancerListenerPrototypeLoadBalancerContext{*loadBalancerListenerPrototypeLoadBalancerContextModel})
				createLoadBalancerOptionsModel.SetName("my-load-balancer")
				createLoadBalancerOptionsModel.SetPools([]vpcclassicv1.LoadBalancerPoolPrototype{*loadBalancerPoolPrototypeModel})
				createLoadBalancerOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createLoadBalancerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createLoadBalancerOptionsModel).ToNot(BeNil())
				Expect(createLoadBalancerOptionsModel.IsPublic).To(Equal(core.BoolPtr(true)))
				Expect(createLoadBalancerOptionsModel.Subnets).To(Equal([]vpcclassicv1.SubnetIdentityIntf{subnetIdentityModel}))
				Expect(createLoadBalancerOptionsModel.Listeners).To(Equal([]vpcclassicv1.LoadBalancerListenerPrototypeLoadBalancerContext{*loadBalancerListenerPrototypeLoadBalancerContextModel}))
				Expect(createLoadBalancerOptionsModel.Name).To(Equal(core.StringPtr("my-load-balancer")))
				Expect(createLoadBalancerOptionsModel.Pools).To(Equal([]vpcclassicv1.LoadBalancerPoolPrototype{*loadBalancerPoolPrototypeModel}))
				Expect(createLoadBalancerOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createLoadBalancerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateLoadBalancerPoolMemberOptions successfully`, func() {
				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeIP model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberTargetPrototypeIP)
				Expect(loadBalancerPoolMemberTargetPrototypeModel).ToNot(BeNil())
				loadBalancerPoolMemberTargetPrototypeModel.Address = core.StringPtr("192.168.3.4")
				Expect(loadBalancerPoolMemberTargetPrototypeModel.Address).To(Equal(core.StringPtr("192.168.3.4")))

				// Construct an instance of the CreateLoadBalancerPoolMemberOptions model
				loadBalancerID := "testString"
				poolID := "testString"
				createLoadBalancerPoolMemberOptionsPort := int64(80)
				var createLoadBalancerPoolMemberOptionsTarget vpcclassicv1.LoadBalancerPoolMemberTargetPrototypeIntf = nil
				createLoadBalancerPoolMemberOptionsModel := testService.NewCreateLoadBalancerPoolMemberOptions(loadBalancerID, poolID, createLoadBalancerPoolMemberOptionsPort, createLoadBalancerPoolMemberOptionsTarget)
				createLoadBalancerPoolMemberOptionsModel.SetLoadBalancerID("testString")
				createLoadBalancerPoolMemberOptionsModel.SetPoolID("testString")
				createLoadBalancerPoolMemberOptionsModel.SetPort(int64(80))
				createLoadBalancerPoolMemberOptionsModel.SetTarget(loadBalancerPoolMemberTargetPrototypeModel)
				createLoadBalancerPoolMemberOptionsModel.SetWeight(int64(50))
				createLoadBalancerPoolMemberOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createLoadBalancerPoolMemberOptionsModel).ToNot(BeNil())
				Expect(createLoadBalancerPoolMemberOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(createLoadBalancerPoolMemberOptionsModel.PoolID).To(Equal(core.StringPtr("testString")))
				Expect(createLoadBalancerPoolMemberOptionsModel.Port).To(Equal(core.Int64Ptr(int64(80))))
				Expect(createLoadBalancerPoolMemberOptionsModel.Target).To(Equal(loadBalancerPoolMemberTargetPrototypeModel))
				Expect(createLoadBalancerPoolMemberOptionsModel.Weight).To(Equal(core.Int64Ptr(int64(50))))
				Expect(createLoadBalancerPoolMemberOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateLoadBalancerPoolOptions successfully`, func() {
				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeIP model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberTargetPrototypeIP)
				Expect(loadBalancerPoolMemberTargetPrototypeModel).ToNot(BeNil())
				loadBalancerPoolMemberTargetPrototypeModel.Address = core.StringPtr("192.168.3.4")
				Expect(loadBalancerPoolMemberTargetPrototypeModel.Address).To(Equal(core.StringPtr("192.168.3.4")))

				// Construct an instance of the LoadBalancerPoolHealthMonitorPrototype model
				loadBalancerPoolHealthMonitorPrototypeModel := new(vpcclassicv1.LoadBalancerPoolHealthMonitorPrototype)
				Expect(loadBalancerPoolHealthMonitorPrototypeModel).ToNot(BeNil())
				loadBalancerPoolHealthMonitorPrototypeModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPrototypeModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Type = core.StringPtr("http")
				loadBalancerPoolHealthMonitorPrototypeModel.URLPath = core.StringPtr("/")
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.Delay).To(Equal(core.Int64Ptr(int64(5))))
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries).To(Equal(core.Int64Ptr(int64(2))))
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.Port).To(Equal(core.Int64Ptr(int64(22))))
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.Timeout).To(Equal(core.Int64Ptr(int64(2))))
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.Type).To(Equal(core.StringPtr("http")))
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.URLPath).To(Equal(core.StringPtr("/")))

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberPrototype)
				Expect(loadBalancerPoolMemberPrototypeModel).ToNot(BeNil())
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))
				Expect(loadBalancerPoolMemberPrototypeModel.Port).To(Equal(core.Int64Ptr(int64(80))))
				Expect(loadBalancerPoolMemberPrototypeModel.Target).To(Equal(loadBalancerPoolMemberTargetPrototypeModel))
				Expect(loadBalancerPoolMemberPrototypeModel.Weight).To(Equal(core.Int64Ptr(int64(50))))

				// Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
				loadBalancerPoolSessionPersistencePrototypeModel := new(vpcclassicv1.LoadBalancerPoolSessionPersistencePrototype)
				Expect(loadBalancerPoolSessionPersistencePrototypeModel).ToNot(BeNil())
				loadBalancerPoolSessionPersistencePrototypeModel.Type = core.StringPtr("source_ip")
				Expect(loadBalancerPoolSessionPersistencePrototypeModel.Type).To(Equal(core.StringPtr("source_ip")))

				// Construct an instance of the CreateLoadBalancerPoolOptions model
				loadBalancerID := "testString"
				createLoadBalancerPoolOptionsAlgorithm := "least_connections"
				var createLoadBalancerPoolOptionsHealthMonitor *vpcclassicv1.LoadBalancerPoolHealthMonitorPrototype = nil
				createLoadBalancerPoolOptionsProtocol := "http"
				createLoadBalancerPoolOptionsModel := testService.NewCreateLoadBalancerPoolOptions(loadBalancerID, createLoadBalancerPoolOptionsAlgorithm, createLoadBalancerPoolOptionsHealthMonitor, createLoadBalancerPoolOptionsProtocol)
				createLoadBalancerPoolOptionsModel.SetLoadBalancerID("testString")
				createLoadBalancerPoolOptionsModel.SetAlgorithm("least_connections")
				createLoadBalancerPoolOptionsModel.SetHealthMonitor(loadBalancerPoolHealthMonitorPrototypeModel)
				createLoadBalancerPoolOptionsModel.SetProtocol("http")
				createLoadBalancerPoolOptionsModel.SetMembers([]vpcclassicv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel})
				createLoadBalancerPoolOptionsModel.SetName("my-load-balancer-pool")
				createLoadBalancerPoolOptionsModel.SetSessionPersistence(loadBalancerPoolSessionPersistencePrototypeModel)
				createLoadBalancerPoolOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createLoadBalancerPoolOptionsModel).ToNot(BeNil())
				Expect(createLoadBalancerPoolOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(createLoadBalancerPoolOptionsModel.Algorithm).To(Equal(core.StringPtr("least_connections")))
				Expect(createLoadBalancerPoolOptionsModel.HealthMonitor).To(Equal(loadBalancerPoolHealthMonitorPrototypeModel))
				Expect(createLoadBalancerPoolOptionsModel.Protocol).To(Equal(core.StringPtr("http")))
				Expect(createLoadBalancerPoolOptionsModel.Members).To(Equal([]vpcclassicv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}))
				Expect(createLoadBalancerPoolOptionsModel.Name).To(Equal(core.StringPtr("my-load-balancer-pool")))
				Expect(createLoadBalancerPoolOptionsModel.SessionPersistence).To(Equal(loadBalancerPoolSessionPersistencePrototypeModel))
				Expect(createLoadBalancerPoolOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateNetworkACLOptions successfully`, func() {
				// Construct an instance of the NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll model
				networkACLRulePrototypeNetworkACLContextModel := new(vpcclassicv1.NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll)
				Expect(networkACLRulePrototypeNetworkACLContextModel).ToNot(BeNil())
				networkACLRulePrototypeNetworkACLContextModel.Action = core.StringPtr("allow")
				networkACLRulePrototypeNetworkACLContextModel.Destination = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeNetworkACLContextModel.Direction = core.StringPtr("inbound")
				networkACLRulePrototypeNetworkACLContextModel.Name = core.StringPtr("my-rule-2")
				networkACLRulePrototypeNetworkACLContextModel.Protocol = core.StringPtr("all")
				networkACLRulePrototypeNetworkACLContextModel.Source = core.StringPtr("192.168.3.2/32")
				Expect(networkACLRulePrototypeNetworkACLContextModel.Action).To(Equal(core.StringPtr("allow")))
				Expect(networkACLRulePrototypeNetworkACLContextModel.Destination).To(Equal(core.StringPtr("192.168.3.2/32")))
				Expect(networkACLRulePrototypeNetworkACLContextModel.Direction).To(Equal(core.StringPtr("inbound")))
				Expect(networkACLRulePrototypeNetworkACLContextModel.Name).To(Equal(core.StringPtr("my-rule-2")))
				Expect(networkACLRulePrototypeNetworkACLContextModel.Protocol).To(Equal(core.StringPtr("all")))
				Expect(networkACLRulePrototypeNetworkACLContextModel.Source).To(Equal(core.StringPtr("192.168.3.2/32")))

				// Construct an instance of the NetworkACLPrototypeNetworkACLByRules model
				networkACLPrototypeModel := new(vpcclassicv1.NetworkACLPrototypeNetworkACLByRules)
				Expect(networkACLPrototypeModel).ToNot(BeNil())
				networkACLPrototypeModel.Name = core.StringPtr("my-network-acl")
				networkACLPrototypeModel.Rules = []vpcclassicv1.NetworkACLRulePrototypeNetworkACLContextIntf{networkACLRulePrototypeNetworkACLContextModel}
				Expect(networkACLPrototypeModel.Name).To(Equal(core.StringPtr("my-network-acl")))
				Expect(networkACLPrototypeModel.Rules).To(Equal([]vpcclassicv1.NetworkACLRulePrototypeNetworkACLContextIntf{networkACLRulePrototypeNetworkACLContextModel}))

				// Construct an instance of the CreateNetworkACLOptions model
				createNetworkACLOptionsModel := testService.NewCreateNetworkACLOptions()
				createNetworkACLOptionsModel.SetNetworkACLPrototype(networkACLPrototypeModel)
				createNetworkACLOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createNetworkACLOptionsModel).ToNot(BeNil())
				Expect(createNetworkACLOptionsModel.NetworkACLPrototype).To(Equal(networkACLPrototypeModel))
				Expect(createNetworkACLOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateNetworkACLRuleOptions successfully`, func() {
				// Construct an instance of the NetworkACLRuleIdentityByID model
				networkACLRuleIdentityModel := new(vpcclassicv1.NetworkACLRuleIdentityByID)
				Expect(networkACLRuleIdentityModel).ToNot(BeNil())
				networkACLRuleIdentityModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")
				Expect(networkACLRuleIdentityModel.ID).To(Equal(core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")))

				// Construct an instance of the NetworkACLRulePrototypeNetworkACLRuleProtocolAll model
				networkACLRulePrototypeModel := new(vpcclassicv1.NetworkACLRulePrototypeNetworkACLRuleProtocolAll)
				Expect(networkACLRulePrototypeModel).ToNot(BeNil())
				networkACLRulePrototypeModel.Action = core.StringPtr("allow")
				networkACLRulePrototypeModel.Before = networkACLRuleIdentityModel
				networkACLRulePrototypeModel.Destination = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeModel.Direction = core.StringPtr("inbound")
				networkACLRulePrototypeModel.Name = core.StringPtr("my-rule-2")
				networkACLRulePrototypeModel.Protocol = core.StringPtr("all")
				networkACLRulePrototypeModel.Source = core.StringPtr("192.168.3.2/32")
				Expect(networkACLRulePrototypeModel.Action).To(Equal(core.StringPtr("allow")))
				Expect(networkACLRulePrototypeModel.Before).To(Equal(networkACLRuleIdentityModel))
				Expect(networkACLRulePrototypeModel.Destination).To(Equal(core.StringPtr("192.168.3.2/32")))
				Expect(networkACLRulePrototypeModel.Direction).To(Equal(core.StringPtr("inbound")))
				Expect(networkACLRulePrototypeModel.Name).To(Equal(core.StringPtr("my-rule-2")))
				Expect(networkACLRulePrototypeModel.Protocol).To(Equal(core.StringPtr("all")))
				Expect(networkACLRulePrototypeModel.Source).To(Equal(core.StringPtr("192.168.3.2/32")))

				// Construct an instance of the CreateNetworkACLRuleOptions model
				networkACLID := "testString"
				var networkACLRulePrototype vpcclassicv1.NetworkACLRulePrototypeIntf = nil
				createNetworkACLRuleOptionsModel := testService.NewCreateNetworkACLRuleOptions(networkACLID, networkACLRulePrototype)
				createNetworkACLRuleOptionsModel.SetNetworkACLID("testString")
				createNetworkACLRuleOptionsModel.SetNetworkACLRulePrototype(networkACLRulePrototypeModel)
				createNetworkACLRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createNetworkACLRuleOptionsModel).ToNot(BeNil())
				Expect(createNetworkACLRuleOptionsModel.NetworkACLID).To(Equal(core.StringPtr("testString")))
				Expect(createNetworkACLRuleOptionsModel.NetworkACLRulePrototype).To(Equal(networkACLRulePrototypeModel))
				Expect(createNetworkACLRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreatePublicGatewayOptions successfully`, func() {
				// Construct an instance of the PublicGatewayPrototypeFloatingIPFloatingIPIdentityFloatingIPIdentityByID model
				publicGatewayPrototypeFloatingIPModel := new(vpcclassicv1.PublicGatewayPrototypeFloatingIPFloatingIPIdentityFloatingIPIdentityByID)
				Expect(publicGatewayPrototypeFloatingIPModel).ToNot(BeNil())
				publicGatewayPrototypeFloatingIPModel.ID = core.StringPtr("39300233-9995-4806-89a5-3c1b6eb88689")
				Expect(publicGatewayPrototypeFloatingIPModel.ID).To(Equal(core.StringPtr("39300233-9995-4806-89a5-3c1b6eb88689")))

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcclassicv1.VPCIdentityByID)
				Expect(vpcIdentityModel).ToNot(BeNil())
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")
				Expect(vpcIdentityModel.ID).To(Equal(core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")))

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcclassicv1.ZoneIdentityByName)
				Expect(zoneIdentityModel).ToNot(BeNil())
				zoneIdentityModel.Name = core.StringPtr("us-south-1")
				Expect(zoneIdentityModel.Name).To(Equal(core.StringPtr("us-south-1")))

				// Construct an instance of the CreatePublicGatewayOptions model
				var createPublicGatewayOptionsVPC vpcclassicv1.VPCIdentityIntf = nil
				var createPublicGatewayOptionsZone vpcclassicv1.ZoneIdentityIntf = nil
				createPublicGatewayOptionsModel := testService.NewCreatePublicGatewayOptions(createPublicGatewayOptionsVPC, createPublicGatewayOptionsZone)
				createPublicGatewayOptionsModel.SetVPC(vpcIdentityModel)
				createPublicGatewayOptionsModel.SetZone(zoneIdentityModel)
				createPublicGatewayOptionsModel.SetFloatingIP(publicGatewayPrototypeFloatingIPModel)
				createPublicGatewayOptionsModel.SetName("my-public-gateway")
				createPublicGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createPublicGatewayOptionsModel).ToNot(BeNil())
				Expect(createPublicGatewayOptionsModel.VPC).To(Equal(vpcIdentityModel))
				Expect(createPublicGatewayOptionsModel.Zone).To(Equal(zoneIdentityModel))
				Expect(createPublicGatewayOptionsModel.FloatingIP).To(Equal(publicGatewayPrototypeFloatingIPModel))
				Expect(createPublicGatewayOptionsModel.Name).To(Equal(core.StringPtr("my-public-gateway")))
				Expect(createPublicGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateSecurityGroupOptions successfully`, func() {
				// Construct an instance of the SecurityGroupRulePrototypeRemoteIP model
				securityGroupRulePrototypeRemoteModel := new(vpcclassicv1.SecurityGroupRulePrototypeRemoteIP)
				Expect(securityGroupRulePrototypeRemoteModel).ToNot(BeNil())
				securityGroupRulePrototypeRemoteModel.Address = core.StringPtr("192.168.3.4")
				Expect(securityGroupRulePrototypeRemoteModel.Address).To(Equal(core.StringPtr("192.168.3.4")))

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolIcmp model
				securityGroupRulePrototypeModel := new(vpcclassicv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolIcmp)
				Expect(securityGroupRulePrototypeModel).ToNot(BeNil())
				securityGroupRulePrototypeModel.Direction = core.StringPtr("inbound")
				securityGroupRulePrototypeModel.IPVersion = core.StringPtr("ipv4")
				securityGroupRulePrototypeModel.Protocol = core.StringPtr("icmp")
				securityGroupRulePrototypeModel.Remote = securityGroupRulePrototypeRemoteModel
				securityGroupRulePrototypeModel.Code = core.Int64Ptr(int64(0))
				securityGroupRulePrototypeModel.Type = core.Int64Ptr(int64(8))
				Expect(securityGroupRulePrototypeModel.Direction).To(Equal(core.StringPtr("inbound")))
				Expect(securityGroupRulePrototypeModel.IPVersion).To(Equal(core.StringPtr("ipv4")))
				Expect(securityGroupRulePrototypeModel.Protocol).To(Equal(core.StringPtr("icmp")))
				Expect(securityGroupRulePrototypeModel.Remote).To(Equal(securityGroupRulePrototypeRemoteModel))
				Expect(securityGroupRulePrototypeModel.Code).To(Equal(core.Int64Ptr(int64(0))))
				Expect(securityGroupRulePrototypeModel.Type).To(Equal(core.Int64Ptr(int64(8))))

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcclassicv1.VPCIdentityByID)
				Expect(vpcIdentityModel).ToNot(BeNil())
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")
				Expect(vpcIdentityModel.ID).To(Equal(core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")))

				// Construct an instance of the CreateSecurityGroupOptions model
				var createSecurityGroupOptionsVPC vpcclassicv1.VPCIdentityIntf = nil
				createSecurityGroupOptionsModel := testService.NewCreateSecurityGroupOptions(createSecurityGroupOptionsVPC)
				createSecurityGroupOptionsModel.SetVPC(vpcIdentityModel)
				createSecurityGroupOptionsModel.SetName("my-security-group")
				createSecurityGroupOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createSecurityGroupOptionsModel.SetRules([]vpcclassicv1.SecurityGroupRulePrototypeIntf{securityGroupRulePrototypeModel})
				createSecurityGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createSecurityGroupOptionsModel).ToNot(BeNil())
				Expect(createSecurityGroupOptionsModel.VPC).To(Equal(vpcIdentityModel))
				Expect(createSecurityGroupOptionsModel.Name).To(Equal(core.StringPtr("my-security-group")))
				Expect(createSecurityGroupOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createSecurityGroupOptionsModel.Rules).To(Equal([]vpcclassicv1.SecurityGroupRulePrototypeIntf{securityGroupRulePrototypeModel}))
				Expect(createSecurityGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateSecurityGroupRuleOptions successfully`, func() {
				// Construct an instance of the SecurityGroupRulePrototypeRemoteIP model
				securityGroupRulePrototypeRemoteModel := new(vpcclassicv1.SecurityGroupRulePrototypeRemoteIP)
				Expect(securityGroupRulePrototypeRemoteModel).ToNot(BeNil())
				securityGroupRulePrototypeRemoteModel.Address = core.StringPtr("192.168.3.4")
				Expect(securityGroupRulePrototypeRemoteModel.Address).To(Equal(core.StringPtr("192.168.3.4")))

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolIcmp model
				securityGroupRulePrototypeModel := new(vpcclassicv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolIcmp)
				Expect(securityGroupRulePrototypeModel).ToNot(BeNil())
				securityGroupRulePrototypeModel.Direction = core.StringPtr("inbound")
				securityGroupRulePrototypeModel.IPVersion = core.StringPtr("ipv4")
				securityGroupRulePrototypeModel.Protocol = core.StringPtr("icmp")
				securityGroupRulePrototypeModel.Remote = securityGroupRulePrototypeRemoteModel
				securityGroupRulePrototypeModel.Code = core.Int64Ptr(int64(0))
				securityGroupRulePrototypeModel.Type = core.Int64Ptr(int64(8))
				Expect(securityGroupRulePrototypeModel.Direction).To(Equal(core.StringPtr("inbound")))
				Expect(securityGroupRulePrototypeModel.IPVersion).To(Equal(core.StringPtr("ipv4")))
				Expect(securityGroupRulePrototypeModel.Protocol).To(Equal(core.StringPtr("icmp")))
				Expect(securityGroupRulePrototypeModel.Remote).To(Equal(securityGroupRulePrototypeRemoteModel))
				Expect(securityGroupRulePrototypeModel.Code).To(Equal(core.Int64Ptr(int64(0))))
				Expect(securityGroupRulePrototypeModel.Type).To(Equal(core.Int64Ptr(int64(8))))

				// Construct an instance of the CreateSecurityGroupRuleOptions model
				securityGroupID := "testString"
				var securityGroupRulePrototype vpcclassicv1.SecurityGroupRulePrototypeIntf = nil
				createSecurityGroupRuleOptionsModel := testService.NewCreateSecurityGroupRuleOptions(securityGroupID, securityGroupRulePrototype)
				createSecurityGroupRuleOptionsModel.SetSecurityGroupID("testString")
				createSecurityGroupRuleOptionsModel.SetSecurityGroupRulePrototype(securityGroupRulePrototypeModel)
				createSecurityGroupRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createSecurityGroupRuleOptionsModel).ToNot(BeNil())
				Expect(createSecurityGroupRuleOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(createSecurityGroupRuleOptionsModel.SecurityGroupRulePrototype).To(Equal(securityGroupRulePrototypeModel))
				Expect(createSecurityGroupRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateSubnetOptions successfully`, func() {
				// Construct an instance of the NetworkACLIdentityByID model
				networkACLIdentityModel := new(vpcclassicv1.NetworkACLIdentityByID)
				Expect(networkACLIdentityModel).ToNot(BeNil())
				networkACLIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")
				Expect(networkACLIdentityModel.ID).To(Equal(core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")))

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcclassicv1.PublicGatewayIdentityByID)
				Expect(publicGatewayIdentityModel).ToNot(BeNil())
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")
				Expect(publicGatewayIdentityModel.ID).To(Equal(core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")))

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcclassicv1.VPCIdentityByID)
				Expect(vpcIdentityModel).ToNot(BeNil())
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")
				Expect(vpcIdentityModel.ID).To(Equal(core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")))

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcclassicv1.ZoneIdentityByName)
				Expect(zoneIdentityModel).ToNot(BeNil())
				zoneIdentityModel.Name = core.StringPtr("us-south-1")
				Expect(zoneIdentityModel.Name).To(Equal(core.StringPtr("us-south-1")))

				// Construct an instance of the SubnetPrototypeSubnetByTotalCount model
				subnetPrototypeModel := new(vpcclassicv1.SubnetPrototypeSubnetByTotalCount)
				Expect(subnetPrototypeModel).ToNot(BeNil())
				subnetPrototypeModel.Name = core.StringPtr("my-subnet")
				subnetPrototypeModel.NetworkACL = networkACLIdentityModel
				subnetPrototypeModel.PublicGateway = publicGatewayIdentityModel
				subnetPrototypeModel.VPC = vpcIdentityModel
				subnetPrototypeModel.TotalIpv4AddressCount = core.Int64Ptr(int64(256))
				subnetPrototypeModel.Zone = zoneIdentityModel
				Expect(subnetPrototypeModel.Name).To(Equal(core.StringPtr("my-subnet")))
				Expect(subnetPrototypeModel.NetworkACL).To(Equal(networkACLIdentityModel))
				Expect(subnetPrototypeModel.PublicGateway).To(Equal(publicGatewayIdentityModel))
				Expect(subnetPrototypeModel.VPC).To(Equal(vpcIdentityModel))
				Expect(subnetPrototypeModel.TotalIpv4AddressCount).To(Equal(core.Int64Ptr(int64(256))))
				Expect(subnetPrototypeModel.Zone).To(Equal(zoneIdentityModel))

				// Construct an instance of the CreateSubnetOptions model
				var subnetPrototype vpcclassicv1.SubnetPrototypeIntf = nil
				createSubnetOptionsModel := testService.NewCreateSubnetOptions(subnetPrototype)
				createSubnetOptionsModel.SetSubnetPrototype(subnetPrototypeModel)
				createSubnetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createSubnetOptionsModel).ToNot(BeNil())
				Expect(createSubnetOptionsModel.SubnetPrototype).To(Equal(subnetPrototypeModel))
				Expect(createSubnetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateVolumeOptions successfully`, func() {
				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcclassicv1.EncryptionKeyIdentityByCRN)
				Expect(encryptionKeyIdentityModel).ToNot(BeNil())
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")
				Expect(encryptionKeyIdentityModel.CRN).To(Equal(core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")))

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcclassicv1.VolumeProfileIdentityByName)
				Expect(volumeProfileIdentityModel).ToNot(BeNil())
				volumeProfileIdentityModel.Name = core.StringPtr("general-purpose")
				Expect(volumeProfileIdentityModel.Name).To(Equal(core.StringPtr("general-purpose")))

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcclassicv1.ZoneIdentityByName)
				Expect(zoneIdentityModel).ToNot(BeNil())
				zoneIdentityModel.Name = core.StringPtr("us-south-1")
				Expect(zoneIdentityModel.Name).To(Equal(core.StringPtr("us-south-1")))

				// Construct an instance of the VolumePrototypeVolumeByCapacity model
				volumePrototypeModel := new(vpcclassicv1.VolumePrototypeVolumeByCapacity)
				Expect(volumePrototypeModel).ToNot(BeNil())
				volumePrototypeModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeModel.Iops = core.Int64Ptr(int64(10000))
				volumePrototypeModel.Name = core.StringPtr("my-volume")
				volumePrototypeModel.Profile = volumeProfileIdentityModel
				volumePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				volumePrototypeModel.Zone = zoneIdentityModel
				volumePrototypeModel.Capacity = core.Int64Ptr(int64(100))
				Expect(volumePrototypeModel.EncryptionKey).To(Equal(encryptionKeyIdentityModel))
				Expect(volumePrototypeModel.Iops).To(Equal(core.Int64Ptr(int64(10000))))
				Expect(volumePrototypeModel.Name).To(Equal(core.StringPtr("my-volume")))
				Expect(volumePrototypeModel.Profile).To(Equal(volumeProfileIdentityModel))
				Expect(volumePrototypeModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(volumePrototypeModel.Zone).To(Equal(zoneIdentityModel))
				Expect(volumePrototypeModel.Capacity).To(Equal(core.Int64Ptr(int64(100))))

				// Construct an instance of the CreateVolumeOptions model
				var volumePrototype vpcclassicv1.VolumePrototypeIntf = nil
				createVolumeOptionsModel := testService.NewCreateVolumeOptions(volumePrototype)
				createVolumeOptionsModel.SetVolumePrototype(volumePrototypeModel)
				createVolumeOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createVolumeOptionsModel).ToNot(BeNil())
				Expect(createVolumeOptionsModel.VolumePrototype).To(Equal(volumePrototypeModel))
				Expect(createVolumeOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateVPCAddressPrefixOptions successfully`, func() {
				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcclassicv1.ZoneIdentityByName)
				Expect(zoneIdentityModel).ToNot(BeNil())
				zoneIdentityModel.Name = core.StringPtr("us-south-1")
				Expect(zoneIdentityModel.Name).To(Equal(core.StringPtr("us-south-1")))

				// Construct an instance of the CreateVPCAddressPrefixOptions model
				vpcID := "testString"
				createVPCAddressPrefixOptionsCIDR := "10.0.0.0/24"
				var createVPCAddressPrefixOptionsZone vpcclassicv1.ZoneIdentityIntf = nil
				createVPCAddressPrefixOptionsModel := testService.NewCreateVPCAddressPrefixOptions(vpcID, createVPCAddressPrefixOptionsCIDR, createVPCAddressPrefixOptionsZone)
				createVPCAddressPrefixOptionsModel.SetVPCID("testString")
				createVPCAddressPrefixOptionsModel.SetCIDR("10.0.0.0/24")
				createVPCAddressPrefixOptionsModel.SetZone(zoneIdentityModel)
				createVPCAddressPrefixOptionsModel.SetIsDefault(true)
				createVPCAddressPrefixOptionsModel.SetName("my-address-prefix-2")
				createVPCAddressPrefixOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createVPCAddressPrefixOptionsModel).ToNot(BeNil())
				Expect(createVPCAddressPrefixOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(createVPCAddressPrefixOptionsModel.CIDR).To(Equal(core.StringPtr("10.0.0.0/24")))
				Expect(createVPCAddressPrefixOptionsModel.Zone).To(Equal(zoneIdentityModel))
				Expect(createVPCAddressPrefixOptionsModel.IsDefault).To(Equal(core.BoolPtr(true)))
				Expect(createVPCAddressPrefixOptionsModel.Name).To(Equal(core.StringPtr("my-address-prefix-2")))
				Expect(createVPCAddressPrefixOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateVPCOptions successfully`, func() {
				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the CreateVPCOptions model
				createVPCOptionsModel := testService.NewCreateVPCOptions()
				createVPCOptionsModel.SetAddressPrefixManagement("manual")
				createVPCOptionsModel.SetClassicAccess(false)
				createVPCOptionsModel.SetName("my-vpc")
				createVPCOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createVPCOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createVPCOptionsModel).ToNot(BeNil())
				Expect(createVPCOptionsModel.AddressPrefixManagement).To(Equal(core.StringPtr("manual")))
				Expect(createVPCOptionsModel.ClassicAccess).To(Equal(core.BoolPtr(false)))
				Expect(createVPCOptionsModel.Name).To(Equal(core.StringPtr("my-vpc")))
				Expect(createVPCOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createVPCOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateVPCRouteOptions successfully`, func() {
				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcclassicv1.RouteNextHopPrototypeRouteNextHopIP)
				Expect(routeNextHopPrototypeModel).ToNot(BeNil())
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")
				Expect(routeNextHopPrototypeModel.Address).To(Equal(core.StringPtr("192.168.3.4")))

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcclassicv1.ZoneIdentityByName)
				Expect(zoneIdentityModel).ToNot(BeNil())
				zoneIdentityModel.Name = core.StringPtr("us-south-1")
				Expect(zoneIdentityModel.Name).To(Equal(core.StringPtr("us-south-1")))

				// Construct an instance of the CreateVPCRouteOptions model
				vpcID := "testString"
				createVPCRouteOptionsDestination := "192.168.3.0/24"
				var createVPCRouteOptionsNextHop vpcclassicv1.RouteNextHopPrototypeIntf = nil
				var createVPCRouteOptionsZone vpcclassicv1.ZoneIdentityIntf = nil
				createVPCRouteOptionsModel := testService.NewCreateVPCRouteOptions(vpcID, createVPCRouteOptionsDestination, createVPCRouteOptionsNextHop, createVPCRouteOptionsZone)
				createVPCRouteOptionsModel.SetVPCID("testString")
				createVPCRouteOptionsModel.SetDestination("192.168.3.0/24")
				createVPCRouteOptionsModel.SetNextHop(routeNextHopPrototypeModel)
				createVPCRouteOptionsModel.SetZone(zoneIdentityModel)
				createVPCRouteOptionsModel.SetName("my-route-2")
				createVPCRouteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createVPCRouteOptionsModel).ToNot(BeNil())
				Expect(createVPCRouteOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(createVPCRouteOptionsModel.Destination).To(Equal(core.StringPtr("192.168.3.0/24")))
				Expect(createVPCRouteOptionsModel.NextHop).To(Equal(routeNextHopPrototypeModel))
				Expect(createVPCRouteOptionsModel.Zone).To(Equal(zoneIdentityModel))
				Expect(createVPCRouteOptionsModel.Name).To(Equal(core.StringPtr("my-route-2")))
				Expect(createVPCRouteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateVPNGatewayConnectionOptions successfully`, func() {
				// Construct an instance of the IPsecPolicyIdentityByID model
				iPsecPolicyIdentityModel := new(vpcclassicv1.IPsecPolicyIdentityByID)
				Expect(iPsecPolicyIdentityModel).ToNot(BeNil())
				iPsecPolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")
				Expect(iPsecPolicyIdentityModel.ID).To(Equal(core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")))

				// Construct an instance of the IkePolicyIdentityByID model
				ikePolicyIdentityModel := new(vpcclassicv1.IkePolicyIdentityByID)
				Expect(ikePolicyIdentityModel).ToNot(BeNil())
				ikePolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")
				Expect(ikePolicyIdentityModel.ID).To(Equal(core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")))

				// Construct an instance of the VPNGatewayConnectionDpdPrototype model
				vpnGatewayConnectionDpdPrototypeModel := new(vpcclassicv1.VPNGatewayConnectionDpdPrototype)
				Expect(vpnGatewayConnectionDpdPrototypeModel).ToNot(BeNil())
				vpnGatewayConnectionDpdPrototypeModel.Action = core.StringPtr("restart")
				vpnGatewayConnectionDpdPrototypeModel.Interval = core.Int64Ptr(int64(30))
				vpnGatewayConnectionDpdPrototypeModel.Timeout = core.Int64Ptr(int64(120))
				Expect(vpnGatewayConnectionDpdPrototypeModel.Action).To(Equal(core.StringPtr("restart")))
				Expect(vpnGatewayConnectionDpdPrototypeModel.Interval).To(Equal(core.Int64Ptr(int64(30))))
				Expect(vpnGatewayConnectionDpdPrototypeModel.Timeout).To(Equal(core.Int64Ptr(int64(120))))

				// Construct an instance of the CreateVPNGatewayConnectionOptions model
				vpnGatewayID := "testString"
				createVPNGatewayConnectionOptionsPeerAddress := "169.21.50.5"
				createVPNGatewayConnectionOptionsPsk := "lkj14b1oi0alcniejkso"
				createVPNGatewayConnectionOptionsModel := testService.NewCreateVPNGatewayConnectionOptions(vpnGatewayID, createVPNGatewayConnectionOptionsPeerAddress, createVPNGatewayConnectionOptionsPsk)
				createVPNGatewayConnectionOptionsModel.SetVPNGatewayID("testString")
				createVPNGatewayConnectionOptionsModel.SetPeerAddress("169.21.50.5")
				createVPNGatewayConnectionOptionsModel.SetPsk("lkj14b1oi0alcniejkso")
				createVPNGatewayConnectionOptionsModel.SetAdminStateUp(true)
				createVPNGatewayConnectionOptionsModel.SetDeadPeerDetection(vpnGatewayConnectionDpdPrototypeModel)
				createVPNGatewayConnectionOptionsModel.SetIkePolicy(ikePolicyIdentityModel)
				createVPNGatewayConnectionOptionsModel.SetIpsecPolicy(iPsecPolicyIdentityModel)
				createVPNGatewayConnectionOptionsModel.SetLocalCIDRs([]string{"192.168.1.0/24"})
				createVPNGatewayConnectionOptionsModel.SetName("my-vpn-connection")
				createVPNGatewayConnectionOptionsModel.SetPeerCIDRs([]string{"10.45.1.0/24"})
				createVPNGatewayConnectionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createVPNGatewayConnectionOptionsModel).ToNot(BeNil())
				Expect(createVPNGatewayConnectionOptionsModel.VPNGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(createVPNGatewayConnectionOptionsModel.PeerAddress).To(Equal(core.StringPtr("169.21.50.5")))
				Expect(createVPNGatewayConnectionOptionsModel.Psk).To(Equal(core.StringPtr("lkj14b1oi0alcniejkso")))
				Expect(createVPNGatewayConnectionOptionsModel.AdminStateUp).To(Equal(core.BoolPtr(true)))
				Expect(createVPNGatewayConnectionOptionsModel.DeadPeerDetection).To(Equal(vpnGatewayConnectionDpdPrototypeModel))
				Expect(createVPNGatewayConnectionOptionsModel.IkePolicy).To(Equal(ikePolicyIdentityModel))
				Expect(createVPNGatewayConnectionOptionsModel.IpsecPolicy).To(Equal(iPsecPolicyIdentityModel))
				Expect(createVPNGatewayConnectionOptionsModel.LocalCIDRs).To(Equal([]string{"192.168.1.0/24"}))
				Expect(createVPNGatewayConnectionOptionsModel.Name).To(Equal(core.StringPtr("my-vpn-connection")))
				Expect(createVPNGatewayConnectionOptionsModel.PeerCIDRs).To(Equal([]string{"10.45.1.0/24"}))
				Expect(createVPNGatewayConnectionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateVPNGatewayOptions successfully`, func() {
				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcclassicv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcclassicv1.SubnetIdentityByID)
				Expect(subnetIdentityModel).ToNot(BeNil())
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
				Expect(subnetIdentityModel.ID).To(Equal(core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")))

				// Construct an instance of the CreateVPNGatewayOptions model
				var createVPNGatewayOptionsSubnet vpcclassicv1.SubnetIdentityIntf = nil
				createVPNGatewayOptionsModel := testService.NewCreateVPNGatewayOptions(createVPNGatewayOptionsSubnet)
				createVPNGatewayOptionsModel.SetSubnet(subnetIdentityModel)
				createVPNGatewayOptionsModel.SetName("my-vpn-gateway")
				createVPNGatewayOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createVPNGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createVPNGatewayOptionsModel).ToNot(BeNil())
				Expect(createVPNGatewayOptionsModel.Subnet).To(Equal(subnetIdentityModel))
				Expect(createVPNGatewayOptionsModel.Name).To(Equal(core.StringPtr("my-vpn-gateway")))
				Expect(createVPNGatewayOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createVPNGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteFloatingIPOptions successfully`, func() {
				// Construct an instance of the DeleteFloatingIPOptions model
				id := "testString"
				deleteFloatingIPOptionsModel := testService.NewDeleteFloatingIPOptions(id)
				deleteFloatingIPOptionsModel.SetID("testString")
				deleteFloatingIPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteFloatingIPOptionsModel).ToNot(BeNil())
				Expect(deleteFloatingIPOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteFloatingIPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteIkePolicyOptions successfully`, func() {
				// Construct an instance of the DeleteIkePolicyOptions model
				id := "testString"
				deleteIkePolicyOptionsModel := testService.NewDeleteIkePolicyOptions(id)
				deleteIkePolicyOptionsModel.SetID("testString")
				deleteIkePolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteIkePolicyOptionsModel).ToNot(BeNil())
				Expect(deleteIkePolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteIkePolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteImageOptions successfully`, func() {
				// Construct an instance of the DeleteImageOptions model
				id := "testString"
				deleteImageOptionsModel := testService.NewDeleteImageOptions(id)
				deleteImageOptionsModel.SetID("testString")
				deleteImageOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteImageOptionsModel).ToNot(BeNil())
				Expect(deleteImageOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteImageOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteInstanceOptions successfully`, func() {
				// Construct an instance of the DeleteInstanceOptions model
				id := "testString"
				deleteInstanceOptionsModel := testService.NewDeleteInstanceOptions(id)
				deleteInstanceOptionsModel.SetID("testString")
				deleteInstanceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteInstanceOptionsModel).ToNot(BeNil())
				Expect(deleteInstanceOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteInstanceVolumeAttachmentOptions successfully`, func() {
				// Construct an instance of the DeleteInstanceVolumeAttachmentOptions model
				instanceID := "testString"
				id := "testString"
				deleteInstanceVolumeAttachmentOptionsModel := testService.NewDeleteInstanceVolumeAttachmentOptions(instanceID, id)
				deleteInstanceVolumeAttachmentOptionsModel.SetInstanceID("testString")
				deleteInstanceVolumeAttachmentOptionsModel.SetID("testString")
				deleteInstanceVolumeAttachmentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteInstanceVolumeAttachmentOptionsModel).ToNot(BeNil())
				Expect(deleteInstanceVolumeAttachmentOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceVolumeAttachmentOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceVolumeAttachmentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteIpsecPolicyOptions successfully`, func() {
				// Construct an instance of the DeleteIpsecPolicyOptions model
				id := "testString"
				deleteIpsecPolicyOptionsModel := testService.NewDeleteIpsecPolicyOptions(id)
				deleteIpsecPolicyOptionsModel.SetID("testString")
				deleteIpsecPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteIpsecPolicyOptionsModel).ToNot(BeNil())
				Expect(deleteIpsecPolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteIpsecPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteKeyOptions successfully`, func() {
				// Construct an instance of the DeleteKeyOptions model
				id := "testString"
				deleteKeyOptionsModel := testService.NewDeleteKeyOptions(id)
				deleteKeyOptionsModel.SetID("testString")
				deleteKeyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteKeyOptionsModel).ToNot(BeNil())
				Expect(deleteKeyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteKeyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteLoadBalancerListenerOptions successfully`, func() {
				// Construct an instance of the DeleteLoadBalancerListenerOptions model
				loadBalancerID := "testString"
				id := "testString"
				deleteLoadBalancerListenerOptionsModel := testService.NewDeleteLoadBalancerListenerOptions(loadBalancerID, id)
				deleteLoadBalancerListenerOptionsModel.SetLoadBalancerID("testString")
				deleteLoadBalancerListenerOptionsModel.SetID("testString")
				deleteLoadBalancerListenerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteLoadBalancerListenerOptionsModel).ToNot(BeNil())
				Expect(deleteLoadBalancerListenerOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerListenerOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerListenerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteLoadBalancerListenerPolicyOptions successfully`, func() {
				// Construct an instance of the DeleteLoadBalancerListenerPolicyOptions model
				loadBalancerID := "testString"
				listenerID := "testString"
				id := "testString"
				deleteLoadBalancerListenerPolicyOptionsModel := testService.NewDeleteLoadBalancerListenerPolicyOptions(loadBalancerID, listenerID, id)
				deleteLoadBalancerListenerPolicyOptionsModel.SetLoadBalancerID("testString")
				deleteLoadBalancerListenerPolicyOptionsModel.SetListenerID("testString")
				deleteLoadBalancerListenerPolicyOptionsModel.SetID("testString")
				deleteLoadBalancerListenerPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteLoadBalancerListenerPolicyOptionsModel).ToNot(BeNil())
				Expect(deleteLoadBalancerListenerPolicyOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerListenerPolicyOptionsModel.ListenerID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerListenerPolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerListenerPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteLoadBalancerListenerPolicyRuleOptions successfully`, func() {
				// Construct an instance of the DeleteLoadBalancerListenerPolicyRuleOptions model
				loadBalancerID := "testString"
				listenerID := "testString"
				policyID := "testString"
				id := "testString"
				deleteLoadBalancerListenerPolicyRuleOptionsModel := testService.NewDeleteLoadBalancerListenerPolicyRuleOptions(loadBalancerID, listenerID, policyID, id)
				deleteLoadBalancerListenerPolicyRuleOptionsModel.SetLoadBalancerID("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.SetListenerID("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.SetPolicyID("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.SetID("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteLoadBalancerListenerPolicyRuleOptionsModel).ToNot(BeNil())
				Expect(deleteLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerListenerPolicyRuleOptionsModel.ListenerID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerListenerPolicyRuleOptionsModel.PolicyID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerListenerPolicyRuleOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerListenerPolicyRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteLoadBalancerOptions successfully`, func() {
				// Construct an instance of the DeleteLoadBalancerOptions model
				id := "testString"
				deleteLoadBalancerOptionsModel := testService.NewDeleteLoadBalancerOptions(id)
				deleteLoadBalancerOptionsModel.SetID("testString")
				deleteLoadBalancerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteLoadBalancerOptionsModel).ToNot(BeNil())
				Expect(deleteLoadBalancerOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteLoadBalancerPoolMemberOptions successfully`, func() {
				// Construct an instance of the DeleteLoadBalancerPoolMemberOptions model
				loadBalancerID := "testString"
				poolID := "testString"
				id := "testString"
				deleteLoadBalancerPoolMemberOptionsModel := testService.NewDeleteLoadBalancerPoolMemberOptions(loadBalancerID, poolID, id)
				deleteLoadBalancerPoolMemberOptionsModel.SetLoadBalancerID("testString")
				deleteLoadBalancerPoolMemberOptionsModel.SetPoolID("testString")
				deleteLoadBalancerPoolMemberOptionsModel.SetID("testString")
				deleteLoadBalancerPoolMemberOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteLoadBalancerPoolMemberOptionsModel).ToNot(BeNil())
				Expect(deleteLoadBalancerPoolMemberOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerPoolMemberOptionsModel.PoolID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerPoolMemberOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerPoolMemberOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteLoadBalancerPoolOptions successfully`, func() {
				// Construct an instance of the DeleteLoadBalancerPoolOptions model
				loadBalancerID := "testString"
				id := "testString"
				deleteLoadBalancerPoolOptionsModel := testService.NewDeleteLoadBalancerPoolOptions(loadBalancerID, id)
				deleteLoadBalancerPoolOptionsModel.SetLoadBalancerID("testString")
				deleteLoadBalancerPoolOptionsModel.SetID("testString")
				deleteLoadBalancerPoolOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteLoadBalancerPoolOptionsModel).ToNot(BeNil())
				Expect(deleteLoadBalancerPoolOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerPoolOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerPoolOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteNetworkACLOptions successfully`, func() {
				// Construct an instance of the DeleteNetworkACLOptions model
				id := "testString"
				deleteNetworkACLOptionsModel := testService.NewDeleteNetworkACLOptions(id)
				deleteNetworkACLOptionsModel.SetID("testString")
				deleteNetworkACLOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteNetworkACLOptionsModel).ToNot(BeNil())
				Expect(deleteNetworkACLOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteNetworkACLOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteNetworkACLRuleOptions successfully`, func() {
				// Construct an instance of the DeleteNetworkACLRuleOptions model
				networkACLID := "testString"
				id := "testString"
				deleteNetworkACLRuleOptionsModel := testService.NewDeleteNetworkACLRuleOptions(networkACLID, id)
				deleteNetworkACLRuleOptionsModel.SetNetworkACLID("testString")
				deleteNetworkACLRuleOptionsModel.SetID("testString")
				deleteNetworkACLRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteNetworkACLRuleOptionsModel).ToNot(BeNil())
				Expect(deleteNetworkACLRuleOptionsModel.NetworkACLID).To(Equal(core.StringPtr("testString")))
				Expect(deleteNetworkACLRuleOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteNetworkACLRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeletePublicGatewayOptions successfully`, func() {
				// Construct an instance of the DeletePublicGatewayOptions model
				id := "testString"
				deletePublicGatewayOptionsModel := testService.NewDeletePublicGatewayOptions(id)
				deletePublicGatewayOptionsModel.SetID("testString")
				deletePublicGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deletePublicGatewayOptionsModel).ToNot(BeNil())
				Expect(deletePublicGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deletePublicGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteSecurityGroupOptions successfully`, func() {
				// Construct an instance of the DeleteSecurityGroupOptions model
				id := "testString"
				deleteSecurityGroupOptionsModel := testService.NewDeleteSecurityGroupOptions(id)
				deleteSecurityGroupOptionsModel.SetID("testString")
				deleteSecurityGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteSecurityGroupOptionsModel).ToNot(BeNil())
				Expect(deleteSecurityGroupOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteSecurityGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteSecurityGroupRuleOptions successfully`, func() {
				// Construct an instance of the DeleteSecurityGroupRuleOptions model
				securityGroupID := "testString"
				id := "testString"
				deleteSecurityGroupRuleOptionsModel := testService.NewDeleteSecurityGroupRuleOptions(securityGroupID, id)
				deleteSecurityGroupRuleOptionsModel.SetSecurityGroupID("testString")
				deleteSecurityGroupRuleOptionsModel.SetID("testString")
				deleteSecurityGroupRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteSecurityGroupRuleOptionsModel).ToNot(BeNil())
				Expect(deleteSecurityGroupRuleOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(deleteSecurityGroupRuleOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteSecurityGroupRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteSubnetOptions successfully`, func() {
				// Construct an instance of the DeleteSubnetOptions model
				id := "testString"
				deleteSubnetOptionsModel := testService.NewDeleteSubnetOptions(id)
				deleteSubnetOptionsModel.SetID("testString")
				deleteSubnetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteSubnetOptionsModel).ToNot(BeNil())
				Expect(deleteSubnetOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteSubnetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteVolumeOptions successfully`, func() {
				// Construct an instance of the DeleteVolumeOptions model
				id := "testString"
				deleteVolumeOptionsModel := testService.NewDeleteVolumeOptions(id)
				deleteVolumeOptionsModel.SetID("testString")
				deleteVolumeOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteVolumeOptionsModel).ToNot(BeNil())
				Expect(deleteVolumeOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVolumeOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteVPCAddressPrefixOptions successfully`, func() {
				// Construct an instance of the DeleteVPCAddressPrefixOptions model
				vpcID := "testString"
				id := "testString"
				deleteVPCAddressPrefixOptionsModel := testService.NewDeleteVPCAddressPrefixOptions(vpcID, id)
				deleteVPCAddressPrefixOptionsModel.SetVPCID("testString")
				deleteVPCAddressPrefixOptionsModel.SetID("testString")
				deleteVPCAddressPrefixOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteVPCAddressPrefixOptionsModel).ToNot(BeNil())
				Expect(deleteVPCAddressPrefixOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVPCAddressPrefixOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVPCAddressPrefixOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteVPCOptions successfully`, func() {
				// Construct an instance of the DeleteVPCOptions model
				id := "testString"
				deleteVPCOptionsModel := testService.NewDeleteVPCOptions(id)
				deleteVPCOptionsModel.SetID("testString")
				deleteVPCOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteVPCOptionsModel).ToNot(BeNil())
				Expect(deleteVPCOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVPCOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteVPCRouteOptions successfully`, func() {
				// Construct an instance of the DeleteVPCRouteOptions model
				vpcID := "testString"
				id := "testString"
				deleteVPCRouteOptionsModel := testService.NewDeleteVPCRouteOptions(vpcID, id)
				deleteVPCRouteOptionsModel.SetVPCID("testString")
				deleteVPCRouteOptionsModel.SetID("testString")
				deleteVPCRouteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteVPCRouteOptionsModel).ToNot(BeNil())
				Expect(deleteVPCRouteOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVPCRouteOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVPCRouteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteVPNGatewayConnectionOptions successfully`, func() {
				// Construct an instance of the DeleteVPNGatewayConnectionOptions model
				vpnGatewayID := "testString"
				id := "testString"
				deleteVPNGatewayConnectionOptionsModel := testService.NewDeleteVPNGatewayConnectionOptions(vpnGatewayID, id)
				deleteVPNGatewayConnectionOptionsModel.SetVPNGatewayID("testString")
				deleteVPNGatewayConnectionOptionsModel.SetID("testString")
				deleteVPNGatewayConnectionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteVPNGatewayConnectionOptionsModel).ToNot(BeNil())
				Expect(deleteVPNGatewayConnectionOptionsModel.VPNGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVPNGatewayConnectionOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVPNGatewayConnectionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteVPNGatewayOptions successfully`, func() {
				// Construct an instance of the DeleteVPNGatewayOptions model
				id := "testString"
				deleteVPNGatewayOptionsModel := testService.NewDeleteVPNGatewayOptions(id)
				deleteVPNGatewayOptionsModel.SetID("testString")
				deleteVPNGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteVPNGatewayOptionsModel).ToNot(BeNil())
				Expect(deleteVPNGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVPNGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetFloatingIPOptions successfully`, func() {
				// Construct an instance of the GetFloatingIPOptions model
				id := "testString"
				getFloatingIPOptionsModel := testService.NewGetFloatingIPOptions(id)
				getFloatingIPOptionsModel.SetID("testString")
				getFloatingIPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getFloatingIPOptionsModel).ToNot(BeNil())
				Expect(getFloatingIPOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getFloatingIPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetIkePolicyOptions successfully`, func() {
				// Construct an instance of the GetIkePolicyOptions model
				id := "testString"
				getIkePolicyOptionsModel := testService.NewGetIkePolicyOptions(id)
				getIkePolicyOptionsModel.SetID("testString")
				getIkePolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getIkePolicyOptionsModel).ToNot(BeNil())
				Expect(getIkePolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getIkePolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetImageOptions successfully`, func() {
				// Construct an instance of the GetImageOptions model
				id := "testString"
				getImageOptionsModel := testService.NewGetImageOptions(id)
				getImageOptionsModel.SetID("testString")
				getImageOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getImageOptionsModel).ToNot(BeNil())
				Expect(getImageOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getImageOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInstanceInitializationOptions successfully`, func() {
				// Construct an instance of the GetInstanceInitializationOptions model
				id := "testString"
				getInstanceInitializationOptionsModel := testService.NewGetInstanceInitializationOptions(id)
				getInstanceInitializationOptionsModel.SetID("testString")
				getInstanceInitializationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInstanceInitializationOptionsModel).ToNot(BeNil())
				Expect(getInstanceInitializationOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceInitializationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInstanceNetworkInterfaceFloatingIPOptions successfully`, func() {
				// Construct an instance of the GetInstanceNetworkInterfaceFloatingIPOptions model
				instanceID := "testString"
				networkInterfaceID := "testString"
				id := "testString"
				getInstanceNetworkInterfaceFloatingIPOptionsModel := testService.NewGetInstanceNetworkInterfaceFloatingIPOptions(instanceID, networkInterfaceID, id)
				getInstanceNetworkInterfaceFloatingIPOptionsModel.SetInstanceID("testString")
				getInstanceNetworkInterfaceFloatingIPOptionsModel.SetNetworkInterfaceID("testString")
				getInstanceNetworkInterfaceFloatingIPOptionsModel.SetID("testString")
				getInstanceNetworkInterfaceFloatingIPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInstanceNetworkInterfaceFloatingIPOptionsModel).ToNot(BeNil())
				Expect(getInstanceNetworkInterfaceFloatingIPOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceNetworkInterfaceFloatingIPOptionsModel.NetworkInterfaceID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceNetworkInterfaceFloatingIPOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceNetworkInterfaceFloatingIPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInstanceNetworkInterfaceOptions successfully`, func() {
				// Construct an instance of the GetInstanceNetworkInterfaceOptions model
				instanceID := "testString"
				id := "testString"
				getInstanceNetworkInterfaceOptionsModel := testService.NewGetInstanceNetworkInterfaceOptions(instanceID, id)
				getInstanceNetworkInterfaceOptionsModel.SetInstanceID("testString")
				getInstanceNetworkInterfaceOptionsModel.SetID("testString")
				getInstanceNetworkInterfaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInstanceNetworkInterfaceOptionsModel).ToNot(BeNil())
				Expect(getInstanceNetworkInterfaceOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceNetworkInterfaceOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceNetworkInterfaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInstanceOptions successfully`, func() {
				// Construct an instance of the GetInstanceOptions model
				id := "testString"
				getInstanceOptionsModel := testService.NewGetInstanceOptions(id)
				getInstanceOptionsModel.SetID("testString")
				getInstanceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInstanceOptionsModel).ToNot(BeNil())
				Expect(getInstanceOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInstanceProfileOptions successfully`, func() {
				// Construct an instance of the GetInstanceProfileOptions model
				name := "testString"
				getInstanceProfileOptionsModel := testService.NewGetInstanceProfileOptions(name)
				getInstanceProfileOptionsModel.SetName("testString")
				getInstanceProfileOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInstanceProfileOptionsModel).ToNot(BeNil())
				Expect(getInstanceProfileOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceProfileOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInstanceVolumeAttachmentOptions successfully`, func() {
				// Construct an instance of the GetInstanceVolumeAttachmentOptions model
				instanceID := "testString"
				id := "testString"
				getInstanceVolumeAttachmentOptionsModel := testService.NewGetInstanceVolumeAttachmentOptions(instanceID, id)
				getInstanceVolumeAttachmentOptionsModel.SetInstanceID("testString")
				getInstanceVolumeAttachmentOptionsModel.SetID("testString")
				getInstanceVolumeAttachmentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInstanceVolumeAttachmentOptionsModel).ToNot(BeNil())
				Expect(getInstanceVolumeAttachmentOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceVolumeAttachmentOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceVolumeAttachmentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetIpsecPolicyOptions successfully`, func() {
				// Construct an instance of the GetIpsecPolicyOptions model
				id := "testString"
				getIpsecPolicyOptionsModel := testService.NewGetIpsecPolicyOptions(id)
				getIpsecPolicyOptionsModel.SetID("testString")
				getIpsecPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getIpsecPolicyOptionsModel).ToNot(BeNil())
				Expect(getIpsecPolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getIpsecPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetKeyOptions successfully`, func() {
				// Construct an instance of the GetKeyOptions model
				id := "testString"
				getKeyOptionsModel := testService.NewGetKeyOptions(id)
				getKeyOptionsModel.SetID("testString")
				getKeyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getKeyOptionsModel).ToNot(BeNil())
				Expect(getKeyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getKeyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetLoadBalancerListenerOptions successfully`, func() {
				// Construct an instance of the GetLoadBalancerListenerOptions model
				loadBalancerID := "testString"
				id := "testString"
				getLoadBalancerListenerOptionsModel := testService.NewGetLoadBalancerListenerOptions(loadBalancerID, id)
				getLoadBalancerListenerOptionsModel.SetLoadBalancerID("testString")
				getLoadBalancerListenerOptionsModel.SetID("testString")
				getLoadBalancerListenerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getLoadBalancerListenerOptionsModel).ToNot(BeNil())
				Expect(getLoadBalancerListenerOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerListenerOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerListenerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetLoadBalancerListenerPolicyOptions successfully`, func() {
				// Construct an instance of the GetLoadBalancerListenerPolicyOptions model
				loadBalancerID := "testString"
				listenerID := "testString"
				id := "testString"
				getLoadBalancerListenerPolicyOptionsModel := testService.NewGetLoadBalancerListenerPolicyOptions(loadBalancerID, listenerID, id)
				getLoadBalancerListenerPolicyOptionsModel.SetLoadBalancerID("testString")
				getLoadBalancerListenerPolicyOptionsModel.SetListenerID("testString")
				getLoadBalancerListenerPolicyOptionsModel.SetID("testString")
				getLoadBalancerListenerPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getLoadBalancerListenerPolicyOptionsModel).ToNot(BeNil())
				Expect(getLoadBalancerListenerPolicyOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerListenerPolicyOptionsModel.ListenerID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerListenerPolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerListenerPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetLoadBalancerListenerPolicyRuleOptions successfully`, func() {
				// Construct an instance of the GetLoadBalancerListenerPolicyRuleOptions model
				loadBalancerID := "testString"
				listenerID := "testString"
				policyID := "testString"
				id := "testString"
				getLoadBalancerListenerPolicyRuleOptionsModel := testService.NewGetLoadBalancerListenerPolicyRuleOptions(loadBalancerID, listenerID, policyID, id)
				getLoadBalancerListenerPolicyRuleOptionsModel.SetLoadBalancerID("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.SetListenerID("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.SetPolicyID("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.SetID("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getLoadBalancerListenerPolicyRuleOptionsModel).ToNot(BeNil())
				Expect(getLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerListenerPolicyRuleOptionsModel.ListenerID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerListenerPolicyRuleOptionsModel.PolicyID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerListenerPolicyRuleOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerListenerPolicyRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetLoadBalancerOptions successfully`, func() {
				// Construct an instance of the GetLoadBalancerOptions model
				id := "testString"
				getLoadBalancerOptionsModel := testService.NewGetLoadBalancerOptions(id)
				getLoadBalancerOptionsModel.SetID("testString")
				getLoadBalancerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getLoadBalancerOptionsModel).ToNot(BeNil())
				Expect(getLoadBalancerOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetLoadBalancerPoolMemberOptions successfully`, func() {
				// Construct an instance of the GetLoadBalancerPoolMemberOptions model
				loadBalancerID := "testString"
				poolID := "testString"
				id := "testString"
				getLoadBalancerPoolMemberOptionsModel := testService.NewGetLoadBalancerPoolMemberOptions(loadBalancerID, poolID, id)
				getLoadBalancerPoolMemberOptionsModel.SetLoadBalancerID("testString")
				getLoadBalancerPoolMemberOptionsModel.SetPoolID("testString")
				getLoadBalancerPoolMemberOptionsModel.SetID("testString")
				getLoadBalancerPoolMemberOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getLoadBalancerPoolMemberOptionsModel).ToNot(BeNil())
				Expect(getLoadBalancerPoolMemberOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerPoolMemberOptionsModel.PoolID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerPoolMemberOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerPoolMemberOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetLoadBalancerPoolOptions successfully`, func() {
				// Construct an instance of the GetLoadBalancerPoolOptions model
				loadBalancerID := "testString"
				id := "testString"
				getLoadBalancerPoolOptionsModel := testService.NewGetLoadBalancerPoolOptions(loadBalancerID, id)
				getLoadBalancerPoolOptionsModel.SetLoadBalancerID("testString")
				getLoadBalancerPoolOptionsModel.SetID("testString")
				getLoadBalancerPoolOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getLoadBalancerPoolOptionsModel).ToNot(BeNil())
				Expect(getLoadBalancerPoolOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerPoolOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerPoolOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetLoadBalancerStatisticsOptions successfully`, func() {
				// Construct an instance of the GetLoadBalancerStatisticsOptions model
				id := "testString"
				getLoadBalancerStatisticsOptionsModel := testService.NewGetLoadBalancerStatisticsOptions(id)
				getLoadBalancerStatisticsOptionsModel.SetID("testString")
				getLoadBalancerStatisticsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getLoadBalancerStatisticsOptionsModel).ToNot(BeNil())
				Expect(getLoadBalancerStatisticsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerStatisticsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetNetworkACLOptions successfully`, func() {
				// Construct an instance of the GetNetworkACLOptions model
				id := "testString"
				getNetworkACLOptionsModel := testService.NewGetNetworkACLOptions(id)
				getNetworkACLOptionsModel.SetID("testString")
				getNetworkACLOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getNetworkACLOptionsModel).ToNot(BeNil())
				Expect(getNetworkACLOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getNetworkACLOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetNetworkACLRuleOptions successfully`, func() {
				// Construct an instance of the GetNetworkACLRuleOptions model
				networkACLID := "testString"
				id := "testString"
				getNetworkACLRuleOptionsModel := testService.NewGetNetworkACLRuleOptions(networkACLID, id)
				getNetworkACLRuleOptionsModel.SetNetworkACLID("testString")
				getNetworkACLRuleOptionsModel.SetID("testString")
				getNetworkACLRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getNetworkACLRuleOptionsModel).ToNot(BeNil())
				Expect(getNetworkACLRuleOptionsModel.NetworkACLID).To(Equal(core.StringPtr("testString")))
				Expect(getNetworkACLRuleOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getNetworkACLRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetOperatingSystemOptions successfully`, func() {
				// Construct an instance of the GetOperatingSystemOptions model
				name := "testString"
				getOperatingSystemOptionsModel := testService.NewGetOperatingSystemOptions(name)
				getOperatingSystemOptionsModel.SetName("testString")
				getOperatingSystemOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getOperatingSystemOptionsModel).ToNot(BeNil())
				Expect(getOperatingSystemOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(getOperatingSystemOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetPublicGatewayOptions successfully`, func() {
				// Construct an instance of the GetPublicGatewayOptions model
				id := "testString"
				getPublicGatewayOptionsModel := testService.NewGetPublicGatewayOptions(id)
				getPublicGatewayOptionsModel.SetID("testString")
				getPublicGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getPublicGatewayOptionsModel).ToNot(BeNil())
				Expect(getPublicGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getPublicGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetRegionOptions successfully`, func() {
				// Construct an instance of the GetRegionOptions model
				name := "testString"
				getRegionOptionsModel := testService.NewGetRegionOptions(name)
				getRegionOptionsModel.SetName("testString")
				getRegionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getRegionOptionsModel).ToNot(BeNil())
				Expect(getRegionOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(getRegionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetRegionZoneOptions successfully`, func() {
				// Construct an instance of the GetRegionZoneOptions model
				regionName := "testString"
				zoneName := "testString"
				getRegionZoneOptionsModel := testService.NewGetRegionZoneOptions(regionName, zoneName)
				getRegionZoneOptionsModel.SetRegionName("testString")
				getRegionZoneOptionsModel.SetZoneName("testString")
				getRegionZoneOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getRegionZoneOptionsModel).ToNot(BeNil())
				Expect(getRegionZoneOptionsModel.RegionName).To(Equal(core.StringPtr("testString")))
				Expect(getRegionZoneOptionsModel.ZoneName).To(Equal(core.StringPtr("testString")))
				Expect(getRegionZoneOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSecurityGroupNetworkInterfaceOptions successfully`, func() {
				// Construct an instance of the GetSecurityGroupNetworkInterfaceOptions model
				securityGroupID := "testString"
				id := "testString"
				getSecurityGroupNetworkInterfaceOptionsModel := testService.NewGetSecurityGroupNetworkInterfaceOptions(securityGroupID, id)
				getSecurityGroupNetworkInterfaceOptionsModel.SetSecurityGroupID("testString")
				getSecurityGroupNetworkInterfaceOptionsModel.SetID("testString")
				getSecurityGroupNetworkInterfaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSecurityGroupNetworkInterfaceOptionsModel).ToNot(BeNil())
				Expect(getSecurityGroupNetworkInterfaceOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(getSecurityGroupNetworkInterfaceOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getSecurityGroupNetworkInterfaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSecurityGroupOptions successfully`, func() {
				// Construct an instance of the GetSecurityGroupOptions model
				id := "testString"
				getSecurityGroupOptionsModel := testService.NewGetSecurityGroupOptions(id)
				getSecurityGroupOptionsModel.SetID("testString")
				getSecurityGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSecurityGroupOptionsModel).ToNot(BeNil())
				Expect(getSecurityGroupOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getSecurityGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSecurityGroupRuleOptions successfully`, func() {
				// Construct an instance of the GetSecurityGroupRuleOptions model
				securityGroupID := "testString"
				id := "testString"
				getSecurityGroupRuleOptionsModel := testService.NewGetSecurityGroupRuleOptions(securityGroupID, id)
				getSecurityGroupRuleOptionsModel.SetSecurityGroupID("testString")
				getSecurityGroupRuleOptionsModel.SetID("testString")
				getSecurityGroupRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSecurityGroupRuleOptionsModel).ToNot(BeNil())
				Expect(getSecurityGroupRuleOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(getSecurityGroupRuleOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getSecurityGroupRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSubnetNetworkACLOptions successfully`, func() {
				// Construct an instance of the GetSubnetNetworkACLOptions model
				id := "testString"
				getSubnetNetworkACLOptionsModel := testService.NewGetSubnetNetworkACLOptions(id)
				getSubnetNetworkACLOptionsModel.SetID("testString")
				getSubnetNetworkACLOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSubnetNetworkACLOptionsModel).ToNot(BeNil())
				Expect(getSubnetNetworkACLOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getSubnetNetworkACLOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSubnetOptions successfully`, func() {
				// Construct an instance of the GetSubnetOptions model
				id := "testString"
				getSubnetOptionsModel := testService.NewGetSubnetOptions(id)
				getSubnetOptionsModel.SetID("testString")
				getSubnetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSubnetOptionsModel).ToNot(BeNil())
				Expect(getSubnetOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getSubnetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSubnetPublicGatewayOptions successfully`, func() {
				// Construct an instance of the GetSubnetPublicGatewayOptions model
				id := "testString"
				getSubnetPublicGatewayOptionsModel := testService.NewGetSubnetPublicGatewayOptions(id)
				getSubnetPublicGatewayOptionsModel.SetID("testString")
				getSubnetPublicGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSubnetPublicGatewayOptionsModel).ToNot(BeNil())
				Expect(getSubnetPublicGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getSubnetPublicGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVolumeOptions successfully`, func() {
				// Construct an instance of the GetVolumeOptions model
				id := "testString"
				getVolumeOptionsModel := testService.NewGetVolumeOptions(id)
				getVolumeOptionsModel.SetID("testString")
				getVolumeOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVolumeOptionsModel).ToNot(BeNil())
				Expect(getVolumeOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVolumeOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVolumeProfileOptions successfully`, func() {
				// Construct an instance of the GetVolumeProfileOptions model
				name := "testString"
				getVolumeProfileOptionsModel := testService.NewGetVolumeProfileOptions(name)
				getVolumeProfileOptionsModel.SetName("testString")
				getVolumeProfileOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVolumeProfileOptionsModel).ToNot(BeNil())
				Expect(getVolumeProfileOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(getVolumeProfileOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVPCAddressPrefixOptions successfully`, func() {
				// Construct an instance of the GetVPCAddressPrefixOptions model
				vpcID := "testString"
				id := "testString"
				getVPCAddressPrefixOptionsModel := testService.NewGetVPCAddressPrefixOptions(vpcID, id)
				getVPCAddressPrefixOptionsModel.SetVPCID("testString")
				getVPCAddressPrefixOptionsModel.SetID("testString")
				getVPCAddressPrefixOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVPCAddressPrefixOptionsModel).ToNot(BeNil())
				Expect(getVPCAddressPrefixOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(getVPCAddressPrefixOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVPCAddressPrefixOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVPCDefaultSecurityGroupOptions successfully`, func() {
				// Construct an instance of the GetVPCDefaultSecurityGroupOptions model
				id := "testString"
				getVPCDefaultSecurityGroupOptionsModel := testService.NewGetVPCDefaultSecurityGroupOptions(id)
				getVPCDefaultSecurityGroupOptionsModel.SetID("testString")
				getVPCDefaultSecurityGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVPCDefaultSecurityGroupOptionsModel).ToNot(BeNil())
				Expect(getVPCDefaultSecurityGroupOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVPCDefaultSecurityGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVPCOptions successfully`, func() {
				// Construct an instance of the GetVPCOptions model
				id := "testString"
				getVPCOptionsModel := testService.NewGetVPCOptions(id)
				getVPCOptionsModel.SetID("testString")
				getVPCOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVPCOptionsModel).ToNot(BeNil())
				Expect(getVPCOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVPCOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVPCRouteOptions successfully`, func() {
				// Construct an instance of the GetVPCRouteOptions model
				vpcID := "testString"
				id := "testString"
				getVPCRouteOptionsModel := testService.NewGetVPCRouteOptions(vpcID, id)
				getVPCRouteOptionsModel.SetVPCID("testString")
				getVPCRouteOptionsModel.SetID("testString")
				getVPCRouteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVPCRouteOptionsModel).ToNot(BeNil())
				Expect(getVPCRouteOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(getVPCRouteOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVPCRouteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVPNGatewayConnectionOptions successfully`, func() {
				// Construct an instance of the GetVPNGatewayConnectionOptions model
				vpnGatewayID := "testString"
				id := "testString"
				getVPNGatewayConnectionOptionsModel := testService.NewGetVPNGatewayConnectionOptions(vpnGatewayID, id)
				getVPNGatewayConnectionOptionsModel.SetVPNGatewayID("testString")
				getVPNGatewayConnectionOptionsModel.SetID("testString")
				getVPNGatewayConnectionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVPNGatewayConnectionOptionsModel).ToNot(BeNil())
				Expect(getVPNGatewayConnectionOptionsModel.VPNGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(getVPNGatewayConnectionOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVPNGatewayConnectionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVPNGatewayOptions successfully`, func() {
				// Construct an instance of the GetVPNGatewayOptions model
				id := "testString"
				getVPNGatewayOptionsModel := testService.NewGetVPNGatewayOptions(id)
				getVPNGatewayOptionsModel.SetID("testString")
				getVPNGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVPNGatewayOptionsModel).ToNot(BeNil())
				Expect(getVPNGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVPNGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewImageFilePrototype successfully`, func() {
				href := "cos://us-south/custom-image-vpc-bucket/customImage-0.vhd"
				model, err := testService.NewImageFilePrototype(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewListFloatingIpsOptions successfully`, func() {
				// Construct an instance of the ListFloatingIpsOptions model
				listFloatingIpsOptionsModel := testService.NewListFloatingIpsOptions()
				listFloatingIpsOptionsModel.SetStart("testString")
				listFloatingIpsOptionsModel.SetLimit(int64(1))
				listFloatingIpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listFloatingIpsOptionsModel).ToNot(BeNil())
				Expect(listFloatingIpsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listFloatingIpsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listFloatingIpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListIkePoliciesOptions successfully`, func() {
				// Construct an instance of the ListIkePoliciesOptions model
				listIkePoliciesOptionsModel := testService.NewListIkePoliciesOptions()
				listIkePoliciesOptionsModel.SetStart("testString")
				listIkePoliciesOptionsModel.SetLimit(int64(1))
				listIkePoliciesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listIkePoliciesOptionsModel).ToNot(BeNil())
				Expect(listIkePoliciesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listIkePoliciesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listIkePoliciesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListIkePolicyConnectionsOptions successfully`, func() {
				// Construct an instance of the ListIkePolicyConnectionsOptions model
				id := "testString"
				listIkePolicyConnectionsOptionsModel := testService.NewListIkePolicyConnectionsOptions(id)
				listIkePolicyConnectionsOptionsModel.SetID("testString")
				listIkePolicyConnectionsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listIkePolicyConnectionsOptionsModel).ToNot(BeNil())
				Expect(listIkePolicyConnectionsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(listIkePolicyConnectionsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListImagesOptions successfully`, func() {
				// Construct an instance of the ListImagesOptions model
				listImagesOptionsModel := testService.NewListImagesOptions()
				listImagesOptionsModel.SetStart("testString")
				listImagesOptionsModel.SetLimit(int64(1))
				listImagesOptionsModel.SetResourceGroupID("testString")
				listImagesOptionsModel.SetName("testString")
				listImagesOptionsModel.SetVisibility("private")
				listImagesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listImagesOptionsModel).ToNot(BeNil())
				Expect(listImagesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listImagesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listImagesOptionsModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listImagesOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(listImagesOptionsModel.Visibility).To(Equal(core.StringPtr("private")))
				Expect(listImagesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListInstanceNetworkInterfaceFloatingIpsOptions successfully`, func() {
				// Construct an instance of the ListInstanceNetworkInterfaceFloatingIpsOptions model
				instanceID := "testString"
				networkInterfaceID := "testString"
				listInstanceNetworkInterfaceFloatingIpsOptionsModel := testService.NewListInstanceNetworkInterfaceFloatingIpsOptions(instanceID, networkInterfaceID)
				listInstanceNetworkInterfaceFloatingIpsOptionsModel.SetInstanceID("testString")
				listInstanceNetworkInterfaceFloatingIpsOptionsModel.SetNetworkInterfaceID("testString")
				listInstanceNetworkInterfaceFloatingIpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listInstanceNetworkInterfaceFloatingIpsOptionsModel).ToNot(BeNil())
				Expect(listInstanceNetworkInterfaceFloatingIpsOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(listInstanceNetworkInterfaceFloatingIpsOptionsModel.NetworkInterfaceID).To(Equal(core.StringPtr("testString")))
				Expect(listInstanceNetworkInterfaceFloatingIpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListInstanceNetworkInterfacesOptions successfully`, func() {
				// Construct an instance of the ListInstanceNetworkInterfacesOptions model
				instanceID := "testString"
				listInstanceNetworkInterfacesOptionsModel := testService.NewListInstanceNetworkInterfacesOptions(instanceID)
				listInstanceNetworkInterfacesOptionsModel.SetInstanceID("testString")
				listInstanceNetworkInterfacesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listInstanceNetworkInterfacesOptionsModel).ToNot(BeNil())
				Expect(listInstanceNetworkInterfacesOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(listInstanceNetworkInterfacesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListInstanceProfilesOptions successfully`, func() {
				// Construct an instance of the ListInstanceProfilesOptions model
				listInstanceProfilesOptionsModel := testService.NewListInstanceProfilesOptions()
				listInstanceProfilesOptionsModel.SetStart("testString")
				listInstanceProfilesOptionsModel.SetLimit(int64(1))
				listInstanceProfilesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listInstanceProfilesOptionsModel).ToNot(BeNil())
				Expect(listInstanceProfilesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listInstanceProfilesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listInstanceProfilesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListInstanceVolumeAttachmentsOptions successfully`, func() {
				// Construct an instance of the ListInstanceVolumeAttachmentsOptions model
				instanceID := "testString"
				listInstanceVolumeAttachmentsOptionsModel := testService.NewListInstanceVolumeAttachmentsOptions(instanceID)
				listInstanceVolumeAttachmentsOptionsModel.SetInstanceID("testString")
				listInstanceVolumeAttachmentsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listInstanceVolumeAttachmentsOptionsModel).ToNot(BeNil())
				Expect(listInstanceVolumeAttachmentsOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(listInstanceVolumeAttachmentsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListInstancesOptions successfully`, func() {
				// Construct an instance of the ListInstancesOptions model
				listInstancesOptionsModel := testService.NewListInstancesOptions()
				listInstancesOptionsModel.SetStart("testString")
				listInstancesOptionsModel.SetLimit(int64(1))
				listInstancesOptionsModel.SetNetworkInterfacesSubnetID("testString")
				listInstancesOptionsModel.SetNetworkInterfacesSubnetCRN("testString")
				listInstancesOptionsModel.SetNetworkInterfacesSubnetName("testString")
				listInstancesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listInstancesOptionsModel).ToNot(BeNil())
				Expect(listInstancesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listInstancesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listInstancesOptionsModel.NetworkInterfacesSubnetID).To(Equal(core.StringPtr("testString")))
				Expect(listInstancesOptionsModel.NetworkInterfacesSubnetCRN).To(Equal(core.StringPtr("testString")))
				Expect(listInstancesOptionsModel.NetworkInterfacesSubnetName).To(Equal(core.StringPtr("testString")))
				Expect(listInstancesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListIpsecPoliciesOptions successfully`, func() {
				// Construct an instance of the ListIpsecPoliciesOptions model
				listIpsecPoliciesOptionsModel := testService.NewListIpsecPoliciesOptions()
				listIpsecPoliciesOptionsModel.SetStart("testString")
				listIpsecPoliciesOptionsModel.SetLimit(int64(1))
				listIpsecPoliciesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listIpsecPoliciesOptionsModel).ToNot(BeNil())
				Expect(listIpsecPoliciesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listIpsecPoliciesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listIpsecPoliciesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListIpsecPolicyConnectionsOptions successfully`, func() {
				// Construct an instance of the ListIpsecPolicyConnectionsOptions model
				id := "testString"
				listIpsecPolicyConnectionsOptionsModel := testService.NewListIpsecPolicyConnectionsOptions(id)
				listIpsecPolicyConnectionsOptionsModel.SetID("testString")
				listIpsecPolicyConnectionsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listIpsecPolicyConnectionsOptionsModel).ToNot(BeNil())
				Expect(listIpsecPolicyConnectionsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(listIpsecPolicyConnectionsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListKeysOptions successfully`, func() {
				// Construct an instance of the ListKeysOptions model
				listKeysOptionsModel := testService.NewListKeysOptions()
				listKeysOptionsModel.SetStart("testString")
				listKeysOptionsModel.SetLimit(int64(1))
				listKeysOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listKeysOptionsModel).ToNot(BeNil())
				Expect(listKeysOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listKeysOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listKeysOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListLoadBalancerListenerPoliciesOptions successfully`, func() {
				// Construct an instance of the ListLoadBalancerListenerPoliciesOptions model
				loadBalancerID := "testString"
				listenerID := "testString"
				listLoadBalancerListenerPoliciesOptionsModel := testService.NewListLoadBalancerListenerPoliciesOptions(loadBalancerID, listenerID)
				listLoadBalancerListenerPoliciesOptionsModel.SetLoadBalancerID("testString")
				listLoadBalancerListenerPoliciesOptionsModel.SetListenerID("testString")
				listLoadBalancerListenerPoliciesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listLoadBalancerListenerPoliciesOptionsModel).ToNot(BeNil())
				Expect(listLoadBalancerListenerPoliciesOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(listLoadBalancerListenerPoliciesOptionsModel.ListenerID).To(Equal(core.StringPtr("testString")))
				Expect(listLoadBalancerListenerPoliciesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListLoadBalancerListenerPolicyRulesOptions successfully`, func() {
				// Construct an instance of the ListLoadBalancerListenerPolicyRulesOptions model
				loadBalancerID := "testString"
				listenerID := "testString"
				policyID := "testString"
				listLoadBalancerListenerPolicyRulesOptionsModel := testService.NewListLoadBalancerListenerPolicyRulesOptions(loadBalancerID, listenerID, policyID)
				listLoadBalancerListenerPolicyRulesOptionsModel.SetLoadBalancerID("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.SetListenerID("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.SetPolicyID("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listLoadBalancerListenerPolicyRulesOptionsModel).ToNot(BeNil())
				Expect(listLoadBalancerListenerPolicyRulesOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(listLoadBalancerListenerPolicyRulesOptionsModel.ListenerID).To(Equal(core.StringPtr("testString")))
				Expect(listLoadBalancerListenerPolicyRulesOptionsModel.PolicyID).To(Equal(core.StringPtr("testString")))
				Expect(listLoadBalancerListenerPolicyRulesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListLoadBalancerListenersOptions successfully`, func() {
				// Construct an instance of the ListLoadBalancerListenersOptions model
				loadBalancerID := "testString"
				listLoadBalancerListenersOptionsModel := testService.NewListLoadBalancerListenersOptions(loadBalancerID)
				listLoadBalancerListenersOptionsModel.SetLoadBalancerID("testString")
				listLoadBalancerListenersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listLoadBalancerListenersOptionsModel).ToNot(BeNil())
				Expect(listLoadBalancerListenersOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(listLoadBalancerListenersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListLoadBalancerPoolMembersOptions successfully`, func() {
				// Construct an instance of the ListLoadBalancerPoolMembersOptions model
				loadBalancerID := "testString"
				poolID := "testString"
				listLoadBalancerPoolMembersOptionsModel := testService.NewListLoadBalancerPoolMembersOptions(loadBalancerID, poolID)
				listLoadBalancerPoolMembersOptionsModel.SetLoadBalancerID("testString")
				listLoadBalancerPoolMembersOptionsModel.SetPoolID("testString")
				listLoadBalancerPoolMembersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listLoadBalancerPoolMembersOptionsModel).ToNot(BeNil())
				Expect(listLoadBalancerPoolMembersOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(listLoadBalancerPoolMembersOptionsModel.PoolID).To(Equal(core.StringPtr("testString")))
				Expect(listLoadBalancerPoolMembersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListLoadBalancerPoolsOptions successfully`, func() {
				// Construct an instance of the ListLoadBalancerPoolsOptions model
				loadBalancerID := "testString"
				listLoadBalancerPoolsOptionsModel := testService.NewListLoadBalancerPoolsOptions(loadBalancerID)
				listLoadBalancerPoolsOptionsModel.SetLoadBalancerID("testString")
				listLoadBalancerPoolsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listLoadBalancerPoolsOptionsModel).ToNot(BeNil())
				Expect(listLoadBalancerPoolsOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(listLoadBalancerPoolsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListLoadBalancersOptions successfully`, func() {
				// Construct an instance of the ListLoadBalancersOptions model
				listLoadBalancersOptionsModel := testService.NewListLoadBalancersOptions()
				listLoadBalancersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listLoadBalancersOptionsModel).ToNot(BeNil())
				Expect(listLoadBalancersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListNetworkACLRulesOptions successfully`, func() {
				// Construct an instance of the ListNetworkACLRulesOptions model
				networkACLID := "testString"
				listNetworkACLRulesOptionsModel := testService.NewListNetworkACLRulesOptions(networkACLID)
				listNetworkACLRulesOptionsModel.SetNetworkACLID("testString")
				listNetworkACLRulesOptionsModel.SetStart("testString")
				listNetworkACLRulesOptionsModel.SetLimit(int64(1))
				listNetworkACLRulesOptionsModel.SetDirection("inbound")
				listNetworkACLRulesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listNetworkACLRulesOptionsModel).ToNot(BeNil())
				Expect(listNetworkACLRulesOptionsModel.NetworkACLID).To(Equal(core.StringPtr("testString")))
				Expect(listNetworkACLRulesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listNetworkACLRulesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listNetworkACLRulesOptionsModel.Direction).To(Equal(core.StringPtr("inbound")))
				Expect(listNetworkACLRulesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListNetworkAclsOptions successfully`, func() {
				// Construct an instance of the ListNetworkAclsOptions model
				listNetworkAclsOptionsModel := testService.NewListNetworkAclsOptions()
				listNetworkAclsOptionsModel.SetStart("testString")
				listNetworkAclsOptionsModel.SetLimit(int64(1))
				listNetworkAclsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listNetworkAclsOptionsModel).ToNot(BeNil())
				Expect(listNetworkAclsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listNetworkAclsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listNetworkAclsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListOperatingSystemsOptions successfully`, func() {
				// Construct an instance of the ListOperatingSystemsOptions model
				listOperatingSystemsOptionsModel := testService.NewListOperatingSystemsOptions()
				listOperatingSystemsOptionsModel.SetStart("testString")
				listOperatingSystemsOptionsModel.SetLimit(int64(1))
				listOperatingSystemsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listOperatingSystemsOptionsModel).ToNot(BeNil())
				Expect(listOperatingSystemsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listOperatingSystemsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listOperatingSystemsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListPublicGatewaysOptions successfully`, func() {
				// Construct an instance of the ListPublicGatewaysOptions model
				listPublicGatewaysOptionsModel := testService.NewListPublicGatewaysOptions()
				listPublicGatewaysOptionsModel.SetStart("testString")
				listPublicGatewaysOptionsModel.SetLimit(int64(1))
				listPublicGatewaysOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listPublicGatewaysOptionsModel).ToNot(BeNil())
				Expect(listPublicGatewaysOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listPublicGatewaysOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listPublicGatewaysOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListRegionZonesOptions successfully`, func() {
				// Construct an instance of the ListRegionZonesOptions model
				regionName := "testString"
				listRegionZonesOptionsModel := testService.NewListRegionZonesOptions(regionName)
				listRegionZonesOptionsModel.SetRegionName("testString")
				listRegionZonesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listRegionZonesOptionsModel).ToNot(BeNil())
				Expect(listRegionZonesOptionsModel.RegionName).To(Equal(core.StringPtr("testString")))
				Expect(listRegionZonesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListRegionsOptions successfully`, func() {
				// Construct an instance of the ListRegionsOptions model
				listRegionsOptionsModel := testService.NewListRegionsOptions()
				listRegionsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listRegionsOptionsModel).ToNot(BeNil())
				Expect(listRegionsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListSecurityGroupNetworkInterfacesOptions successfully`, func() {
				// Construct an instance of the ListSecurityGroupNetworkInterfacesOptions model
				securityGroupID := "testString"
				listSecurityGroupNetworkInterfacesOptionsModel := testService.NewListSecurityGroupNetworkInterfacesOptions(securityGroupID)
				listSecurityGroupNetworkInterfacesOptionsModel.SetSecurityGroupID("testString")
				listSecurityGroupNetworkInterfacesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listSecurityGroupNetworkInterfacesOptionsModel).ToNot(BeNil())
				Expect(listSecurityGroupNetworkInterfacesOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listSecurityGroupNetworkInterfacesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListSecurityGroupRulesOptions successfully`, func() {
				// Construct an instance of the ListSecurityGroupRulesOptions model
				securityGroupID := "testString"
				listSecurityGroupRulesOptionsModel := testService.NewListSecurityGroupRulesOptions(securityGroupID)
				listSecurityGroupRulesOptionsModel.SetSecurityGroupID("testString")
				listSecurityGroupRulesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listSecurityGroupRulesOptionsModel).ToNot(BeNil())
				Expect(listSecurityGroupRulesOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listSecurityGroupRulesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListSecurityGroupsOptions successfully`, func() {
				// Construct an instance of the ListSecurityGroupsOptions model
				listSecurityGroupsOptionsModel := testService.NewListSecurityGroupsOptions()
				listSecurityGroupsOptionsModel.SetVPCID("testString")
				listSecurityGroupsOptionsModel.SetVPCCRN("testString")
				listSecurityGroupsOptionsModel.SetVPCName("testString")
				listSecurityGroupsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listSecurityGroupsOptionsModel).ToNot(BeNil())
				Expect(listSecurityGroupsOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(listSecurityGroupsOptionsModel.VPCCRN).To(Equal(core.StringPtr("testString")))
				Expect(listSecurityGroupsOptionsModel.VPCName).To(Equal(core.StringPtr("testString")))
				Expect(listSecurityGroupsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListSubnetsOptions successfully`, func() {
				// Construct an instance of the ListSubnetsOptions model
				listSubnetsOptionsModel := testService.NewListSubnetsOptions()
				listSubnetsOptionsModel.SetStart("testString")
				listSubnetsOptionsModel.SetLimit(int64(1))
				listSubnetsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listSubnetsOptionsModel).ToNot(BeNil())
				Expect(listSubnetsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listSubnetsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listSubnetsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVolumeProfilesOptions successfully`, func() {
				// Construct an instance of the ListVolumeProfilesOptions model
				listVolumeProfilesOptionsModel := testService.NewListVolumeProfilesOptions()
				listVolumeProfilesOptionsModel.SetStart("testString")
				listVolumeProfilesOptionsModel.SetLimit(int64(1))
				listVolumeProfilesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVolumeProfilesOptionsModel).ToNot(BeNil())
				Expect(listVolumeProfilesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listVolumeProfilesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listVolumeProfilesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVolumesOptions successfully`, func() {
				// Construct an instance of the ListVolumesOptions model
				listVolumesOptionsModel := testService.NewListVolumesOptions()
				listVolumesOptionsModel.SetStart("testString")
				listVolumesOptionsModel.SetLimit(int64(1))
				listVolumesOptionsModel.SetName("testString")
				listVolumesOptionsModel.SetZoneName("testString")
				listVolumesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVolumesOptionsModel).ToNot(BeNil())
				Expect(listVolumesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listVolumesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listVolumesOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(listVolumesOptionsModel.ZoneName).To(Equal(core.StringPtr("testString")))
				Expect(listVolumesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVPCAddressPrefixesOptions successfully`, func() {
				// Construct an instance of the ListVPCAddressPrefixesOptions model
				vpcID := "testString"
				listVPCAddressPrefixesOptionsModel := testService.NewListVPCAddressPrefixesOptions(vpcID)
				listVPCAddressPrefixesOptionsModel.SetVPCID("testString")
				listVPCAddressPrefixesOptionsModel.SetStart("testString")
				listVPCAddressPrefixesOptionsModel.SetLimit(int64(1))
				listVPCAddressPrefixesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVPCAddressPrefixesOptionsModel).ToNot(BeNil())
				Expect(listVPCAddressPrefixesOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(listVPCAddressPrefixesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listVPCAddressPrefixesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listVPCAddressPrefixesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVPCRoutesOptions successfully`, func() {
				// Construct an instance of the ListVPCRoutesOptions model
				vpcID := "testString"
				listVPCRoutesOptionsModel := testService.NewListVPCRoutesOptions(vpcID)
				listVPCRoutesOptionsModel.SetVPCID("testString")
				listVPCRoutesOptionsModel.SetZoneName("testString")
				listVPCRoutesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVPCRoutesOptionsModel).ToNot(BeNil())
				Expect(listVPCRoutesOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(listVPCRoutesOptionsModel.ZoneName).To(Equal(core.StringPtr("testString")))
				Expect(listVPCRoutesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVpcsOptions successfully`, func() {
				// Construct an instance of the ListVpcsOptions model
				listVpcsOptionsModel := testService.NewListVpcsOptions()
				listVpcsOptionsModel.SetStart("testString")
				listVpcsOptionsModel.SetLimit(int64(1))
				listVpcsOptionsModel.SetClassicAccess(true)
				listVpcsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVpcsOptionsModel).ToNot(BeNil())
				Expect(listVpcsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listVpcsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listVpcsOptionsModel.ClassicAccess).To(Equal(core.BoolPtr(true)))
				Expect(listVpcsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVPNGatewayConnectionLocalCIDRsOptions successfully`, func() {
				// Construct an instance of the ListVPNGatewayConnectionLocalCIDRsOptions model
				vpnGatewayID := "testString"
				id := "testString"
				listVPNGatewayConnectionLocalCIDRsOptionsModel := testService.NewListVPNGatewayConnectionLocalCIDRsOptions(vpnGatewayID, id)
				listVPNGatewayConnectionLocalCIDRsOptionsModel.SetVPNGatewayID("testString")
				listVPNGatewayConnectionLocalCIDRsOptionsModel.SetID("testString")
				listVPNGatewayConnectionLocalCIDRsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVPNGatewayConnectionLocalCIDRsOptionsModel).ToNot(BeNil())
				Expect(listVPNGatewayConnectionLocalCIDRsOptionsModel.VPNGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(listVPNGatewayConnectionLocalCIDRsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(listVPNGatewayConnectionLocalCIDRsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVPNGatewayConnectionPeerCIDRsOptions successfully`, func() {
				// Construct an instance of the ListVPNGatewayConnectionPeerCIDRsOptions model
				vpnGatewayID := "testString"
				id := "testString"
				listVPNGatewayConnectionPeerCIDRsOptionsModel := testService.NewListVPNGatewayConnectionPeerCIDRsOptions(vpnGatewayID, id)
				listVPNGatewayConnectionPeerCIDRsOptionsModel.SetVPNGatewayID("testString")
				listVPNGatewayConnectionPeerCIDRsOptionsModel.SetID("testString")
				listVPNGatewayConnectionPeerCIDRsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVPNGatewayConnectionPeerCIDRsOptionsModel).ToNot(BeNil())
				Expect(listVPNGatewayConnectionPeerCIDRsOptionsModel.VPNGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(listVPNGatewayConnectionPeerCIDRsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(listVPNGatewayConnectionPeerCIDRsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVPNGatewayConnectionsOptions successfully`, func() {
				// Construct an instance of the ListVPNGatewayConnectionsOptions model
				vpnGatewayID := "testString"
				listVPNGatewayConnectionsOptionsModel := testService.NewListVPNGatewayConnectionsOptions(vpnGatewayID)
				listVPNGatewayConnectionsOptionsModel.SetVPNGatewayID("testString")
				listVPNGatewayConnectionsOptionsModel.SetStatus("testString")
				listVPNGatewayConnectionsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVPNGatewayConnectionsOptionsModel).ToNot(BeNil())
				Expect(listVPNGatewayConnectionsOptionsModel.VPNGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(listVPNGatewayConnectionsOptionsModel.Status).To(Equal(core.StringPtr("testString")))
				Expect(listVPNGatewayConnectionsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVPNGatewaysOptions successfully`, func() {
				// Construct an instance of the ListVPNGatewaysOptions model
				listVPNGatewaysOptionsModel := testService.NewListVPNGatewaysOptions()
				listVPNGatewaysOptionsModel.SetStart("testString")
				listVPNGatewaysOptionsModel.SetLimit(int64(1))
				listVPNGatewaysOptionsModel.SetResourceGroupID("testString")
				listVPNGatewaysOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVPNGatewaysOptionsModel).ToNot(BeNil())
				Expect(listVPNGatewaysOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listVPNGatewaysOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listVPNGatewaysOptionsModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listVPNGatewaysOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewLoadBalancerListenerPolicyPrototype successfully`, func() {
				action := "forward"
				priority := int64(5)
				model, err := testService.NewLoadBalancerListenerPolicyPrototype(action, priority)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerListenerPolicyRulePrototype successfully`, func() {
				condition := "contains"
				typeVar := "header"
				value := "testString"
				model, err := testService.NewLoadBalancerListenerPolicyRulePrototype(condition, typeVar, value)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerListenerPrototypeLoadBalancerContext successfully`, func() {
				port := int64(443)
				protocol := "http"
				model, err := testService.NewLoadBalancerListenerPrototypeLoadBalancerContext(port, protocol)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolHealthMonitorPatch successfully`, func() {
				delay := int64(5)
				maxRetries := int64(2)
				timeout := int64(2)
				typeVar := "http"
				model, err := testService.NewLoadBalancerPoolHealthMonitorPatch(delay, maxRetries, timeout, typeVar)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolHealthMonitorPrototype successfully`, func() {
				delay := int64(5)
				maxRetries := int64(2)
				timeout := int64(2)
				typeVar := "http"
				model, err := testService.NewLoadBalancerPoolHealthMonitorPrototype(delay, maxRetries, timeout, typeVar)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolIdentityByName successfully`, func() {
				name := "my-load-balancer-pool"
				model, err := testService.NewLoadBalancerPoolIdentityByName(name)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolMemberPrototype successfully`, func() {
				port := int64(80)
				var target vpcclassicv1.LoadBalancerPoolMemberTargetPrototypeIntf = nil
				_, err := testService.NewLoadBalancerPoolMemberPrototype(port, target)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolPrototype successfully`, func() {
				algorithm := "least_connections"
				var healthMonitor *vpcclassicv1.LoadBalancerPoolHealthMonitorPrototype = nil
				protocol := "http"
				_, err := testService.NewLoadBalancerPoolPrototype(algorithm, healthMonitor, protocol)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolSessionPersistencePatch successfully`, func() {
				typeVar := "source_ip"
				model, err := testService.NewLoadBalancerPoolSessionPersistencePatch(typeVar)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolSessionPersistencePrototype successfully`, func() {
				typeVar := "source_ip"
				model, err := testService.NewLoadBalancerPoolSessionPersistencePrototype(typeVar)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkInterfacePrototype successfully`, func() {
				var subnet vpcclassicv1.SubnetIdentityIntf = nil
				_, err := testService.NewNetworkInterfacePrototype(subnet)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewRemoveInstanceNetworkInterfaceFloatingIPOptions successfully`, func() {
				// Construct an instance of the RemoveInstanceNetworkInterfaceFloatingIPOptions model
				instanceID := "testString"
				networkInterfaceID := "testString"
				id := "testString"
				removeInstanceNetworkInterfaceFloatingIPOptionsModel := testService.NewRemoveInstanceNetworkInterfaceFloatingIPOptions(instanceID, networkInterfaceID, id)
				removeInstanceNetworkInterfaceFloatingIPOptionsModel.SetInstanceID("testString")
				removeInstanceNetworkInterfaceFloatingIPOptionsModel.SetNetworkInterfaceID("testString")
				removeInstanceNetworkInterfaceFloatingIPOptionsModel.SetID("testString")
				removeInstanceNetworkInterfaceFloatingIPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(removeInstanceNetworkInterfaceFloatingIPOptionsModel).ToNot(BeNil())
				Expect(removeInstanceNetworkInterfaceFloatingIPOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(removeInstanceNetworkInterfaceFloatingIPOptionsModel.NetworkInterfaceID).To(Equal(core.StringPtr("testString")))
				Expect(removeInstanceNetworkInterfaceFloatingIPOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(removeInstanceNetworkInterfaceFloatingIPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRemoveSecurityGroupNetworkInterfaceOptions successfully`, func() {
				// Construct an instance of the RemoveSecurityGroupNetworkInterfaceOptions model
				securityGroupID := "testString"
				id := "testString"
				removeSecurityGroupNetworkInterfaceOptionsModel := testService.NewRemoveSecurityGroupNetworkInterfaceOptions(securityGroupID, id)
				removeSecurityGroupNetworkInterfaceOptionsModel.SetSecurityGroupID("testString")
				removeSecurityGroupNetworkInterfaceOptionsModel.SetID("testString")
				removeSecurityGroupNetworkInterfaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(removeSecurityGroupNetworkInterfaceOptionsModel).ToNot(BeNil())
				Expect(removeSecurityGroupNetworkInterfaceOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(removeSecurityGroupNetworkInterfaceOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(removeSecurityGroupNetworkInterfaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRemoveVPNGatewayConnectionLocalCIDROptions successfully`, func() {
				// Construct an instance of the RemoveVPNGatewayConnectionLocalCIDROptions model
				vpnGatewayID := "testString"
				id := "testString"
				cidrPrefix := "testString"
				prefixLength := "testString"
				removeVPNGatewayConnectionLocalCIDROptionsModel := testService.NewRemoveVPNGatewayConnectionLocalCIDROptions(vpnGatewayID, id, cidrPrefix, prefixLength)
				removeVPNGatewayConnectionLocalCIDROptionsModel.SetVPNGatewayID("testString")
				removeVPNGatewayConnectionLocalCIDROptionsModel.SetID("testString")
				removeVPNGatewayConnectionLocalCIDROptionsModel.SetCIDRPrefix("testString")
				removeVPNGatewayConnectionLocalCIDROptionsModel.SetPrefixLength("testString")
				removeVPNGatewayConnectionLocalCIDROptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(removeVPNGatewayConnectionLocalCIDROptionsModel).ToNot(BeNil())
				Expect(removeVPNGatewayConnectionLocalCIDROptionsModel.VPNGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(removeVPNGatewayConnectionLocalCIDROptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(removeVPNGatewayConnectionLocalCIDROptionsModel.CIDRPrefix).To(Equal(core.StringPtr("testString")))
				Expect(removeVPNGatewayConnectionLocalCIDROptionsModel.PrefixLength).To(Equal(core.StringPtr("testString")))
				Expect(removeVPNGatewayConnectionLocalCIDROptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRemoveVPNGatewayConnectionPeerCIDROptions successfully`, func() {
				// Construct an instance of the RemoveVPNGatewayConnectionPeerCIDROptions model
				vpnGatewayID := "testString"
				id := "testString"
				cidrPrefix := "testString"
				prefixLength := "testString"
				removeVPNGatewayConnectionPeerCIDROptionsModel := testService.NewRemoveVPNGatewayConnectionPeerCIDROptions(vpnGatewayID, id, cidrPrefix, prefixLength)
				removeVPNGatewayConnectionPeerCIDROptionsModel.SetVPNGatewayID("testString")
				removeVPNGatewayConnectionPeerCIDROptionsModel.SetID("testString")
				removeVPNGatewayConnectionPeerCIDROptionsModel.SetCIDRPrefix("testString")
				removeVPNGatewayConnectionPeerCIDROptionsModel.SetPrefixLength("testString")
				removeVPNGatewayConnectionPeerCIDROptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(removeVPNGatewayConnectionPeerCIDROptionsModel).ToNot(BeNil())
				Expect(removeVPNGatewayConnectionPeerCIDROptionsModel.VPNGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(removeVPNGatewayConnectionPeerCIDROptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(removeVPNGatewayConnectionPeerCIDROptionsModel.CIDRPrefix).To(Equal(core.StringPtr("testString")))
				Expect(removeVPNGatewayConnectionPeerCIDROptionsModel.PrefixLength).To(Equal(core.StringPtr("testString")))
				Expect(removeVPNGatewayConnectionPeerCIDROptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceLoadBalancerPoolMembersOptions successfully`, func() {
				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeIP model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberTargetPrototypeIP)
				Expect(loadBalancerPoolMemberTargetPrototypeModel).ToNot(BeNil())
				loadBalancerPoolMemberTargetPrototypeModel.Address = core.StringPtr("192.168.3.4")
				Expect(loadBalancerPoolMemberTargetPrototypeModel.Address).To(Equal(core.StringPtr("192.168.3.4")))

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberPrototype)
				Expect(loadBalancerPoolMemberPrototypeModel).ToNot(BeNil())
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))
				Expect(loadBalancerPoolMemberPrototypeModel.Port).To(Equal(core.Int64Ptr(int64(80))))
				Expect(loadBalancerPoolMemberPrototypeModel.Target).To(Equal(loadBalancerPoolMemberTargetPrototypeModel))
				Expect(loadBalancerPoolMemberPrototypeModel.Weight).To(Equal(core.Int64Ptr(int64(50))))

				// Construct an instance of the ReplaceLoadBalancerPoolMembersOptions model
				loadBalancerID := "testString"
				poolID := "testString"
				replaceLoadBalancerPoolMembersOptionsMembers := []vpcclassicv1.LoadBalancerPoolMemberPrototype{}
				replaceLoadBalancerPoolMembersOptionsModel := testService.NewReplaceLoadBalancerPoolMembersOptions(loadBalancerID, poolID, replaceLoadBalancerPoolMembersOptionsMembers)
				replaceLoadBalancerPoolMembersOptionsModel.SetLoadBalancerID("testString")
				replaceLoadBalancerPoolMembersOptionsModel.SetPoolID("testString")
				replaceLoadBalancerPoolMembersOptionsModel.SetMembers([]vpcclassicv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel})
				replaceLoadBalancerPoolMembersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceLoadBalancerPoolMembersOptionsModel).ToNot(BeNil())
				Expect(replaceLoadBalancerPoolMembersOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(replaceLoadBalancerPoolMembersOptionsModel.PoolID).To(Equal(core.StringPtr("testString")))
				Expect(replaceLoadBalancerPoolMembersOptionsModel.Members).To(Equal([]vpcclassicv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}))
				Expect(replaceLoadBalancerPoolMembersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceSubnetNetworkACLOptions successfully`, func() {
				// Construct an instance of the NetworkACLIdentityByID model
				networkACLIdentityModel := new(vpcclassicv1.NetworkACLIdentityByID)
				Expect(networkACLIdentityModel).ToNot(BeNil())
				networkACLIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")
				Expect(networkACLIdentityModel.ID).To(Equal(core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")))

				// Construct an instance of the ReplaceSubnetNetworkACLOptions model
				id := "testString"
				var networkACLIdentity vpcclassicv1.NetworkACLIdentityIntf = nil
				replaceSubnetNetworkACLOptionsModel := testService.NewReplaceSubnetNetworkACLOptions(id, networkACLIdentity)
				replaceSubnetNetworkACLOptionsModel.SetID("testString")
				replaceSubnetNetworkACLOptionsModel.SetNetworkACLIdentity(networkACLIdentityModel)
				replaceSubnetNetworkACLOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceSubnetNetworkACLOptionsModel).ToNot(BeNil())
				Expect(replaceSubnetNetworkACLOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(replaceSubnetNetworkACLOptionsModel.NetworkACLIdentity).To(Equal(networkACLIdentityModel))
				Expect(replaceSubnetNetworkACLOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewSetSubnetPublicGatewayOptions successfully`, func() {
				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcclassicv1.PublicGatewayIdentityByID)
				Expect(publicGatewayIdentityModel).ToNot(BeNil())
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")
				Expect(publicGatewayIdentityModel.ID).To(Equal(core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")))

				// Construct an instance of the SetSubnetPublicGatewayOptions model
				id := "testString"
				var publicGatewayIdentity vpcclassicv1.PublicGatewayIdentityIntf = nil
				setSubnetPublicGatewayOptionsModel := testService.NewSetSubnetPublicGatewayOptions(id, publicGatewayIdentity)
				setSubnetPublicGatewayOptionsModel.SetID("testString")
				setSubnetPublicGatewayOptionsModel.SetPublicGatewayIdentity(publicGatewayIdentityModel)
				setSubnetPublicGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(setSubnetPublicGatewayOptionsModel).ToNot(BeNil())
				Expect(setSubnetPublicGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(setSubnetPublicGatewayOptionsModel.PublicGatewayIdentity).To(Equal(publicGatewayIdentityModel))
				Expect(setSubnetPublicGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUnsetSubnetPublicGatewayOptions successfully`, func() {
				// Construct an instance of the UnsetSubnetPublicGatewayOptions model
				id := "testString"
				unsetSubnetPublicGatewayOptionsModel := testService.NewUnsetSubnetPublicGatewayOptions(id)
				unsetSubnetPublicGatewayOptionsModel.SetID("testString")
				unsetSubnetPublicGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(unsetSubnetPublicGatewayOptionsModel).ToNot(BeNil())
				Expect(unsetSubnetPublicGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(unsetSubnetPublicGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateFloatingIPOptions successfully`, func() {
				// Construct an instance of the FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID model
				floatingIPPatchTargetNetworkInterfaceIdentityModel := new(vpcclassicv1.FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID)
				Expect(floatingIPPatchTargetNetworkInterfaceIdentityModel).ToNot(BeNil())
				floatingIPPatchTargetNetworkInterfaceIdentityModel.ID = core.StringPtr("10c02d81-0ecb-4dc5-897d-28392913b81e")
				Expect(floatingIPPatchTargetNetworkInterfaceIdentityModel.ID).To(Equal(core.StringPtr("10c02d81-0ecb-4dc5-897d-28392913b81e")))

				// Construct an instance of the UpdateFloatingIPOptions model
				id := "testString"
				updateFloatingIPOptionsModel := testService.NewUpdateFloatingIPOptions(id)
				updateFloatingIPOptionsModel.SetID("testString")
				updateFloatingIPOptionsModel.SetName("my-floating-ip")
				updateFloatingIPOptionsModel.SetTarget(floatingIPPatchTargetNetworkInterfaceIdentityModel)
				updateFloatingIPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateFloatingIPOptionsModel).ToNot(BeNil())
				Expect(updateFloatingIPOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateFloatingIPOptionsModel.Name).To(Equal(core.StringPtr("my-floating-ip")))
				Expect(updateFloatingIPOptionsModel.Target).To(Equal(floatingIPPatchTargetNetworkInterfaceIdentityModel))
				Expect(updateFloatingIPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateIkePolicyOptions successfully`, func() {
				// Construct an instance of the UpdateIkePolicyOptions model
				id := "testString"
				updateIkePolicyOptionsModel := testService.NewUpdateIkePolicyOptions(id)
				updateIkePolicyOptionsModel.SetID("testString")
				updateIkePolicyOptionsModel.SetAuthenticationAlgorithm("md5")
				updateIkePolicyOptionsModel.SetDhGroup(int64(2))
				updateIkePolicyOptionsModel.SetEncryptionAlgorithm("triple_des")
				updateIkePolicyOptionsModel.SetIkeVersion(int64(1))
				updateIkePolicyOptionsModel.SetKeyLifetime(int64(28800))
				updateIkePolicyOptionsModel.SetName("my-ike-policy")
				updateIkePolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateIkePolicyOptionsModel).ToNot(BeNil())
				Expect(updateIkePolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateIkePolicyOptionsModel.AuthenticationAlgorithm).To(Equal(core.StringPtr("md5")))
				Expect(updateIkePolicyOptionsModel.DhGroup).To(Equal(core.Int64Ptr(int64(2))))
				Expect(updateIkePolicyOptionsModel.EncryptionAlgorithm).To(Equal(core.StringPtr("triple_des")))
				Expect(updateIkePolicyOptionsModel.IkeVersion).To(Equal(core.Int64Ptr(int64(1))))
				Expect(updateIkePolicyOptionsModel.KeyLifetime).To(Equal(core.Int64Ptr(int64(28800))))
				Expect(updateIkePolicyOptionsModel.Name).To(Equal(core.StringPtr("my-ike-policy")))
				Expect(updateIkePolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateImageOptions successfully`, func() {
				// Construct an instance of the UpdateImageOptions model
				id := "testString"
				updateImageOptionsModel := testService.NewUpdateImageOptions(id)
				updateImageOptionsModel.SetID("testString")
				updateImageOptionsModel.SetName("my-image")
				updateImageOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateImageOptionsModel).ToNot(BeNil())
				Expect(updateImageOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateImageOptionsModel.Name).To(Equal(core.StringPtr("my-image")))
				Expect(updateImageOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateInstanceOptions successfully`, func() {
				// Construct an instance of the UpdateInstanceOptions model
				id := "testString"
				updateInstanceOptionsModel := testService.NewUpdateInstanceOptions(id)
				updateInstanceOptionsModel.SetID("testString")
				updateInstanceOptionsModel.SetName("my-instance")
				updateInstanceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateInstanceOptionsModel).ToNot(BeNil())
				Expect(updateInstanceOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateInstanceOptionsModel.Name).To(Equal(core.StringPtr("my-instance")))
				Expect(updateInstanceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateInstanceVolumeAttachmentOptions successfully`, func() {
				// Construct an instance of the UpdateInstanceVolumeAttachmentOptions model
				instanceID := "testString"
				id := "testString"
				updateInstanceVolumeAttachmentOptionsModel := testService.NewUpdateInstanceVolumeAttachmentOptions(instanceID, id)
				updateInstanceVolumeAttachmentOptionsModel.SetInstanceID("testString")
				updateInstanceVolumeAttachmentOptionsModel.SetID("testString")
				updateInstanceVolumeAttachmentOptionsModel.SetDeleteVolumeOnInstanceDelete(true)
				updateInstanceVolumeAttachmentOptionsModel.SetName("my-volume-attachment")
				updateInstanceVolumeAttachmentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateInstanceVolumeAttachmentOptionsModel).ToNot(BeNil())
				Expect(updateInstanceVolumeAttachmentOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(updateInstanceVolumeAttachmentOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateInstanceVolumeAttachmentOptionsModel.DeleteVolumeOnInstanceDelete).To(Equal(core.BoolPtr(true)))
				Expect(updateInstanceVolumeAttachmentOptionsModel.Name).To(Equal(core.StringPtr("my-volume-attachment")))
				Expect(updateInstanceVolumeAttachmentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateIpsecPolicyOptions successfully`, func() {
				// Construct an instance of the UpdateIpsecPolicyOptions model
				id := "testString"
				updateIpsecPolicyOptionsModel := testService.NewUpdateIpsecPolicyOptions(id)
				updateIpsecPolicyOptionsModel.SetID("testString")
				updateIpsecPolicyOptionsModel.SetAuthenticationAlgorithm("md5")
				updateIpsecPolicyOptionsModel.SetEncryptionAlgorithm("triple_des")
				updateIpsecPolicyOptionsModel.SetKeyLifetime(int64(3600))
				updateIpsecPolicyOptionsModel.SetName("my-ipsec-policy")
				updateIpsecPolicyOptionsModel.SetPfs("disabled")
				updateIpsecPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateIpsecPolicyOptionsModel).ToNot(BeNil())
				Expect(updateIpsecPolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateIpsecPolicyOptionsModel.AuthenticationAlgorithm).To(Equal(core.StringPtr("md5")))
				Expect(updateIpsecPolicyOptionsModel.EncryptionAlgorithm).To(Equal(core.StringPtr("triple_des")))
				Expect(updateIpsecPolicyOptionsModel.KeyLifetime).To(Equal(core.Int64Ptr(int64(3600))))
				Expect(updateIpsecPolicyOptionsModel.Name).To(Equal(core.StringPtr("my-ipsec-policy")))
				Expect(updateIpsecPolicyOptionsModel.Pfs).To(Equal(core.StringPtr("disabled")))
				Expect(updateIpsecPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateKeyOptions successfully`, func() {
				// Construct an instance of the UpdateKeyOptions model
				id := "testString"
				updateKeyOptionsModel := testService.NewUpdateKeyOptions(id)
				updateKeyOptionsModel.SetID("testString")
				updateKeyOptionsModel.SetName("my-key")
				updateKeyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateKeyOptionsModel).ToNot(BeNil())
				Expect(updateKeyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateKeyOptionsModel.Name).To(Equal(core.StringPtr("my-key")))
				Expect(updateKeyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateLoadBalancerListenerOptions successfully`, func() {
				// Construct an instance of the CertificateInstanceIdentityByCRN model
				certificateInstanceIdentityModel := new(vpcclassicv1.CertificateInstanceIdentityByCRN)
				Expect(certificateInstanceIdentityModel).ToNot(BeNil())
				certificateInstanceIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")
				Expect(certificateInstanceIdentityModel.CRN).To(Equal(core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")))

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcclassicv1.LoadBalancerPoolIdentityByID)
				Expect(loadBalancerPoolIdentityModel).ToNot(BeNil())
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")
				Expect(loadBalancerPoolIdentityModel.ID).To(Equal(core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")))

				// Construct an instance of the UpdateLoadBalancerListenerOptions model
				loadBalancerID := "testString"
				id := "testString"
				updateLoadBalancerListenerOptionsModel := testService.NewUpdateLoadBalancerListenerOptions(loadBalancerID, id)
				updateLoadBalancerListenerOptionsModel.SetLoadBalancerID("testString")
				updateLoadBalancerListenerOptionsModel.SetID("testString")
				updateLoadBalancerListenerOptionsModel.SetCertificateInstance(certificateInstanceIdentityModel)
				updateLoadBalancerListenerOptionsModel.SetConnectionLimit(int64(2000))
				updateLoadBalancerListenerOptionsModel.SetDefaultPool(loadBalancerPoolIdentityModel)
				updateLoadBalancerListenerOptionsModel.SetPort(int64(443))
				updateLoadBalancerListenerOptionsModel.SetProtocol("http")
				updateLoadBalancerListenerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateLoadBalancerListenerOptionsModel).ToNot(BeNil())
				Expect(updateLoadBalancerListenerOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerListenerOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerListenerOptionsModel.CertificateInstance).To(Equal(certificateInstanceIdentityModel))
				Expect(updateLoadBalancerListenerOptionsModel.ConnectionLimit).To(Equal(core.Int64Ptr(int64(2000))))
				Expect(updateLoadBalancerListenerOptionsModel.DefaultPool).To(Equal(loadBalancerPoolIdentityModel))
				Expect(updateLoadBalancerListenerOptionsModel.Port).To(Equal(core.Int64Ptr(int64(443))))
				Expect(updateLoadBalancerListenerOptionsModel.Protocol).To(Equal(core.StringPtr("http")))
				Expect(updateLoadBalancerListenerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateLoadBalancerListenerPolicyOptions successfully`, func() {
				// Construct an instance of the LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyPatchTargetModel := new(vpcclassicv1.LoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				Expect(loadBalancerListenerPolicyPatchTargetModel).ToNot(BeNil())
				loadBalancerListenerPolicyPatchTargetModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")
				Expect(loadBalancerListenerPolicyPatchTargetModel.ID).To(Equal(core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")))

				// Construct an instance of the UpdateLoadBalancerListenerPolicyOptions model
				loadBalancerID := "testString"
				listenerID := "testString"
				id := "testString"
				updateLoadBalancerListenerPolicyOptionsModel := testService.NewUpdateLoadBalancerListenerPolicyOptions(loadBalancerID, listenerID, id)
				updateLoadBalancerListenerPolicyOptionsModel.SetLoadBalancerID("testString")
				updateLoadBalancerListenerPolicyOptionsModel.SetListenerID("testString")
				updateLoadBalancerListenerPolicyOptionsModel.SetID("testString")
				updateLoadBalancerListenerPolicyOptionsModel.SetName("my-policy")
				updateLoadBalancerListenerPolicyOptionsModel.SetPriority(int64(5))
				updateLoadBalancerListenerPolicyOptionsModel.SetTarget(loadBalancerListenerPolicyPatchTargetModel)
				updateLoadBalancerListenerPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateLoadBalancerListenerPolicyOptionsModel).ToNot(BeNil())
				Expect(updateLoadBalancerListenerPolicyOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerListenerPolicyOptionsModel.ListenerID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerListenerPolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerListenerPolicyOptionsModel.Name).To(Equal(core.StringPtr("my-policy")))
				Expect(updateLoadBalancerListenerPolicyOptionsModel.Priority).To(Equal(core.Int64Ptr(int64(5))))
				Expect(updateLoadBalancerListenerPolicyOptionsModel.Target).To(Equal(loadBalancerListenerPolicyPatchTargetModel))
				Expect(updateLoadBalancerListenerPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateLoadBalancerListenerPolicyRuleOptions successfully`, func() {
				// Construct an instance of the UpdateLoadBalancerListenerPolicyRuleOptions model
				loadBalancerID := "testString"
				listenerID := "testString"
				policyID := "testString"
				id := "testString"
				updateLoadBalancerListenerPolicyRuleOptionsModel := testService.NewUpdateLoadBalancerListenerPolicyRuleOptions(loadBalancerID, listenerID, policyID, id)
				updateLoadBalancerListenerPolicyRuleOptionsModel.SetLoadBalancerID("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.SetListenerID("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.SetPolicyID("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.SetID("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.SetCondition("contains")
				updateLoadBalancerListenerPolicyRuleOptionsModel.SetField("MY-APP-HEADER")
				updateLoadBalancerListenerPolicyRuleOptionsModel.SetType("header")
				updateLoadBalancerListenerPolicyRuleOptionsModel.SetValue("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateLoadBalancerListenerPolicyRuleOptionsModel).ToNot(BeNil())
				Expect(updateLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerListenerPolicyRuleOptionsModel.ListenerID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerListenerPolicyRuleOptionsModel.PolicyID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerListenerPolicyRuleOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerListenerPolicyRuleOptionsModel.Condition).To(Equal(core.StringPtr("contains")))
				Expect(updateLoadBalancerListenerPolicyRuleOptionsModel.Field).To(Equal(core.StringPtr("MY-APP-HEADER")))
				Expect(updateLoadBalancerListenerPolicyRuleOptionsModel.Type).To(Equal(core.StringPtr("header")))
				Expect(updateLoadBalancerListenerPolicyRuleOptionsModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerListenerPolicyRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateLoadBalancerOptions successfully`, func() {
				// Construct an instance of the UpdateLoadBalancerOptions model
				id := "testString"
				updateLoadBalancerOptionsModel := testService.NewUpdateLoadBalancerOptions(id)
				updateLoadBalancerOptionsModel.SetID("testString")
				updateLoadBalancerOptionsModel.SetName("my-load-balancer")
				updateLoadBalancerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateLoadBalancerOptionsModel).ToNot(BeNil())
				Expect(updateLoadBalancerOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerOptionsModel.Name).To(Equal(core.StringPtr("my-load-balancer")))
				Expect(updateLoadBalancerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateLoadBalancerPoolMemberOptions successfully`, func() {
				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeIP model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcclassicv1.LoadBalancerPoolMemberTargetPrototypeIP)
				Expect(loadBalancerPoolMemberTargetPrototypeModel).ToNot(BeNil())
				loadBalancerPoolMemberTargetPrototypeModel.Address = core.StringPtr("192.168.3.4")
				Expect(loadBalancerPoolMemberTargetPrototypeModel.Address).To(Equal(core.StringPtr("192.168.3.4")))

				// Construct an instance of the UpdateLoadBalancerPoolMemberOptions model
				loadBalancerID := "testString"
				poolID := "testString"
				id := "testString"
				updateLoadBalancerPoolMemberOptionsModel := testService.NewUpdateLoadBalancerPoolMemberOptions(loadBalancerID, poolID, id)
				updateLoadBalancerPoolMemberOptionsModel.SetLoadBalancerID("testString")
				updateLoadBalancerPoolMemberOptionsModel.SetPoolID("testString")
				updateLoadBalancerPoolMemberOptionsModel.SetID("testString")
				updateLoadBalancerPoolMemberOptionsModel.SetPort(int64(80))
				updateLoadBalancerPoolMemberOptionsModel.SetTarget(loadBalancerPoolMemberTargetPrototypeModel)
				updateLoadBalancerPoolMemberOptionsModel.SetWeight(int64(50))
				updateLoadBalancerPoolMemberOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateLoadBalancerPoolMemberOptionsModel).ToNot(BeNil())
				Expect(updateLoadBalancerPoolMemberOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerPoolMemberOptionsModel.PoolID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerPoolMemberOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerPoolMemberOptionsModel.Port).To(Equal(core.Int64Ptr(int64(80))))
				Expect(updateLoadBalancerPoolMemberOptionsModel.Target).To(Equal(loadBalancerPoolMemberTargetPrototypeModel))
				Expect(updateLoadBalancerPoolMemberOptionsModel.Weight).To(Equal(core.Int64Ptr(int64(50))))
				Expect(updateLoadBalancerPoolMemberOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateLoadBalancerPoolOptions successfully`, func() {
				// Construct an instance of the LoadBalancerPoolHealthMonitorPatch model
				loadBalancerPoolHealthMonitorPatchModel := new(vpcclassicv1.LoadBalancerPoolHealthMonitorPatch)
				Expect(loadBalancerPoolHealthMonitorPatchModel).ToNot(BeNil())
				loadBalancerPoolHealthMonitorPatchModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPatchModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPatchModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPatchModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPatchModel.Type = core.StringPtr("http")
				loadBalancerPoolHealthMonitorPatchModel.URLPath = core.StringPtr("/")
				Expect(loadBalancerPoolHealthMonitorPatchModel.Delay).To(Equal(core.Int64Ptr(int64(5))))
				Expect(loadBalancerPoolHealthMonitorPatchModel.MaxRetries).To(Equal(core.Int64Ptr(int64(2))))
				Expect(loadBalancerPoolHealthMonitorPatchModel.Port).To(Equal(core.Int64Ptr(int64(22))))
				Expect(loadBalancerPoolHealthMonitorPatchModel.Timeout).To(Equal(core.Int64Ptr(int64(2))))
				Expect(loadBalancerPoolHealthMonitorPatchModel.Type).To(Equal(core.StringPtr("http")))
				Expect(loadBalancerPoolHealthMonitorPatchModel.URLPath).To(Equal(core.StringPtr("/")))

				// Construct an instance of the LoadBalancerPoolSessionPersistencePatch model
				loadBalancerPoolSessionPersistencePatchModel := new(vpcclassicv1.LoadBalancerPoolSessionPersistencePatch)
				Expect(loadBalancerPoolSessionPersistencePatchModel).ToNot(BeNil())
				loadBalancerPoolSessionPersistencePatchModel.Type = core.StringPtr("source_ip")
				Expect(loadBalancerPoolSessionPersistencePatchModel.Type).To(Equal(core.StringPtr("source_ip")))

				// Construct an instance of the UpdateLoadBalancerPoolOptions model
				loadBalancerID := "testString"
				id := "testString"
				updateLoadBalancerPoolOptionsModel := testService.NewUpdateLoadBalancerPoolOptions(loadBalancerID, id)
				updateLoadBalancerPoolOptionsModel.SetLoadBalancerID("testString")
				updateLoadBalancerPoolOptionsModel.SetID("testString")
				updateLoadBalancerPoolOptionsModel.SetAlgorithm("least_connections")
				updateLoadBalancerPoolOptionsModel.SetHealthMonitor(loadBalancerPoolHealthMonitorPatchModel)
				updateLoadBalancerPoolOptionsModel.SetName("my-load-balancer-pool")
				updateLoadBalancerPoolOptionsModel.SetProtocol("http")
				updateLoadBalancerPoolOptionsModel.SetSessionPersistence(loadBalancerPoolSessionPersistencePatchModel)
				updateLoadBalancerPoolOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateLoadBalancerPoolOptionsModel).ToNot(BeNil())
				Expect(updateLoadBalancerPoolOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerPoolOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerPoolOptionsModel.Algorithm).To(Equal(core.StringPtr("least_connections")))
				Expect(updateLoadBalancerPoolOptionsModel.HealthMonitor).To(Equal(loadBalancerPoolHealthMonitorPatchModel))
				Expect(updateLoadBalancerPoolOptionsModel.Name).To(Equal(core.StringPtr("my-load-balancer-pool")))
				Expect(updateLoadBalancerPoolOptionsModel.Protocol).To(Equal(core.StringPtr("http")))
				Expect(updateLoadBalancerPoolOptionsModel.SessionPersistence).To(Equal(loadBalancerPoolSessionPersistencePatchModel))
				Expect(updateLoadBalancerPoolOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateNetworkACLOptions successfully`, func() {
				// Construct an instance of the UpdateNetworkACLOptions model
				id := "testString"
				updateNetworkACLOptionsModel := testService.NewUpdateNetworkACLOptions(id)
				updateNetworkACLOptionsModel.SetID("testString")
				updateNetworkACLOptionsModel.SetName("my-network-acl")
				updateNetworkACLOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateNetworkACLOptionsModel).ToNot(BeNil())
				Expect(updateNetworkACLOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateNetworkACLOptionsModel.Name).To(Equal(core.StringPtr("my-network-acl")))
				Expect(updateNetworkACLOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateNetworkACLRuleOptions successfully`, func() {
				// Construct an instance of the NetworkACLRuleIdentityByID model
				networkACLRuleIdentityModel := new(vpcclassicv1.NetworkACLRuleIdentityByID)
				Expect(networkACLRuleIdentityModel).ToNot(BeNil())
				networkACLRuleIdentityModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")
				Expect(networkACLRuleIdentityModel.ID).To(Equal(core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")))

				// Construct an instance of the NetworkACLRulePatchNetworkACLRuleProtocolIcmp model
				networkACLRulePatchModel := new(vpcclassicv1.NetworkACLRulePatchNetworkACLRuleProtocolIcmp)
				Expect(networkACLRulePatchModel).ToNot(BeNil())
				networkACLRulePatchModel.Action = core.StringPtr("allow")
				networkACLRulePatchModel.Before = networkACLRuleIdentityModel
				networkACLRulePatchModel.Destination = core.StringPtr("192.168.3.2/32")
				networkACLRulePatchModel.Direction = core.StringPtr("inbound")
				networkACLRulePatchModel.Name = core.StringPtr("my-rule-2")
				networkACLRulePatchModel.Protocol = core.StringPtr("icmp")
				networkACLRulePatchModel.Source = core.StringPtr("192.168.3.2/32")
				networkACLRulePatchModel.Code = core.Int64Ptr(int64(0))
				networkACLRulePatchModel.Type = core.Int64Ptr(int64(8))
				Expect(networkACLRulePatchModel.Action).To(Equal(core.StringPtr("allow")))
				Expect(networkACLRulePatchModel.Before).To(Equal(networkACLRuleIdentityModel))
				Expect(networkACLRulePatchModel.Destination).To(Equal(core.StringPtr("192.168.3.2/32")))
				Expect(networkACLRulePatchModel.Direction).To(Equal(core.StringPtr("inbound")))
				Expect(networkACLRulePatchModel.Name).To(Equal(core.StringPtr("my-rule-2")))
				Expect(networkACLRulePatchModel.Protocol).To(Equal(core.StringPtr("icmp")))
				Expect(networkACLRulePatchModel.Source).To(Equal(core.StringPtr("192.168.3.2/32")))
				Expect(networkACLRulePatchModel.Code).To(Equal(core.Int64Ptr(int64(0))))
				Expect(networkACLRulePatchModel.Type).To(Equal(core.Int64Ptr(int64(8))))

				// Construct an instance of the UpdateNetworkACLRuleOptions model
				networkACLID := "testString"
				id := "testString"
				var networkACLRulePatch vpcclassicv1.NetworkACLRulePatchIntf = nil
				updateNetworkACLRuleOptionsModel := testService.NewUpdateNetworkACLRuleOptions(networkACLID, id, networkACLRulePatch)
				updateNetworkACLRuleOptionsModel.SetNetworkACLID("testString")
				updateNetworkACLRuleOptionsModel.SetID("testString")
				updateNetworkACLRuleOptionsModel.SetNetworkACLRulePatch(networkACLRulePatchModel)
				updateNetworkACLRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateNetworkACLRuleOptionsModel).ToNot(BeNil())
				Expect(updateNetworkACLRuleOptionsModel.NetworkACLID).To(Equal(core.StringPtr("testString")))
				Expect(updateNetworkACLRuleOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateNetworkACLRuleOptionsModel.NetworkACLRulePatch).To(Equal(networkACLRulePatchModel))
				Expect(updateNetworkACLRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdatePublicGatewayOptions successfully`, func() {
				// Construct an instance of the UpdatePublicGatewayOptions model
				id := "testString"
				updatePublicGatewayOptionsModel := testService.NewUpdatePublicGatewayOptions(id)
				updatePublicGatewayOptionsModel.SetID("testString")
				updatePublicGatewayOptionsModel.SetName("my-public-gateway")
				updatePublicGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updatePublicGatewayOptionsModel).ToNot(BeNil())
				Expect(updatePublicGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updatePublicGatewayOptionsModel.Name).To(Equal(core.StringPtr("my-public-gateway")))
				Expect(updatePublicGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateSecurityGroupOptions successfully`, func() {
				// Construct an instance of the UpdateSecurityGroupOptions model
				id := "testString"
				updateSecurityGroupOptionsModel := testService.NewUpdateSecurityGroupOptions(id)
				updateSecurityGroupOptionsModel.SetID("testString")
				updateSecurityGroupOptionsModel.SetName("my-security-group")
				updateSecurityGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateSecurityGroupOptionsModel).ToNot(BeNil())
				Expect(updateSecurityGroupOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateSecurityGroupOptionsModel.Name).To(Equal(core.StringPtr("my-security-group")))
				Expect(updateSecurityGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateSecurityGroupRuleOptions successfully`, func() {
				// Construct an instance of the SecurityGroupRulePatchRemoteIP model
				securityGroupRulePatchRemoteModel := new(vpcclassicv1.SecurityGroupRulePatchRemoteIP)
				Expect(securityGroupRulePatchRemoteModel).ToNot(BeNil())
				securityGroupRulePatchRemoteModel.Address = core.StringPtr("192.168.3.4")
				Expect(securityGroupRulePatchRemoteModel.Address).To(Equal(core.StringPtr("192.168.3.4")))

				// Construct an instance of the SecurityGroupRulePatchSecurityGroupRuleProtocolIcmp model
				securityGroupRulePatchModel := new(vpcclassicv1.SecurityGroupRulePatchSecurityGroupRuleProtocolIcmp)
				Expect(securityGroupRulePatchModel).ToNot(BeNil())
				securityGroupRulePatchModel.Direction = core.StringPtr("inbound")
				securityGroupRulePatchModel.IPVersion = core.StringPtr("ipv4")
				securityGroupRulePatchModel.Protocol = core.StringPtr("icmp")
				securityGroupRulePatchModel.Remote = securityGroupRulePatchRemoteModel
				securityGroupRulePatchModel.Code = core.Int64Ptr(int64(0))
				securityGroupRulePatchModel.Type = core.Int64Ptr(int64(8))
				Expect(securityGroupRulePatchModel.Direction).To(Equal(core.StringPtr("inbound")))
				Expect(securityGroupRulePatchModel.IPVersion).To(Equal(core.StringPtr("ipv4")))
				Expect(securityGroupRulePatchModel.Protocol).To(Equal(core.StringPtr("icmp")))
				Expect(securityGroupRulePatchModel.Remote).To(Equal(securityGroupRulePatchRemoteModel))
				Expect(securityGroupRulePatchModel.Code).To(Equal(core.Int64Ptr(int64(0))))
				Expect(securityGroupRulePatchModel.Type).To(Equal(core.Int64Ptr(int64(8))))

				// Construct an instance of the UpdateSecurityGroupRuleOptions model
				securityGroupID := "testString"
				id := "testString"
				var securityGroupRulePatch vpcclassicv1.SecurityGroupRulePatchIntf = nil
				updateSecurityGroupRuleOptionsModel := testService.NewUpdateSecurityGroupRuleOptions(securityGroupID, id, securityGroupRulePatch)
				updateSecurityGroupRuleOptionsModel.SetSecurityGroupID("testString")
				updateSecurityGroupRuleOptionsModel.SetID("testString")
				updateSecurityGroupRuleOptionsModel.SetSecurityGroupRulePatch(securityGroupRulePatchModel)
				updateSecurityGroupRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateSecurityGroupRuleOptionsModel).ToNot(BeNil())
				Expect(updateSecurityGroupRuleOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(updateSecurityGroupRuleOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateSecurityGroupRuleOptionsModel.SecurityGroupRulePatch).To(Equal(securityGroupRulePatchModel))
				Expect(updateSecurityGroupRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateSubnetOptions successfully`, func() {
				// Construct an instance of the NetworkACLIdentityByID model
				networkACLIdentityModel := new(vpcclassicv1.NetworkACLIdentityByID)
				Expect(networkACLIdentityModel).ToNot(BeNil())
				networkACLIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")
				Expect(networkACLIdentityModel.ID).To(Equal(core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")))

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcclassicv1.PublicGatewayIdentityByID)
				Expect(publicGatewayIdentityModel).ToNot(BeNil())
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")
				Expect(publicGatewayIdentityModel.ID).To(Equal(core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")))

				// Construct an instance of the UpdateSubnetOptions model
				id := "testString"
				updateSubnetOptionsModel := testService.NewUpdateSubnetOptions(id)
				updateSubnetOptionsModel.SetID("testString")
				updateSubnetOptionsModel.SetName("my-subnet")
				updateSubnetOptionsModel.SetNetworkACL(networkACLIdentityModel)
				updateSubnetOptionsModel.SetPublicGateway(publicGatewayIdentityModel)
				updateSubnetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateSubnetOptionsModel).ToNot(BeNil())
				Expect(updateSubnetOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateSubnetOptionsModel.Name).To(Equal(core.StringPtr("my-subnet")))
				Expect(updateSubnetOptionsModel.NetworkACL).To(Equal(networkACLIdentityModel))
				Expect(updateSubnetOptionsModel.PublicGateway).To(Equal(publicGatewayIdentityModel))
				Expect(updateSubnetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateVolumeOptions successfully`, func() {
				// Construct an instance of the UpdateVolumeOptions model
				id := "testString"
				updateVolumeOptionsModel := testService.NewUpdateVolumeOptions(id)
				updateVolumeOptionsModel.SetID("testString")
				updateVolumeOptionsModel.SetName("my-volume")
				updateVolumeOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateVolumeOptionsModel).ToNot(BeNil())
				Expect(updateVolumeOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateVolumeOptionsModel.Name).To(Equal(core.StringPtr("my-volume")))
				Expect(updateVolumeOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateVPCAddressPrefixOptions successfully`, func() {
				// Construct an instance of the UpdateVPCAddressPrefixOptions model
				vpcID := "testString"
				id := "testString"
				updateVPCAddressPrefixOptionsModel := testService.NewUpdateVPCAddressPrefixOptions(vpcID, id)
				updateVPCAddressPrefixOptionsModel.SetVPCID("testString")
				updateVPCAddressPrefixOptionsModel.SetID("testString")
				updateVPCAddressPrefixOptionsModel.SetIsDefault(false)
				updateVPCAddressPrefixOptionsModel.SetName("my-address-prefix-2")
				updateVPCAddressPrefixOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateVPCAddressPrefixOptionsModel).ToNot(BeNil())
				Expect(updateVPCAddressPrefixOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(updateVPCAddressPrefixOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateVPCAddressPrefixOptionsModel.IsDefault).To(Equal(core.BoolPtr(false)))
				Expect(updateVPCAddressPrefixOptionsModel.Name).To(Equal(core.StringPtr("my-address-prefix-2")))
				Expect(updateVPCAddressPrefixOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateVPCOptions successfully`, func() {
				// Construct an instance of the UpdateVPCOptions model
				id := "testString"
				updateVPCOptionsModel := testService.NewUpdateVPCOptions(id)
				updateVPCOptionsModel.SetID("testString")
				updateVPCOptionsModel.SetName("my-vpc")
				updateVPCOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateVPCOptionsModel).ToNot(BeNil())
				Expect(updateVPCOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateVPCOptionsModel.Name).To(Equal(core.StringPtr("my-vpc")))
				Expect(updateVPCOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateVPCRouteOptions successfully`, func() {
				// Construct an instance of the UpdateVPCRouteOptions model
				vpcID := "testString"
				id := "testString"
				updateVPCRouteOptionsModel := testService.NewUpdateVPCRouteOptions(vpcID, id)
				updateVPCRouteOptionsModel.SetVPCID("testString")
				updateVPCRouteOptionsModel.SetID("testString")
				updateVPCRouteOptionsModel.SetName("my-route-2")
				updateVPCRouteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateVPCRouteOptionsModel).ToNot(BeNil())
				Expect(updateVPCRouteOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(updateVPCRouteOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateVPCRouteOptionsModel.Name).To(Equal(core.StringPtr("my-route-2")))
				Expect(updateVPCRouteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateVPNGatewayConnectionOptions successfully`, func() {
				// Construct an instance of the IPsecPolicyIdentityByID model
				iPsecPolicyIdentityModel := new(vpcclassicv1.IPsecPolicyIdentityByID)
				Expect(iPsecPolicyIdentityModel).ToNot(BeNil())
				iPsecPolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")
				Expect(iPsecPolicyIdentityModel.ID).To(Equal(core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")))

				// Construct an instance of the IkePolicyIdentityByID model
				ikePolicyIdentityModel := new(vpcclassicv1.IkePolicyIdentityByID)
				Expect(ikePolicyIdentityModel).ToNot(BeNil())
				ikePolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")
				Expect(ikePolicyIdentityModel.ID).To(Equal(core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")))

				// Construct an instance of the VPNGatewayConnectionDpdPrototype model
				vpnGatewayConnectionDpdPrototypeModel := new(vpcclassicv1.VPNGatewayConnectionDpdPrototype)
				Expect(vpnGatewayConnectionDpdPrototypeModel).ToNot(BeNil())
				vpnGatewayConnectionDpdPrototypeModel.Action = core.StringPtr("restart")
				vpnGatewayConnectionDpdPrototypeModel.Interval = core.Int64Ptr(int64(30))
				vpnGatewayConnectionDpdPrototypeModel.Timeout = core.Int64Ptr(int64(120))
				Expect(vpnGatewayConnectionDpdPrototypeModel.Action).To(Equal(core.StringPtr("restart")))
				Expect(vpnGatewayConnectionDpdPrototypeModel.Interval).To(Equal(core.Int64Ptr(int64(30))))
				Expect(vpnGatewayConnectionDpdPrototypeModel.Timeout).To(Equal(core.Int64Ptr(int64(120))))

				// Construct an instance of the UpdateVPNGatewayConnectionOptions model
				vpnGatewayID := "testString"
				id := "testString"
				updateVPNGatewayConnectionOptionsModel := testService.NewUpdateVPNGatewayConnectionOptions(vpnGatewayID, id)
				updateVPNGatewayConnectionOptionsModel.SetVPNGatewayID("testString")
				updateVPNGatewayConnectionOptionsModel.SetID("testString")
				updateVPNGatewayConnectionOptionsModel.SetAdminStateUp(true)
				updateVPNGatewayConnectionOptionsModel.SetDeadPeerDetection(vpnGatewayConnectionDpdPrototypeModel)
				updateVPNGatewayConnectionOptionsModel.SetIkePolicy(ikePolicyIdentityModel)
				updateVPNGatewayConnectionOptionsModel.SetIpsecPolicy(iPsecPolicyIdentityModel)
				updateVPNGatewayConnectionOptionsModel.SetName("my-vpn-connection")
				updateVPNGatewayConnectionOptionsModel.SetPeerAddress("169.21.50.5")
				updateVPNGatewayConnectionOptionsModel.SetPsk("lkj14b1oi0alcniejkso")
				updateVPNGatewayConnectionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateVPNGatewayConnectionOptionsModel).ToNot(BeNil())
				Expect(updateVPNGatewayConnectionOptionsModel.VPNGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(updateVPNGatewayConnectionOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateVPNGatewayConnectionOptionsModel.AdminStateUp).To(Equal(core.BoolPtr(true)))
				Expect(updateVPNGatewayConnectionOptionsModel.DeadPeerDetection).To(Equal(vpnGatewayConnectionDpdPrototypeModel))
				Expect(updateVPNGatewayConnectionOptionsModel.IkePolicy).To(Equal(ikePolicyIdentityModel))
				Expect(updateVPNGatewayConnectionOptionsModel.IpsecPolicy).To(Equal(iPsecPolicyIdentityModel))
				Expect(updateVPNGatewayConnectionOptionsModel.Name).To(Equal(core.StringPtr("my-vpn-connection")))
				Expect(updateVPNGatewayConnectionOptionsModel.PeerAddress).To(Equal(core.StringPtr("169.21.50.5")))
				Expect(updateVPNGatewayConnectionOptionsModel.Psk).To(Equal(core.StringPtr("lkj14b1oi0alcniejkso")))
				Expect(updateVPNGatewayConnectionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateVPNGatewayOptions successfully`, func() {
				// Construct an instance of the UpdateVPNGatewayOptions model
				id := "testString"
				updateVPNGatewayOptionsModel := testService.NewUpdateVPNGatewayOptions(id)
				updateVPNGatewayOptionsModel.SetID("testString")
				updateVPNGatewayOptionsModel.SetName("my-vpn-gateway")
				updateVPNGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateVPNGatewayOptionsModel).ToNot(BeNil())
				Expect(updateVPNGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateVPNGatewayOptionsModel.Name).To(Equal(core.StringPtr("my-vpn-gateway")))
				Expect(updateVPNGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewVolumeAttachmentPrototypeInstanceByImageContext successfully`, func() {
				var volume *vpcclassicv1.VolumePrototypeInstanceByImageContext = nil
				_, err := testService.NewVolumeAttachmentPrototypeInstanceByImageContext(volume)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewVolumeAttachmentPrototypeInstanceContext successfully`, func() {
				var volume vpcclassicv1.VolumeAttachmentPrototypeInstanceContextVolumeIntf = nil
				_, err := testService.NewVolumeAttachmentPrototypeInstanceContext(volume)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewVolumePrototypeInstanceByImageContext successfully`, func() {
				var profile vpcclassicv1.VolumeProfileIdentityIntf = nil
				_, err := testService.NewVolumePrototypeInstanceByImageContext(profile)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewCertificateInstanceIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"
				model, err := testService.NewCertificateInstanceIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewEncryptionKeyIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"
				model, err := testService.NewEncryptionKeyIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFloatingIPByTargetTargetNetworkInterfaceIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e"
				model, err := testService.NewFloatingIPByTargetTargetNetworkInterfaceIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFloatingIPByTargetTargetNetworkInterfaceIdentityByID successfully`, func() {
				id := "10c02d81-0ecb-4dc5-897d-28392913b81e"
				model, err := testService.NewFloatingIPByTargetTargetNetworkInterfaceIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e"
				model, err := testService.NewFloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID successfully`, func() {
				id := "10c02d81-0ecb-4dc5-897d-28392913b81e"
				model, err := testService.NewFloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFloatingIPPrototypeFloatingIPByTarget successfully`, func() {
				var target vpcclassicv1.FloatingIPByTargetTargetIntf = nil
				_, err := testService.NewFloatingIPPrototypeFloatingIPByTarget(target)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewFloatingIPPrototypeFloatingIPByZone successfully`, func() {
				var zone vpcclassicv1.ZoneIdentityIntf = nil
				_, err := testService.NewFloatingIPPrototypeFloatingIPByZone(zone)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewIkePolicyIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b"
				model, err := testService.NewIkePolicyIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewIkePolicyIdentityByID successfully`, func() {
				id := "ddf51bec-3424-11e8-b467-0ed5f89f718b"
				model, err := testService.NewIkePolicyIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewIPsecPolicyIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b"
				model, err := testService.NewIPsecPolicyIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewIPsecPolicyIdentityByID successfully`, func() {
				id := "ddf51bec-3424-11e8-b467-0ed5f89f718b"
				model, err := testService.NewIPsecPolicyIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewImageIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8"
				model, err := testService.NewImageIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewImageIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8"
				model, err := testService.NewImageIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewImageIdentityByID successfully`, func() {
				id := "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8"
				model, err := testService.NewImageIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewImagePrototypeImageByFile successfully`, func() {
				var file *vpcclassicv1.ImageFilePrototype = nil
				var operatingSystem vpcclassicv1.OperatingSystemIdentityIntf = nil
				_, err := testService.NewImagePrototypeImageByFile(file, operatingSystem)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewInstanceProfileIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south-1:::instance-profile:bc1-4x16"
				model, err := testService.NewInstanceProfileIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstanceProfileIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16"
				model, err := testService.NewInstanceProfileIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstanceProfileIdentityByName successfully`, func() {
				name := "bc1-4x16"
				model, err := testService.NewInstanceProfileIdentityByName(name)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstancePrototypeInstanceByImage successfully`, func() {
				var image vpcclassicv1.ImageIdentityIntf = nil
				var primaryNetworkInterface *vpcclassicv1.NetworkInterfacePrototype = nil
				var zone vpcclassicv1.ZoneIdentityIntf = nil
				_, err := testService.NewInstancePrototypeInstanceByImage(image, primaryNetworkInterface, zone)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewKeyIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803"
				model, err := testService.NewKeyIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewKeyIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803"
				model, err := testService.NewKeyIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewKeyIdentityByID successfully`, func() {
				id := "a6b1a881-2ce8-41a3-80fc-36316a73f803"
				model, err := testService.NewKeyIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewKeyIdentityKeyIdentityByFingerprint successfully`, func() {
				fingerprint := "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY"
				model, err := testService.NewKeyIdentityKeyIdentityByFingerprint(fingerprint)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerListenerPolicyPrototypeTargetLoadBalancerListenerPolicyRedirectURLPrototype successfully`, func() {
				httpStatusCode := int64(301)
				url := "https://www.redirect.com"
				model, err := testService.NewLoadBalancerListenerPolicyPrototypeTargetLoadBalancerListenerPolicyRedirectURLPrototype(httpStatusCode, url)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004"
				model, err := testService.NewLoadBalancerPoolIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolIdentityByID successfully`, func() {
				id := "70294e14-4e61-11e8-bcf4-0242ac110004"
				model, err := testService.NewLoadBalancerPoolIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolMemberTargetPrototypeIP successfully`, func() {
				address := "192.168.3.4"
				model, err := testService.NewLoadBalancerPoolMemberTargetPrototypeIP(address)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf"
				model, err := testService.NewNetworkACLIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLIdentityByID successfully`, func() {
				id := "a4e28308-8ee7-46ab-8108-9f881f22bdbf"
				model, err := testService.NewNetworkACLIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLPrototypeNetworkACLBySourceNetworkACL successfully`, func() {
				var sourceNetworkACL vpcclassicv1.NetworkACLIdentityIntf = nil
				_, err := testService.NewNetworkACLPrototypeNetworkACLBySourceNetworkACL(sourceNetworkACL)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewNetworkACLRuleIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9"
				model, err := testService.NewNetworkACLRuleIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLRuleIdentityByID successfully`, func() {
				id := "8daca77a-4980-4d33-8f3e-7038797be8f9"
				model, err := testService.NewNetworkACLRuleIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll successfully`, func() {
				action := "allow"
				destination := "192.168.3.2/32"
				direction := "inbound"
				protocol := "all"
				source := "192.168.3.2/32"
				model, err := testService.NewNetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll(action, destination, direction, protocol, source)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolIcmp successfully`, func() {
				action := "allow"
				destination := "192.168.3.2/32"
				direction := "inbound"
				protocol := "icmp"
				source := "192.168.3.2/32"
				model, err := testService.NewNetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolIcmp(action, destination, direction, protocol, source)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolTcpudp successfully`, func() {
				action := "allow"
				destination := "192.168.3.2/32"
				direction := "inbound"
				protocol := "udp"
				source := "192.168.3.2/32"
				model, err := testService.NewNetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolTcpudp(action, destination, direction, protocol, source)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLRulePrototypeNetworkACLRuleProtocolAll successfully`, func() {
				action := "allow"
				destination := "192.168.3.2/32"
				direction := "inbound"
				protocol := "all"
				source := "192.168.3.2/32"
				model, err := testService.NewNetworkACLRulePrototypeNetworkACLRuleProtocolAll(action, destination, direction, protocol, source)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLRulePrototypeNetworkACLRuleProtocolIcmp successfully`, func() {
				action := "allow"
				destination := "192.168.3.2/32"
				direction := "inbound"
				protocol := "icmp"
				source := "192.168.3.2/32"
				model, err := testService.NewNetworkACLRulePrototypeNetworkACLRuleProtocolIcmp(action, destination, direction, protocol, source)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLRulePrototypeNetworkACLRuleProtocolTcpudp successfully`, func() {
				action := "allow"
				destination := "192.168.3.2/32"
				direction := "inbound"
				protocol := "udp"
				source := "192.168.3.2/32"
				model, err := testService.NewNetworkACLRulePrototypeNetworkACLRuleProtocolTcpudp(action, destination, direction, protocol, source)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewOperatingSystemIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64"
				model, err := testService.NewOperatingSystemIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewOperatingSystemIdentityByName successfully`, func() {
				name := "ubuntu-16-amd64"
				model, err := testService.NewOperatingSystemIdentityByName(name)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPublicGatewayIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241"
				model, err := testService.NewPublicGatewayIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPublicGatewayIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241"
				model, err := testService.NewPublicGatewayIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPublicGatewayIdentityByID successfully`, func() {
				id := "dc5431ef-1fc6-4861-adc9-a59d077d1241"
				model, err := testService.NewPublicGatewayIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewResourceGroupIdentityByID successfully`, func() {
				id := "fee82deba12e4c0fb69c3b09d1f12345"
				model, err := testService.NewResourceGroupIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRouteNextHopPrototypeRouteNextHopIP successfully`, func() {
				address := "192.168.3.4"
				model, err := testService.NewRouteNextHopPrototypeRouteNextHopIP(address)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				model, err := testService.NewSecurityGroupIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				model, err := testService.NewSecurityGroupIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupIdentityByID successfully`, func() {
				id := "be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				model, err := testService.NewSecurityGroupIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePatchRemoteCIDR successfully`, func() {
				cidrBlock := "192.168.3.0/24"
				model, err := testService.NewSecurityGroupRulePatchRemoteCIDR(cidrBlock)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePatchRemoteIP successfully`, func() {
				address := "192.168.3.4"
				model, err := testService.NewSecurityGroupRulePatchRemoteIP(address)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePrototypeRemoteCIDR successfully`, func() {
				cidrBlock := "192.168.3.0/24"
				model, err := testService.NewSecurityGroupRulePrototypeRemoteCIDR(cidrBlock)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePrototypeRemoteIP successfully`, func() {
				address := "192.168.3.4"
				model, err := testService.NewSecurityGroupRulePrototypeRemoteIP(address)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolAll successfully`, func() {
				direction := "inbound"
				model, err := testService.NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolAll(direction)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolIcmp successfully`, func() {
				direction := "inbound"
				model, err := testService.NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolIcmp(direction)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolTcpudp successfully`, func() {
				direction := "inbound"
				model, err := testService.NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolTcpudp(direction)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSubnetIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e"
				model, err := testService.NewSubnetIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSubnetIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e"
				model, err := testService.NewSubnetIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSubnetIdentityByID successfully`, func() {
				id := "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"
				model, err := testService.NewSubnetIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSubnetPrototypeSubnetByCIDR successfully`, func() {
				var vpc vpcclassicv1.VPCIdentityIntf = nil
				ipv4CIDRBlock := "10.0.0.0/24"
				_, err := testService.NewSubnetPrototypeSubnetByCIDR(vpc, ipv4CIDRBlock)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewSubnetPrototypeSubnetByTotalCount successfully`, func() {
				var vpc vpcclassicv1.VPCIdentityIntf = nil
				totalIpv4AddressCount := int64(256)
				var zone vpcclassicv1.ZoneIdentityIntf = nil
				_, err := testService.NewSubnetPrototypeSubnetByTotalCount(vpc, totalIpv4AddressCount, zone)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewVPCIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b"
				model, err := testService.NewVPCIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVPCIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b"
				model, err := testService.NewVPCIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVPCIdentityByID successfully`, func() {
				id := "4727d842-f94f-4a2d-824a-9bc9b02c523b"
				model, err := testService.NewVPCIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVolumeIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5"
				model, err := testService.NewVolumeIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVolumeIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5"
				model, err := testService.NewVolumeIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVolumeIdentityByID successfully`, func() {
				id := "1a6b7274-678d-4dfb-8981-c71dd9d4daa5"
				model, err := testService.NewVolumeIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVolumeProfileIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose"
				model, err := testService.NewVolumeProfileIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVolumeProfileIdentityByName successfully`, func() {
				name := "general-purpose"
				model, err := testService.NewVolumeProfileIdentityByName(name)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVolumePrototypeVolumeByCapacity successfully`, func() {
				var profile vpcclassicv1.VolumeProfileIdentityIntf = nil
				var zone vpcclassicv1.ZoneIdentityIntf = nil
				capacity := int64(100)
				_, err := testService.NewVolumePrototypeVolumeByCapacity(profile, zone, capacity)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewZoneIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"
				model, err := testService.NewZoneIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewZoneIdentityByName successfully`, func() {
				name := "us-south-1"
				model, err := testService.NewZoneIdentityByName(name)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004"
				model, err := testService.NewLoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID successfully`, func() {
				id := "70294e14-4e61-11e8-bcf4-0242ac110004"
				model, err := testService.NewLoadBalancerListenerPolicyPatchTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004"
				model, err := testService.NewLoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID successfully`, func() {
				id := "70294e14-4e61-11e8-bcf4-0242ac110004"
				model, err := testService.NewLoadBalancerListenerPolicyPrototypeTargetLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPublicGatewayPrototypeFloatingIPFloatingIPIdentityFloatingIPIdentityByAddress successfully`, func() {
				address := "203.0.113.1"
				model, err := testService.NewPublicGatewayPrototypeFloatingIPFloatingIPIdentityFloatingIPIdentityByAddress(address)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPublicGatewayPrototypeFloatingIPFloatingIPIdentityFloatingIPIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689"
				model, err := testService.NewPublicGatewayPrototypeFloatingIPFloatingIPIdentityFloatingIPIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPublicGatewayPrototypeFloatingIPFloatingIPIdentityFloatingIPIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689"
				model, err := testService.NewPublicGatewayPrototypeFloatingIPFloatingIPIdentityFloatingIPIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPublicGatewayPrototypeFloatingIPFloatingIPIdentityFloatingIPIdentityByID successfully`, func() {
				id := "39300233-9995-4806-89a5-3c1b6eb88689"
				model, err := testService.NewPublicGatewayPrototypeFloatingIPFloatingIPIdentityFloatingIPIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				model, err := testService.NewSecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				model, err := testService.NewSecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByID successfully`, func() {
				id := "be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				model, err := testService.NewSecurityGroupRulePatchRemoteSecurityGroupIdentitySecurityGroupIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				model, err := testService.NewSecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				model, err := testService.NewSecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByID successfully`, func() {
				id := "be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				model, err := testService.NewSecurityGroupRulePrototypeRemoteSecurityGroupIdentitySecurityGroupIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVolumeAttachmentPrototypeInstanceContextVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity successfully`, func() {
				var profile vpcclassicv1.VolumeProfileIdentityIntf = nil
				capacity := int64(100)
				_, err := testService.NewVolumeAttachmentPrototypeInstanceContextVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity(profile, capacity)
				Expect(err).ToNot(BeNil())
			})
		})
	})
	Describe(`Utility function tests`, func() {
		It(`Invoke CreateMockByteArray() successfully`, func() {
			mockByteArray := CreateMockByteArray("This is a test")
			Expect(mockByteArray).ToNot(BeNil())
		})
		It(`Invoke CreateMockUUID() successfully`, func() {
			mockUUID := CreateMockUUID("9fab83da-98cb-4f18-a7ba-b6f0435c9673")
			Expect(mockUUID).ToNot(BeNil())
		})
		It(`Invoke CreateMockReader() successfully`, func() {
			mockReader := CreateMockReader("This is a test.")
			Expect(mockReader).ToNot(BeNil())
		})
		It(`Invoke CreateMockDate() successfully`, func() {
			mockDate := CreateMockDate()
			Expect(mockDate).ToNot(BeNil())
		})
		It(`Invoke CreateMockDateTime() successfully`, func() {
			mockDateTime := CreateMockDateTime()
			Expect(mockDateTime).ToNot(BeNil())
		})
	})
})

//
// Utility functions used by the generated test code
//

func CreateMockByteArray(mockData string) *[]byte {
	ba := make([]byte, 0)
	ba = append(ba, mockData...)
	return &ba
}

func CreateMockUUID(mockData string) *strfmt.UUID {
	uuid := strfmt.UUID(mockData)
	return &uuid
}

func CreateMockReader(mockData string) io.ReadCloser {
	return ioutil.NopCloser(bytes.NewReader([]byte(mockData)))
}

func CreateMockDate() *strfmt.Date {
	d := strfmt.Date(time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC))
	return &d
}

func CreateMockDateTime() *strfmt.DateTime {
	d := strfmt.DateTime(time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC))
	return &d
}

func SetTestEnvironment(testEnvironment map[string]string) {
	for key, value := range testEnvironment {
		os.Setenv(key, value)
	}
}

func ClearTestEnvironment(testEnvironment map[string]string) {
	for key := range testEnvironment {
		os.Unsetenv(key)
	}
}
